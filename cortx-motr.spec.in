# TODO investigate why it's needed on aarch64
%if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
%undefine _missing_build_ids_terminate_build
%endif
# feature flags
%bcond_with ut
%bcond_with debuginfo_sources
%bcond_with cassandra
%bcond_with ivt

# Below line will enable the isal by default. This will add Intel ISA as
# dependency by default. User can override this by using '--without isal'
# in makefile to disable it. To change the default value i.e. to disable
# Intel ISA dependency by default, use '%bcond_with isal'.
%bcond_without isal

# configure options
%define with_linux  %( test -n "$kernel_src" && echo "--with-linux=$kernel_src" )
%define with_lustre %( test -n "$lustre_src" && echo "--with-lustre=$lustre_src" )

# kernel version.
%define raw_kernel_ver %(
                          if test -n "$kernel_src"; then
                              basename $(readlink -f "$kernel_src")
                          else
                              uname -r
                          fi
                        )

%define kernel_ver %( echo %{raw_kernel_ver} | tr - _ | sed -e 's/\.debug$//' -e 's/\.%{_arch}$//' -e 's/\.%{?dist:-el7}$//' -e 's/\.el7$//'  )
%if "%{?CONFIG_ARCH_TYPE}" == "x86_64"
%define kernel_ver_requires %( echo %{raw_kernel_ver} | sed -e 's/\.debug$//' -e 's/\.x86_64$//' )
%else if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
%define kernel_ver_requires %( echo %{raw_kernel_ver} | sed -e 's/\.debug$//' -e 's/\.aarch64$//' )
%endif

# build number
%define build_num  %( test -n "$build_number" && echo "$build_number" || echo 1 )

%define lustre         lustre-client
%define lustre_devel   lustre-client-devel

# workaround issue with motr-debuginfo package, which injects incorrect
# dependencies on itself into motr package when internal deps generator is used;
# that prevents a correct installation of any of the built motr packages without
# using '--no-deps' option
%global _use_internal_dependency_generator 0
%define _use_internal_dependency_generator 0

# configure options
%define  configure_release_opts     --enable-release --disable-avx --enable-force-ssse3 --with-trace-kbuf-size=256 --with-trace-ubuf-size=64
%define  configure_ut_opts          --enable-dev-mode --disable-altogether-mode
%if %{with cassandra}
%define  configure_cassandra_opts   --with-cassandra
%endif
%if !%{with isal}
%define  configure_isal_opts   --disable-isal
%endif

%if %{with ivt} || %{with ut}
%define  configure_opts  %{configure_ut_opts} %{?configure_cassandra_opts} %{?configure_isal_opts}
%else
%define  configure_opts  %{configure_release_opts} %{?configure_cassandra_opts} %{?configure_isal_opts}
%endif

Name:           @PACKAGE@
Version:        @PACKAGE_VERSION@
Release:        %{build_num}_@GIT_REV_ID_RPM@_%{kernel_ver}%{?dist}
Summary:        CORTX Motr
Group:          System Environment/Base
License:        Seagate
Source:         %{name}-%{version}.tar.gz
%if "%{?CONFIG_ARCH_TYPE}" == "x86_64"
BuildArch:      x86_64
%else if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
BuildArch:      aarch64
%endif
ExcludeArch:    i686
Provides:       %{name}-libs = %{version}-%{release}
Provides:       %{name}-modules = %{version}-%{release}
# backward compatibility with legacy product name:
Obsoletes:      mero
Obsoletes:      eos-core
Provides:       motr = %{version}-%{release}
%if "%{?CONFIG_ARCH_TYPE}" == "x86_64"
Provides:       motr(x86_64) = %{version}-%{release}
%else if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
Provides:       motr(aarch64) = %{version}-%{release}
%endif
Provides:       motr-libs = %{version}-%{release}
Provides:       motr-modules = %{version}-%{release}

BuildRequires:  automake
BuildRequires:  autoconf
BuildRequires:  libtool
BuildRequires:  make
BuildRequires:  gcc
BuildRequires:  gcc-c++
%if %{rhel} <= 7
%if "%{?CONFIG_ARCH_TYPE}" == "x86_64"
BuildRequires:  gccxml
%else if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
#BuildRequires:  castxml
%endif
%else
BuildRequires:  castxml
%endif

BuildRequires:  glibc-headers
BuildRequires:  asciidoc
BuildRequires:  libyaml-devel
BuildRequires:  libaio-devel
BuildRequires:  perl
BuildRequires:  perl-XML-LibXML
BuildRequires:  perl-List-MoreUtils
BuildRequires:  perl-File-Find-Rule
BuildRequires:  perl-IO-All
BuildRequires:  perl-File-Slurp
BuildRequires:  perl-YAML-LibYAML
BuildRequires:  kernel-devel = %{kernel_ver_requires}
BuildRequires:  %{lustre_devel}
BuildRequires:  libuuid-devel
BuildRequires:  openssl
BuildRequires:  openssl-devel
BuildRequires:  binutils-devel
%if %{rhel} <= 7
BuildRequires:  python36-ply
%else
BuildRequires:  python3-ply
%endif
BuildRequires:  perl-autodie
BuildRequires:  systemd-devel
%if %{rhel} <= 7
BuildRequires:  python-devel
%else
BuildRequires:  python2-devel
%endif
BuildRequires:  libedit-devel
%if %{with isal}
BuildRequires:  isa-l
%endif
%if %{with cassandra}
BuildRequires:  libcassandra
BuildRequires:  libuv
%endif

Requires:       kernel = %{kernel_ver_requires}
Requires:       %{lustre}
Requires:       libaio
Requires:       libyaml
#Supported openssl versions -- CentOS 7 its 1.0.2k, RHEL8 its 1.1.1
Requires:       openssl
Requires:       gdb
Requires:       genders
Requires:       sysvinit-tools
Requires:       attr
Requires:       perl
Requires:       perl-YAML-LibYAML
Requires:       perl-DateTime
Requires:       perl-File-Which
Requires:       perl-List-MoreUtils
Requires:       perl-autodie
Requires:       perl-Try-Tiny
Requires:       perl-Sereal
Requires:       perl-MCE
Requires:       ruby
Requires:       facter
Requires:       rubygem-net-ssh
Requires:       python36-ply
Requires:       libedit
%if %{with isal}
Requires:       isa-l
%endif
Requires(pre):  shadow-utils
Requires(post): findutils

%description
CORTX Motr runtime

%package devel
Summary: CORTX Motr include headers
Group: Development/Kernel
Provides: %{name}-devel = %{version}-%{release}
# backward compatibility with legacy product name:
Obsoletes: mero-devel
Obsoletes: eos-core-devel
Provides: motr-devel = %{version}-%{release}
Requires: binutils-devel
Requires: libyaml-devel
Requires: libaio-devel
Requires: libuuid-devel
Requires: pkgconfig
Requires: systemd-devel
Requires: glibc-headers
Requires: kernel-devel = %{kernel_ver_requires}
Requires: %{lustre_devel}


%description devel
Header files that are required to link with CORTX Motr libraries.

%if %{with ut}
%package tests-ut
Summary: CORTX Motr unit tests
Group: Development/Kernel
Conflicts: %{name}

%description tests-ut
CORTX Motr unit tests (for kernel and user space).
%endif # with ut

%if %{with ivt}
%package ivt
Summary: CORTX Motr IVT
Group: Development/Kernel

%description ivt
CORTX Motr IVT.
%endif # with ivt

%prep
%setup -q

%build
%if "%{CONFIG_ARCH_TYPE}" == "x86_64"
%configure %{with_linux} %{with_lustre} %{configure_opts} 
%else if "%{?CONFIG_ARCH_TYPE}" == "aarch64"
%configure %{with_linux} %{with_lustre} %{configure_opts} enable_castxml=yes  
%endif
make %{?_smp_mflags}

%install
rm -rf %{buildroot}

%if %{with ivt}
make DESTDIR=%{buildroot} install-ivt

find %{buildroot} \
        -name m0workload \
        -o -name create_workload_from_excel \
        -o -name sample_workload_excel_test.xls \
        -o -name mix_workload.yaml \
        -o -name m0crate_workload_batch_1_file1.yaml |
    sed -e 's#^%{buildroot}##' >> ivt.files

sort -o ivt.files ivt.files
find %{buildroot} -type f | sed -e 's#^%{buildroot}##' | sort |
    comm -13 ivt.files - | sed -e 's#^#%{buildroot}#' > ivt.exclude
%else
%if %{with ut}

make DESTDIR=%{buildroot} install-tests

find %{buildroot} -name m0tr.ko -o -name m0ut.ko -o -name galois.ko \
	     | sed -e 's#^%{buildroot}##' > tests-ut.files

find %{buildroot} \
        -name m0ut \
        -o -name m0ut-isolated \
        -o -name m0ub \
        -o -name m0run \
        -o -name m0gentestds \
        -o -name 'm0kut*' \
        -o -name 'libtestlib*.so*' \
        -o -name 'libmotr*.so*' \
        -o -name 'libgalois*.so*' |
    sed -e 's#^%{buildroot}##' >> tests-ut.files

sort -o tests-ut.files tests-ut.files
find %{buildroot} -type f -o -type l | sed -e 's#^%{buildroot}##' | sort |
    comm -13 tests-ut.files - | sed -e 's#^#%{buildroot}#' > tests-ut.exclude
xargs -a tests-ut.exclude rm -rv

%else

make DESTDIR=%{buildroot} install
find %{buildroot} -name 'm0ff2c' -o \
                  -name 'm0gccxml2xcode*' |
    sed -e 's#^%{buildroot}##' -e 's/\.1$/.1.gz/' > devel.files
find %{buildroot} -name 'libmotr-xcode-ff2c*.so*' | sed -e 's#^%{buildroot}##' >> devel.files
find %{buildroot} -name '*.la' | sed -e 's#^%{buildroot}##' >> devel.files
find %{buildroot}%{_includedir} | sed -e 's#^%{buildroot}##' >> devel.files
find %{buildroot}%{_libdir} -name motr.pc | sed -e 's#^%{buildroot}##' >> devel.files
mkdir -p %{buildroot}%{_localstatedir}/motr

%endif # with ut
%endif # with ivt

# Remove depmod output - it is regenerated during %post
if [ -e %{buildroot}/lib/modules/%{raw_kernel_ver}/modules.dep ]; then
	rm %{buildroot}/lib/modules/%{raw_kernel_ver}/modules.*
fi

%files

%if !%{with ivt} && !%{with ut}
%doc AUTHORS README.rst NEWS ChangeLog COPYING
%{_bindir}/*
%{_sbindir}/*
%{_libdir}/*
%{_libexecdir}/%{name}/*
%{_exec_prefix}/lib/debug/*
%{_exec_prefix}/lib/systemd/*
%{_exec_prefix}/lib/udev/*
%{_datadir}/*
%{_mandir}/*
%attr(0770, motr, motr) %{_localstatedir}/motr
%config %attr(0664, motr, motr) %{_sysconfdir}/sysconfig/*
%config %attr(0755, root, root) %{_sysconfdir}/cron.hourly/m0trace*
%config %attr(0755, root, root) %{_sysconfdir}/cron.hourly/m0addb*
%{_sysconfdir}/systemd/system/*
%{_sysconfdir}/security/limits.d/90-motr.conf
/opt/seagate/cortx/motr/*
/lib/modules/*/kernel/fs/motr/*
%exclude %{_bindir}/m0gentestds
%exclude %{_bindir}/m0gccxml2xcode
%exclude %{_bindir}/m0kut*
%exclude %{_bindir}/m0ut*
%exclude %{_bindir}/m0ub
%exclude %{_bindir}/m0ff2c
%exclude %{_sbindir}/m0run
%exclude %{_libdir}/*.la
%exclude %{_libdir}/libmotr-ut*
%exclude %{_libdir}/libtestlib*
%exclude %{_libdir}/libmotr-xcode-ff2c*
%exclude %{_libdir}/pkgconfig/
%exclude %{_mandir}/**/m0gccxml2xcode*
%exclude /lib/modules/*/kernel/fs/motr/m0lnet*
%exclude /lib/modules/*/kernel/fs/motr/m0net*
%exclude /lib/modules/*/kernel/fs/motr/m0rpc*
%exclude /lib/modules/*/kernel/fs/motr/m0ut*
%exclude /usr/bin/workload*
%endif

%if %{with ivt}
%files ivt -f ivt.files
%else
%if %{with ut}
%files tests-ut -f tests-ut.files
%else
%files devel -f devel.files
%endif # with ut
%endif # with ivt

# See 'post' section comment about '-e' argument.
%pre -e

# Guidelings for user/group creation in Fedora:
#   https://fedoraproject.org/wiki/Packaging:UsersAndGroups?rd=Packaging/UsersAndGroups
getent group  motr >/dev/null || groupadd --system motr
getent passwd motr >/dev/null || useradd --system --shell /sbin/nologin \
    --no-user-group --gid motr --home-dir / --comment 'Motr daemon' motr

# The '-e' argument enables runtime macro expansion for this particular script.
# Also note that macros have to be escaped using %% and not %, otherwise it
# would be expanded at build-time.
# See http://rpm.org/user_doc/scriptlet_expansion.html for more info.
%post -e
/sbin/depmod -a
systemctl daemon-reload
echo $(date) &> /var/log/motr-rpm-conf-update.log
/usr/sbin/m0provision config &>> /var/log/motr-rpm-conf-update.log

if [ x%%{?no_trace_logs} != x ] ; then
    /bin/sed -i -r -e "s/(MOTR_TRACED_KMOD=)yes/\1no/" /etc/sysconfig/motr
    /bin/sed -i -r -e "s/(MOTR_TRACED_M0D=)yes/\1no/" /etc/sysconfig/motr
fi

# when doing an upgrade
if [ $1 -eq 2 ] ; then
   echo "Upgrading %{_localstatedir}/motr group and permissions"
   find %{_localstatedir}/motr ! -group motr -exec chown :motr '{}' \; -exec chmod g+w,o-rwx '{}' \;
fi

%postun
/sbin/depmod -a
systemctl daemon-reload

%if %{with ivt}
%post ivt
/sbin/depmod -a

%postun ivt
/sbin/depmod -a

%else
%if %{with ut}

%post tests-ut
/sbin/depmod -a

%postun tests-ut
/sbin/depmod -a

%endif # with ut
%endif # with ivt
