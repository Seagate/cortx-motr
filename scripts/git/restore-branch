#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script restores an old branch archived with `git format-patch`.
# By default it takes branch data from $old_branches_dir, but it's possible to
# specify another location of branch data with CLI option.

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly old_branches_dir='patches/old_branches'
readonly old_branches_tag='old-branches'

# variables
branch_name=
branch_dir=
dry_run=false
list_branches=false
list_glob='*'


#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME -h|--help
       $PROG_NAME -l[glob] | --list[=glob]
       $PROG_NAME -d|--branch-dir path
       $PROG_NAME branch-name

    -l[glob], --list[=glob] List branches available to restore. It's possible to
                            specify a shell 'glob' to filter the result. By
                            default, all available branches are listed.

    -d|--branch-dir path    Explicitly specify directory where branch's patches
                            are stored. Besides patches, directory should
                            contain a special file, named 'base-commit', with
                            commit-id on top of which patches should be applied.
                            Last part of the 'path' is used as a branch name.
                            By default, branch's data are stored under
                            '${old_branches_dir}'.

    -h|--help               Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hl::d: --long help,list::,branch-dir: -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -l|--list)          list_branches=true
                                [[ -n $2 ]] && list_glob="$2"
                                shift 2
                                ;;
            -d|--branch-dir)    branch_dir=$2; shift 2 ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done

    branch_name=$1
}


#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

run()
{
    local cmd="$*"

    $dry_run && echo $cmd
    $dry_run || $cmd
}


#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options $@

if $list_branches ; then
    git ls-files --with-tree=$old_branches_tag $old_branches_dir \
    | cut -d/ -f3 \
    | uniq \
    | column
    exit 0
fi

if [[ -z "$branch_name" && -z "$branch_dir" ]] ; then
    die "Please, specify either a name of branch or a directory location with" \
        " branch's patches."
fi

if [[ -n "$branch_dir" && -z "$branch_name" ]] ; then
    branch_name=$(basename "$branch_dir")
fi

git checkout $old_branches_tag

if [[ -n "$branch_name" && -z "$branch_dir" ]] ; then
    branch_dir="$old_branches_dir/$branch_name"
    [[ ! -d $branch_dir ]] && \
        die "No branch with name '$branch_name' is available in default storage."
fi

remove_tmp_dir()
{
    [[ -d $patch_dir ]] && rm -rf $patch_dir
}

patch_dir=$(mktemp -d tmp.XXXXXXXXXX)
trap remove_tmp_dir ERR EXIT
cp "$branch_dir/"* $patch_dir

base_commit=$(cat "$patch_dir/base-commit")
git checkout -b "$branch_name" $base_commit
git am "$patch_dir"/*.patch
