#!/usr/bin/env bash

# This script symlinks Motr init scripts to appropriate directories under /etc
# so Motr services can be started from development source tree directory, using
# the same interface as when Motr rpm is installed system-wide.


#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)

M0_SRC_DIR="$(readlink -f $0)"
M0_SRC_DIR="${M0_SRC_DIR%/*/*}"

# variables
dry_run=false
link_files=false
action='install'
with_lnet_service=false
verbose=true
m0spiel_pkg_file=/var/motr/m0spiel.pkg.files

sysconfig_dir='/etc/sysconfig'
[ -d $sysconfig_dir ] || sysconfig_dir='/etc/default'
[ -d $sysconfig_dir ] || die 'Error: unknown Linux distribution'

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END

Usage: $PROG_NAME [-h|--help] [-n|--dry-run]

    -n|--dry-run        Don't perform any action, just show what would be
                        installed/uninstalled.

    -q|--quiet          Suppress detailed output.

    -l|--link           Symlink files instead of copying them.

    -u|--uninstall      Remove files and directories which were installed by
                        this script.

    -L|--with-lnet      Install lnet.service (needed with non Intel Lustre
                        version).

    -h|--help           Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hnqluL --long help,dry-run,quiet,link,uninstall,with-lnet -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -n|--dry-run)       dry_run=true; shift ;;
            -q|--quiet)         verbose=false; shift ;;
            -l|--link)          link_files=true; shift ;;
            -u|--uninstall)     action=uninstall; shift ;;
            -L|--with-lnet)     with_lnet_service=true; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}


#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

log()
{
    echo "$*" >&2
}

run()
{
    local cmd="$*"

    $dry_run && echo $cmd
    $dry_run || $cmd
}

link_binaries()
{
    log 'linking Motr binaries with libtool'
    # nasty libtool creates wrapper shell scripts for non-installed
    # binaries and links them on first run under '.libs/' directory with
    # 'lt-' prefix
    for file in utils/{m0mkfs,m0d,m0crate} ; do
        if $verbose ; then
            log "linking (libtool) $file"
        fi
        run "$M0_SRC_DIR/$file -h" &>/dev/null || true
    done
}

install_files()
{
    local v='-v'
    $verbose || v=''

    local cmd="cp -f ${v}"
    $link_files && cmd="ln -sf ${v}"

    local file='scripts/install/etc/sysconfig/motr'
    # don't install LNet service by default, assume that we use Intel's Lustre
    # which provides it's own one
    local lnet_service=''

    run "$cmd $M0_SRC_DIR/$file $sysconfig_dir"

    local file='scripts/install/etc/sysconfig/motr-free-space-monitor'
    run "$cmd $M0_SRC_DIR/$file $sysconfig_dir"

    if ! $dry_run ; then
        /bin/sed -i -e \
          "s%#MOTR_DEVEL_WORKDIR_PATH=.*$%MOTR_DEVEL_WORKDIR_PATH=$M0_SRC_DIR%"\
          $sysconfig_dir/motr
    fi

    if $with_lnet_service ; then
        lnet_service='scripts/install/usr/lib/systemd/system/lnet.service'
    fi

    dir='/lib/systemd/system'
    if [[ -d $dir ]] ; then
        for file in 'scripts/install/usr/lib/systemd/system/motr-trace@.service' \
                    'scripts/install/usr/lib/systemd/system/motr-kernel.service' \
                    'scripts/install/usr/lib/systemd/system/motr-cleanup.service' \
                    'scripts/install/usr/lib/systemd/system/motr-mkfs.service' \
                    'scripts/install/usr/lib/systemd/system/motr-mkfs@.service' \
                    'scripts/install/usr/lib/systemd/system/motr-server-confd.service' \
                    'scripts/install/usr/lib/systemd/system/motr-server-ha.service' \
                    'scripts/install/usr/lib/systemd/system/motr-server@.service' \
                    'scripts/install/usr/lib/systemd/system/m0d@.service' \
                    'scripts/install/usr/lib/systemd/system/m0t1fs@.service' \
                    'scripts/install/usr/lib/systemd/system/motr.service' \
                    'scripts/install/usr/lib/systemd/system/motr-client.service' \
                    'scripts/install/usr/lib/systemd/system/motr-free-space-monitor.service' \
                    'scripts/install/usr/lib/systemd/system/motr-singlenode.service' \
                    $lnet_service ;
        do
            run "$cmd $M0_SRC_DIR/$file $dir"
        done
    fi

    dir='/etc/motr'
    [[ ! -d $dir ]] && run "mkdir ${v} -p $dir"
    for file in 'scripts/install/etc/motr/disks-ios.conf' \
                'scripts/install/etc/motr/genders' ;
    do
        run "$cmd $M0_SRC_DIR/$file $dir"
    done

    if ! $dry_run ; then
        /bin/sed -i -e "s/<host>/$(hostname -s)/" /etc/motr/genders
        /bin/sed -i -e "s/00000000-0000-0000-0000-000000000000/$(uuidgen)/" /etc/motr/genders
    fi

    dir='/usr/libexec/cortx-motr'
    [[ ! -d $dir ]] && run "mkdir ${v} -p $dir"
    for file in 'scripts/install/usr/libexec/cortx-motr/motr-service.functions' \
                'scripts/install/usr/libexec/cortx-motr/motr-trace' \
                'scripts/install/usr/libexec/cortx-motr/motr-cleanup' \
                'scripts/install/usr/libexec/cortx-motr/motr-kernel' \
                'scripts/install/usr/libexec/cortx-motr/motr-mkfs' \
                'scripts/install/usr/libexec/cortx-motr/motr-server' \
                'scripts/install/usr/libexec/cortx-motr/motr-dixinit' \
                'scripts/install/usr/libexec/cortx-motr/motr' \
                'scripts/install/usr/libexec/cortx-motr/motr-client' \
                'scripts/install/usr/libexec/cortx-motr/motr-free-space-monitor' \
                ;
    do
        run "$cmd $M0_SRC_DIR/$file $dir"
    done

    dir='/usr/bin'
    for file in 'utils/m0confgen' 'utils/m0dixinit' 'utils/m0reportbug' ;
    do
        run "ln -sf ${v} $M0_SRC_DIR/$file $dir"
    done

    $dry_run || {
        [[ -x /usr/bin/systemctl ]] && systemctl daemon-reload
    }

    # install files required for m0_filesystem_stats
    dir='/usr/bin'
    cd $M0_SRC_DIR/utils/spiel
    mkdir -p ${m0spiel_pkg_file%/*}
    python2 setup.py install --record $m0spiel_pkg_file
    cd -
    for m0spiel_file in 'utils/spiel/m0_filesystem_stats' \
                        'utils/spiel/m0spiel' ;
    do
        run "$cmd $M0_SRC_DIR/$m0spiel_file $dir"
    done
}

uninstall_files()
{
    local v='-v'
    $verbose || v=''

    file_list="$sysconfig_dir/motr
               $sysconfig_dir/motr-free-space-monitor
               /etc/motr/disks-ios.conf
               /etc/motr/genders
               /usr/bin/m0dixinit
               /usr/libexec/cortx-motr/motr-service.functions
               /usr/libexec/cortx-motr/motr-trace
               /usr/libexec/cortx-motr/motr-kernel
               /usr/libexec/cortx-motr/motr-cleanup
               /usr/libexec/cortx-motr/motr-mkfs
               /usr/libexec/cortx-motr/motr-server
               /usr/libexec/cortx-motr/motr-dixinit
               /usr/libexec/cortx-motr/motr
               /usr/libexec/cortx-motr/motr-free-space-monitor
               /usr/libexec/cortx-motr/motr-client "

    if [[ -d /usr/lib/systemd/system ]] ; then
        file_list+='/usr/lib/systemd/system/motr-trace@.service
                    /usr/lib/systemd/system/motr-kernel.service
                    /usr/lib/systemd/system/motr-cleanup.service
                    /usr/lib/systemd/system/motr-mkfs.service
                    /usr/lib/systemd/system/motr-mkfs@.service
                    /usr/lib/systemd/system/motr-server-confd.service
                    /usr/lib/systemd/system/motr-server-ha.service
                    /usr/lib/systemd/system/motr-server@.service
                    /usr/lib/systemd/system/m0d@.service
                    /usr/lib/systemd/system/m0t1fs@.service
                    /usr/lib/systemd/system/motr.service
                    /usr/lib/systemd/system/motr-client.service
                    /usr/lib/systemd/system/motr-free-space-monitor.service
                    /usr/lib/systemd/system/motr-singlenode.service '
    fi

    if $with_lnet_service ; then
        file_list+='/usr/lib/systemd/system/lnet.service'
    fi

    for file in $file_list
    do
        [[ -s $file ]] && run "rm ${v} $file"
    done

    for dir in '/etc/motr' \
               '/usr/libexec/cortx-motr' ;
    do
        [[ -d $dir && -z $(ls $dir) ]] && run "rmdir ${v} $dir"
    done

    $dry_run || {
        [[ -x /usr/bin/systemctl ]] && systemctl daemon-reload
    }

    if [ -s $m0spiel_pkg_file ] ; then
        for pkg_file in $(cat $m0spiel_pkg_file)
        do
            [[ -s $pkg_file ]] && run "rm ${v} $pkg_file"
        done

        for m0spiel_file in '/usr/bin/m0_filesystem_stats' \
                            '/usr/bin/m0spiel' ;
        do
            [[ -s $m0spiel_file ]] && run "rm ${v} $m0spiel_file"
        done
        rm $m0spiel_pkg_file
    fi
}

create_motr_group()
{
    getent group motr >/dev/null || {
        log 'creating "motr" system group'
        groupadd --system motr
    }
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options $@

if ! $dry_run && [[ $UID -ne 0 ]]; then
    die 'Error: Please, run this script with "root" privileges or use' \
        '-n|--dry-run option.'
fi

case $action in
    install)    link_binaries
                install_files
                create_motr_group
        ;;
    uninstall)  uninstall_files
        ;;
    *)          die "Error: unknown action '$action'." ;;
esac
