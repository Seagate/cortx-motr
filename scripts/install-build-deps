#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -e -o pipefail

readonly PROG_NAME=$(basename $0)
readonly SELF="$(readlink -f $0)"
readonly TOP_SRCDIR="${SELF%/*/*}"
dry_run=
install_epel=true

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END

Usage: $PROG_NAME [-h|--help] [-n|--dry-run]

    -n|--dry-run        Don't perform any action, just show what would be
                        installed.

       --no-epel        Skip EPEL repository installation.

       --no-ansible     Install packages without ansible

    -h|--help           Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt -o hn --long help,dry-run,no-epel,no-ansible -n "$PROG_NAME" -- "$@" )

    [[ $? != 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -n|--dry-run)       dry_run=--dry-run ; shift ;;
               --no-epel)       install_epel=false ; shift ;;
               --no-ansible)    use_ansible=false ; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}


#
# Utility functions
#

die()
{
    echo "$@" >&2
    exit 1
}

distro_type()
{
    if [[ -f /etc/debian_version ]]; then
        echo debian
    elif [[ -f /etc/redhat-release ]]; then
        echo redhat
    else
        die 'Error: unknown distro, only Red Hat or Debian based' \
            'distributions are supported'
    fi
}

parse_cli_options $@

(( UID == 0 )) ||
    die 'Error: Please, run this script with "root" privileges'

case $(distro_type) in
    redhat) yum -y install python3-pip ;;
    debian) apt install python3-pip ;;
esac
pip3 install ipaddress

if ! which ansible &>/dev/null ; then
    case $(distro_type) in
        redhat) yum -y install ansible ;;
        debian) apt install ansible ;;
    esac
fi

skip_tags=$(paste --serial --delimiters=, <<END_TAGS
c75-workarounds
c76-workarounds
hare
motr-doc
plantuml
s3server
software-collections
upgrade
zfs
END_TAGS
)

if ! $install_epel ; then
    skip_tags+=,epel
fi

packages_redhat=(
git
rpm-build
)

packages_debian=(
)

if ! $use_ansible ; then
  case $(distro_type) in
      redhat)
        yum install -y https://github.com/Seagate/cortx/releases/download/build-dependencies/isa-l-2.30.0-1.el7.x86_64.rpm
        yum install -y https://github.com/Seagate/cortx/releases/download/build-dependencies/libfabric-1.11.2-1.el7.x86_64.rpm
        yum install -y https://github.com/Seagate/cortx/releases/download/build-dependencies/libfabric-devel-1.11.2-1.el7.x86_64.rpm
        echo "For user mode only motr lustre client and kernel rpms are not needed"
        cp cortx-motr.spec.in cortx-motr.spec
        sed -i 's/@BUILD_DEPEND_LIBFAB@//g' cortx-motr.spec
        sed -i 's/@.*@/111/g' cortx-motr.spec
        yum-builddep cortx-motr.spec
        rm cortx-motr.spec

        for i in ${packages_redhat[@]}
        do
          if [[ `rpm -qa | grep $i` == "" ]]; then
            sudo yum install $i -y
          fi
	done
	;;
      debian)
        for i in ${packages_debian[@]}
        do
	   sudo apt install $i
        done
	;;
   esac
   exit 0
fi

$TOP_SRCDIR/scripts/setup-node localhost \
    ${dry_run} --verbose --local --skip-tags $skip_tags -v -v -v
