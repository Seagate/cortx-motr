#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -eu

### --------------------------------------------------------------------
### Motr helper script
###
### Installation:
###     ln -s /path/to/motr/scripts/m0 ~/bin/m0
###
### Type `m0 help' for usage.
### --------------------------------------------------------------------

umask 0002
ulimit -c unlimited
ulimit -n 4096

## CAUTION! This directory will be removed by superuser.
RUNDIR=${RUNDIR:-/var/motr/$(id -un)}

PROG="${0##*/}"
M0_SRC_DIR="$(readlink -f $0)"
M0_SRC_DIR="${M0_SRC_DIR%/*/*}"

. $M0_SRC_DIR/utils/functions # m0_default_xprt, sandbox_init, report_and_exit

SUDO="${SUDO-sudo -E}"  # the absence of ':' is important

# libfab does not need kernel based ST
LIBFAB_TESTS_SKIPLIST=(04initscripts
                06conf
                07mount
                07mount-fail
                07mount-multiple
                08spiel
                08spiel-sns-repair
                08spiel-sns-repair-quiesce
                10pver-assign
                11m0t1fs
                11m0t1fs-rconfc-fail
                12fsync
                12fwait
                13dgmode-io
                14poolmach
                15sns-repair-shutdown
                15sns-repair-single
                16sns-repair-multi
                17sns-repair-concurrent-io
                18sns-repair-quiesce
                18sns-repair-quiesce-failure
                19sns-repair-abort
                20rpc-session-cancel
                21fsync-single-node
                22sns-repair-ios-fail
                23sns-abort-quiesce
                26motr-user-kernel-tests
                28sys-kvs
                28sys-kvs-kernel
                34sns-repair-1n-1f
                35m0singlenode
                36spare-reservation
                37protocol
                40motr-dgmode
                43motr-sync-replication
                45motr-rmw
                51kem)

# libisal does not need kernel based ST
LIBISAL_TESTS_SKIPLIST=(
            08spiel-sns-repair
            08spiel-sns-repair-quiesce
            11m0t1fs
            13dgmode-io
            16sns-repair-multi
            18sns-repair-quiesce
            18sns-repair-quiesce-failure
            19sns-repair-abort
            22sns-repair-ios-fail
            23sns-abort-quiesce
)

# Check which library is used for reed-solomon encode and decode
_check_rs_library() {
    is_isal=`whereis libisal | cut -d ':' -f 1 --complement`
    if [ -z "$is_isal" ]; then
        is_isal="no_isal"
    else
        is_isal="isal"
    fi

    echo "$is_isal"
}

# Check if given st is present in the skip list. Return "true" if present
# in skip list, else return "false".
# arg1 : name of st to be checked
# arg2 : array of st to be skipped
_check_st_skip_list() {
    st_name=$1; shift
    st_skip_list=($@)

    if [[ "${st_skip_list[*]}" =~ "${st_name}" ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# Increase the maximum number of memory map areas a process may have.
# m0d process may allocate and madvise() at least 2,000,000 memory map areas.
# See MOTR-2171 for more details.
incr_mmap() {
    # In WSL /proc/sys/vm/max_map_count is absent. See EOS-7296 for details.
    if [ -f /proc/sys/vm/max_map_count ]; then
        $SUDO sysctl -q -w vm.max_map_count=30000000
    fi
}

die() { echo "$@" >&2; exit 1; }

_make() {
    local TARGET=${1:-}

    if [ "${TARGET:-}" = rpms ]; then
        ## Tolerate warnings. rpms get built in spite of them.
        make ${MAKE_OPTS:-} $TARGET || exit $?
    else
        local OUT=`mktemp`
        trap "rm $OUT" 0
        make ${MAKE_OPTS:-} $TARGET 2>&1 | tee $OUT
        [ ${PIPESTATUS[0]} -eq 0 ] || exit ${PIPESTATUS[0]}
        if grep 'WARNING' $OUT; then
            die 'WARNING in make output is treated as error'
        fi
    fi
}

build() {
    cmd_configure
    _make
}

_exec() {
    [ $1 = 'cmd_help' ] || echo "----- ${@#cmd_} -----" >&2
    $@
}

_time() {
    if [ -x /usr/bin/time ]; then
        /usr/bin/time "$@"
    else
        time "$@"
    fi
}

_fini() {
    export SANDBOX_DIR=$RUNDIR/sandbox.st-$1
    rc=0
    sandbox_init
    sandbox_fini $rc
    report_and_exit $1 $rc
}

rundir_init() {
    incr_mmap
    $SUDO rm -rf "$RUNDIR"  # Ouch!
    $SUDO mkdir -m 0777 -p "$RUNDIR"
    cd "$RUNDIR"
}

cmd_configure() {
    cd "$M0_SRC_DIR"
    autoreconf -ifs
    ./configure ${CONFIGURE_OPTS:-}
}

cmd_make() {
    cd "$M0_SRC_DIR"
    if [ -f Makefile ]; then
        _make "$@"
    else
        build
    fi
}

cmd_clean() {
    cd "$M0_SRC_DIR"
    make distclean || true
    [ "${1:-}" = '-f' ] && git clean -fdx || true
}

cmd_rebuild() {
    cmd_clean
    build
}

cmd_run_ut() {
    rundir_init
    $SUDO "$M0_SRC_DIR/utils/m0run" m0ut -- "$@"
}

cmd_run_kut() {
    local trans
    trans=$(m0_default_xprt)
    if [[ "$trans" != "libfab" ]]; then
        rundir_init
        echo 'Running kernel UT (this may take a while) ...'
        $SUDO "$M0_SRC_DIR/ut/m0kut" "$@"
    else
        echo 'Libfabric runs in userspace only. Kernel UTs are disabled!'
        _fini m0kut
    fi
}

cmd_run_ub() {
    rundir_init
    $SUDO "$M0_SRC_DIR/utils/m0run" m0ub -- "$@"
}

cmd_run_st() {
    local pattern
    local f
    local list_p=0
    local trans

    trans=$(m0_default_xprt)
    rs_lib=$(_check_rs_library)

    if [ "${1:-}" = '-l' ]; then
        list_p=1
        shift
    else
        rundir_init
        # Export variables for system tests.
        export M0_SRC_DIR SUDO
    fi
    for pattern in ${@:-[0-9][0-9]*}; do
        find "$M0_SRC_DIR/scripts/st.d/" -maxdepth 1 \! -type d -name $pattern \
            -perm /a=x -print | sort |
            while read f; do
                if [ $list_p -eq 1 ]; then
                    echo ${f##*/}
                else
                    echo "<< ${f##*/} >>" >&2
                    if [[ "$trans" == "libfab" ]]; then
                        chk=$(_check_st_skip_list ${f##*/} ${LIBFAB_TESTS_SKIPLIST[@]})
                        if [[ "$chk" == "true" ]]; then
                            echo "<< ${f##*/} >> can not be run for libfab" >&1
                            _fini ${f##*/}
                        fi
                    # Check if encode / decode library is Intel ISA
                    elif [ "$rs_lib" == "isal" ]; then
                        chk=$(_check_st_skip_list ${f##*/} ${LIBISAL_TESTS_SKIPLIST[@]})
                        if [[ "$chk" == "true" ]]; then
                            echo "<< ${f##*/} >> can not be run for libisal" >&1
                            _fini ${f##*/}
                        fi
                    fi
                    export SANDBOX_DIR=$RUNDIR/sandbox.st-${f##*/}
                    _time $f || return $?
                fi
            done
    done
}

cmd_run_all() {
    cmd_run_ut
    cmd_run_kut
    cmd_run_st
}

cmd_dist_check() {
    cd "$M0_SRC_DIR"
    [ -f Makefile ] || die "You need to \`$PROG make' first."
    _make rpms
}

cmd_check_everything() {
    local i
    local cmd

    for i in 0 1; do
        for cmd in rebuild dist_check run_ut run_kut run_st; do
            _exec cmd_$cmd
        done

        if echo ${CONFIGURE_OPTS:-} | grep -qe '--disable-m0-asserts'; then
            return
        else
            CONFIGURE_OPTS="${CONFIGURE_OPTS:-} --disable-m0-asserts"
        fi
    done
}

cmd_help() {
    local ret=${1:-0}

    [ $ret -eq 0 ] && usage || usage >&2
    exit $ret
}

usage() {
    cat <<EOF
Usage: $PROG {COMMAND [OPTION]...}...

Commands:
    configure            Configure Motr sources (see CONFIGURE_OPTS below).

    make [TARGET]...     Execute 'make' in Motr directory, falling back to
                         '$PROG rebuild' if no Makefile is found.

    rebuild              Clean and build the whole Motr anew.

    run-ut [OPTION]...   Run user-space unit tests.
                         OPTIONs are passed to 'ut/m0ut'.

    run-kut              Run kernel unit tests.

    run-ub [OPTION]...   Run user-space unit benchmarking.
                         OPTIONs are passed to 'ut/m0ub'.

    run-st [-l] [PATTERN]...
                         Run system tests or list ('-l') their names.
                         Optional arguments specify which tests to run:
                         each of the PATTERNs is prefixed with 'scripts/st.d/'
                         and those files that match the resulting shell pattern
                         are executed.
                         PATTERN defaults to '[0-9][0-9]*'.
                         .
                         Pattern examples:
                             01net
                             0{1,3..5}* {09..13}*

    run-all              Run unit and system tests.

    dist-check           Create and validate Motr distribution archive and rpm.

    check-everything  =  (rebuild + dist-check + run-all) * 2
                         *NOTE* Please run this command before landing.
                         .
                         The command is executed twice (note '* 2' above):
                         the 2nd time with './configure --disable-m0-asserts'.

    clean [-f]           Execute 'make distclean' in Motr sources directory.
                         '-f' will also remove untracked files and directories
                         (i.e. those not added to the git repository).
                         *CAUTION* Be careful with '-f' option!

    help    Show this help and exit.

Environment variables:
    CONFIGURE_OPTS      Extra options for './configure' command.
    MAKE_OPTS           Extra options for 'make' command.
    NET_XPT             Extra option for changing default libfab transport

Motr sources: $M0_SRC_DIR
UT output:    $RUNDIR
EOF
}

CMD=
OPTS=
while [ $# -gt 0 ]; do
    case $1 in
        make|clean|rebuild|run-ut|run-kut|run-st|run-all|dist-check| \
            run-ub|check-everything|configure|help)
            [ -z "$CMD" ] || _exec $CMD $OPTS
            CMD=cmd_${1//-/_}
            OPTS=;;
        *)
            [ -n "$CMD" ] || {
                echo "Invalid command: $1" >&2
                die "Type \`$PROG help' for usage."
            }
            OPTS+=" $1";;
    esac
    shift
done
if [ -n "$CMD" ]; then
    _exec $CMD $OPTS
else
    cmd_help 1
fi
