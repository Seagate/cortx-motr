#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
import subprocess
import os
import sys
import getopt
from socket import gethostname
from typing import Dict, List, NamedTuple, Set
from consul import Consul, ConsulException
import yaml
import subprocess
import time
import calendar
import ast
import re
import json
from datetime import datetime
from collections import OrderedDict

workload_file = None
conf = {}
conf_keys = []
cmnd_list = []

'''
        Test format: Ex: m0cp Test1: {cmnd:m0cp params: -b:4k, -c:100}.
        Note: params does not contain common parameters like local end point,
              Ha end point, process id, profile_fid id.
        Test commands list = [test1, test2...testn]
        Tests list Example:
        [{cmd:m0cp, params:{-b:4k, -c:100}},
         {cmd:m0cat, params:{-b:8k, -c:50}}
        ]
'''

class TestFramework(object):
    def __init__(self):
        self.host = gethostname()
        self.hosts = []
        self.per_host_services_pids_endps = {}
        self.report_file = "report.txt"
        self.startup_logs = "startup_logs.txt"
        self.report_file = "report.txt"
        self.cluster_info = None
        self.profile_fid = None
        self.process_fid = None
        self.local_endpoint = None
        self.ha_endpoint = None
        self.common_conf_params = None
        self.common_conf_params_m0kv = None
        self.comm_conf_param_str = ""
        self.comm_conf_param_m0kv_str = ""
        self.layout_id = None
        self.is_oostore = None
        self.is_read_verify = None
        self.tm_recv_q_min_len = None
        self.max_rpc_msg_size = None
        self.idx_service_id = None
        self.addb_init = None
        self.list_of_cmnds_dicts = []
        self.parse_funcs = {}
        self.init_parse_funcs()
        self.timeout = 120
        self.sandbox_dir = None
        self.sandbox_dir_for_logs = None
        self.singlenode_active = False
        self.client_index = 0

    def stop_singlenode(self):
        cmd = "m0singlenode stop"
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = ''.join(["m0setup ", "-cv ", "-d ", self.sandbox_dir_for_logs,
                       " -m ", self.sandbox_dir_for_logs])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = "systemctl start motr-cleanup"
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        return ret

    def start_singlenode(self):
        cmd = "m0singlenode activate"
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = ''.join(["m0setup ", "-cv ", "-d ", self.sandbox_dir_for_logs,
                       " -m ", self.sandbox_dir_for_logs])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = ''.join(["m0setup ", "-Mv ", "-d ", self.sandbox_dir_for_logs,
                       " -m ", self.sandbox_dir_for_logs])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = "m0singlenode start"
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        return ret

    def ip_generate(self):
        global conf
        ret = 0

        ip = ""
        if (('singlenode' in list(conf['mode'])) and
            (conf['mode']['singlenode'] != None)):
            if (conf['mode']['singlenode']['config_file'] != None):
                config_file = conf['mode']['singlenode']['config_file']
            else:
                return -1
        else:
            return -1

        if ('base_port' not in list(conf['mode']['singlenode'].keys())):
            print("The 'base_port' key is missing in config file")
            self.write_to_file(self.startup_logs,
                               "The 'base_port' key is missing \
                               in config file\n")
            return -1

        if (conf['mode']['singlenode']['base_port'] != None):
            base_port = conf['mode']['singlenode']['base_port']
        else:
            base_port = 300

        # Get ip from lctl
        cmd = "lctl list_nids | cut  -f 1 -d\' \' | head -n 1"
        temp = subprocess.check_output(cmd, shell=True)
        temp = str(temp, 'utf-8')
        ip = temp.rstrip("\n")

        # Get ip from /etc/motr/conf.xc
        cmd =  "grep {} {} | cut -d \'\"\' -f 2 | cut -d \':\' -f 1".format(ip,
                                                                 config_file)
        temp = subprocess.check_output(cmd, shell=True)
        temp = str(temp, 'utf-8')
        temp_list = temp.split(sep='\n')
        ip_from_conf = ""
        temp_list = list(filter(lambda x: x != "", set(temp_list)))
        if (len((temp_list)) == 1):
            ip_from_conf = temp_list[0]
        else:
            return -1

        # Check if both ip are equal
        if (ip_from_conf != ip):
            print("The conf IP and Luster n/w id are not same")
            return -1
        # Get unsued port
        cmd = "grep {} {} | cut -d \'\"\' -f 2 | cut -d \':\' -f 4".format(ip,
                                                                config_file)
        temp = subprocess.check_output(cmd, shell=True)
        temp = str(temp, 'utf-8')
        temp = temp.rstrip("\n")
        port_set = set(temp.split(sep='\n'))
        temp_base = base_port
        while (1):
            if (temp_base in port_set):
                temp_base = temp_base + 1
                continue
            else:
                break

        self.local_endpoint = "{}:12345:44:{}".format(ip, temp_base)
        self.ha_endpoint = "{}:12345:45:1".format(ip)
        self.profile_fid = "0x7000000000000001:0"
        self.process_fid = "0x7200000000000000:0"

        print("local_endpoint = {}".format(self.local_endpoint))
        print("ha_endpoint = {}".format(self.ha_endpoint))
        print("profile_fid = {}".format(self.profile_fid))
        print("process_fid = {}".format(self.process_fid))

        self.write_to_file(self.startup_logs, "local_endpoint = {}\n".format(self.local_endpoint))
        self.write_to_file(self.startup_logs, "ha_endpoint = {}\n".format(self.ha_endpoint))
        self.write_to_file(self.startup_logs, "profile_fid = {}\n".format(self.profile_fid))
        self.write_to_file(self.startup_logs, "process_fid = {}\n".format(self.process_fid))

        return ret

    def update_config_params(self, fname):
        str = "s/^\([[:space:]]*MOTR_LOCAL_ADDR: *\).*/\\1\"{}\"/""".format(self.local_endpoint)
        cmd = "sed -i \"{}\" {}".format(str, fname)
        ret = os.system(cmd)

        str = "s/^\([[:space:]]*MOTR_HA_ADDR: *\).*/\\1\"{}\"/".format(self.ha_endpoint)
        cmd = "sed -i \"{}\" {}".format(str, fname)
        ret = os.system(cmd)

        str = "s/^\([[:space:]]*PROF: *\).*/\\1\"{}\"/".format(self.profile_fid)
        cmd = "sed -i \"{}\" {}".format(str, fname)
        ret = os.system(cmd)

        str = "s/^\([[:space:]]*PROCESS_FID: *\).*/\\1\"{}\"/".format(self.process_fid)
        cmd = "sed -i \"{}\" {}".format(str, fname)
        ret = os.system(cmd)

    def m0_parse_func(self, dict_param):
        cmd = ""
        cmd_name = ""
        temp_file = ""

        for key, value in dict_param.items():
            if (key == "cmnd"):
                cmd = value
                cmd_name = value
                continue
            if (key == "params"):
                if (type(value) is str):
                    cmd = ''.join([cmd, " ", value])
                    continue
                if (type(value) is dict):
                    for k, v in value.items():
                        if (k == "inp_fname"):
                            if (os.path.isabs(v) == True):
                                cmd = ''.join([cmd, ' ', v])
                            else:
                                temp_file = ''.join([self.sandbox_dir, '/', v])
                                cmd = ''.join([cmd, ' ', temp_file])
                                temp_file = ""
                        elif (k == "out_fname"):
                            if (os.path.isabs(v) == True):
                                cmd = ''.join([cmd, ' > ', v])
                            else:
                                temp_file = ''.join([self.sandbox_dir, '/', v])
                                cmd = ''.join([cmd, ' > ', temp_file])
                                temp_file = ""
                        else:
                            cmd = ''.join([cmd, ' ', k, ' ', str(v)])
                    continue
            if (key == "config_overrides"):
                param_config = self.create_config_string_in_cmd(cmd_name, value)
                cmd = ''.join([cmd, " ", param_config])
                continue
        print("cmd = {}".format(cmd))
        return cmd

    def m0crate_parse_func(self, dict_param):
        cmd = ""
        cmd_name = ""
        temp_file = ""
        m0crate_workload_file_flag = False
        keys_list = ["cmnd", "params", "config_overrides"]
        temp_dict = dict((i, dict_param[i]) for i in keys_list)
        for key, value in temp_dict.items():
            if (key == "cmnd"):
                cmd = value
                cmd_name = value
                continue
            elif (key == "params"):
                if (type(value) is str):
                    m0crate_workload_file_flag = False
                    temp = value.split()
                    if ('-S' in temp[0]):
                        workload_file = temp[1]
                        if (os.path.isabs(temp[1]) == True):
                            workload_file = temp[1]
                        else:
                            workload_file = ''.join([self.sandbox_dir, '/', temp[1]])
                        self.update_config_params(workload_file)
                        m0crate_workload_file_flag = True
                        cmd = ''.join([cmd, " ", temp[0], " ", workload_file])
                    else:
                        cmd = ''.join([cmd, " ", value])
                    continue
                elif (type(value) is dict):
                    m0crate_workload_file_flag = False
                    for k, v in value.items():
                        if (k == '-S'):
                            if (os.path.isabs(str(v)) == True):
                                workload_file = str(v)
                            else:
                                workload_file = ''.join([self.sandbox_dir, '/', str(v)])
                            self.update_config_params(workload_file)
                            cmd = ''.join([cmd, ' ', k, ' ', workload_file])
                            m0crate_workload_file_flag = True
                        else:
                            cmd = ''.join([cmd, ' ', k, ' ', v])
                            m0crate_workload_file_flag = False
                    continue
            elif (key == "config_overrides"):
                if (m0crate_workload_file_flag == False):
                    ret_config = self.create_config_string_in_cmd(cmd_name, value)
                    cmd = ''.join([cmd, " ", ret_config])
                    continue
        print("cmd = {}".format(cmd))
        return cmd

    def m0kv_parse_func(self, dict_param):
        cmd = ""
        cmd_name = ""
        for key, value in dict_param.items():
            if (key == "cmnd"):
                cmd = value
                cmd_name = value
                continue
            if (key == "params"):
                param_str = self.create_params_string_in_cmd(value)
                cmd = ''.join([cmd, " ", param_str])
                continue
            if (key == "config_overrides"):
                param_config = self.create_config_string_in_cmd(cmd_name, value)
                cmd = ''.join([cmd, " ", param_config])
                continue
        print("cmd = {}".format(cmd))
        return cmd

    def other_parse_func(self, dict_param):
        cmd = ""
        for key, value in dict_param.items():
            if (key == "cmnd"):
                cmd_name = value
                cmd = value
                continue
            if (key == "params"):
                cmd = ''.join([cmd, " ", value])
                continue
        print("cmd = {}".format(cmd))
        return cmd

    def create_params_string_in_cmd(self, value):
        cmd = ""
        if (type(value) is str):
            cmd = ''.join([cmd, " ", value])
            return cmd
        if (type(value) is dict):
            for k, v in value.items():
                cmd = ''.join([cmd, ' ', k, ' ', str(v)])
        return cmd

    def create_config_string_in_cmd(self, cmd_name, value):
        cmd = ""
        if (value == None):
            if (cmd_name == "m0kv"):
                cmd = ''.join([cmd, ' ', self.comm_conf_param_m0kv_str])
            else:
                cmd = ''.join([cmd, ' ', self.comm_conf_param_str])
            return cmd
        if (type(value) is str):
            cmd = ''.join([cmd, " ", value])
        elif (type(value) is dict):
            for k, v in value.items():
                cmd = ''.join([cmd, ' ', k, ' ', str(v)])
        return cmd

    def init_parse_funcs(self):
        self.parse_funcs = {
                            "m0": self.m0_parse_func,
                            "m0crate": self.m0crate_parse_func,
                            "m0kv": self.m0kv_parse_func,
                            "other": self.other_parse_func,
                           }

    def is_localhost(self, hostname: str) -> bool:
        name = gethostname()
        temp = hostname in ('localhost', '127.0.0.1', name, f'{name}.local')
        return hostname in ('localhost', '127.0.0.1', name, f'{name}.local')

    def write_to_file(self, fname, data):
        with open(fname, "a") as f:
            data = ''.join([data, '\n'])
            f.write(data)
            f.close()

    def execute_command(self, cmd, log_file, timeout_secs):
        sep = "============================================"
        temp_cmd = ''.join(["cmd = ", cmd])
        self.write_to_file(log_file, temp_cmd)
        ps = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              shell=True)
        stdout, stderr = ps.communicate(timeout=timeout_secs)
        stdout = str(stdout, 'utf-8')
        self.write_to_file(log_file, stdout)
        self.write_to_file(log_file, sep)
        return ps.returncode


    def execute_command_and_get_output(self, cmd):
        self.process = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE,
                                        shell=True)
        stdout, stderr = self.process.communicate()
        output_var = str(stdout, 'utf-8')
        return output_var

    def consul_status(self) -> bool:
        cmd = '{}sudo systemctl is-active --quiet hare-consul-agent*'.format(
               '' if self.is_localhost(self.host) else f'ssh {self.host} ')
        temp_str = "Checking if cluster running is running on"
        self.write_to_file(self.startup_logs, temp_str)
        temp_str = "node: {}".format(self.host)
        self.write_to_file(self.startup_logs, temp_str)
        print("Checking if cluster running is running on")
        print("node({}) using command: {}".format(self.host, cmd))

        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        if (ret == 0):
            print("Cluster is running")
            self.write_to_file(self.startup_logs, "Cluster is running\n")
            return True
        else:
            print("Cluster is not running.", file=sys.stderr)
            self.write_to_file(self.startup_logs, "Cluster is not running\n")
            return False

    def get_max_client_index(self, my_svcs_info):
        count = 0
        for temp in my_svcs_info:
            if (temp["name"] == "m0_client"):
                count = count + 1
        return count - 1 

    def get_cluster_info(self):
        ret = 0
        cmd = '{}sudo hctl status --json'.format(
               '' if self.is_localhost(self.host) else f'ssh {self.host} ')
        op = self.execute_command_and_get_output(cmd)
        self.cluster_info = json.loads(op)
        if (self.cluster_info != None):
            self.profile_fid = self.cluster_info["profiles"][0]['fid']
            nodes_data = self.cluster_info["nodes"]
            for node in nodes_data:
                nodename = node["name"]
                if (nodename.startswith("srvnode") == True):
                    cmd1 = 'salt-call pillar.get cluster:{}:hostname'.format(nodename)
                    cmd2 = 'cut -f 2 -d ":" | tr -d [:space:]'
                    cmd = ''.join([cmd1, ' | ', cmd2])
                    nodename = self.execute_command_and_get_output(cmd)
                print("nodename: {}".format(nodename))
                self.hosts.append(nodename)
                self.per_host_services_pids_endps[nodename] = node["svcs"]
            my_svcs_info = self.per_host_services_pids_endps[self.host]
            if (self.client_index < 0):
                print("User provided client index = {}".format(self.client_index))
                print("Setting user client index to 0(default)")
                self.client_index = 0
            else:
                max_client_index = self.get_max_client_index(my_svcs_info)
                if (max_client_index < self.client_index):
                    print("Max client index = {}".format(max_client_index))
                    print("But user provided client index = {}. ".format(
                           self.client_index))
                    print("Setting user client index to 0(default)")
                    self.client_index = 0
            m0_client_counter = 0
            for temp in my_svcs_info:
                if (temp["name"] == "hax"):
                    self.ha_endpoint = temp["ep"]
                    continue
                if (temp["name"] == "m0_client"):
                    if (m0_client_counter == self.client_index):
                        temp_pid = re.findall('0x[0-9A-Fa-f]+', temp["fid"])
                        self.process_fid = "{}:{}".format(temp_pid[0], temp_pid[1])
                        self.local_endpoint = temp["ep"]
                    else:
                        m0_client_counter = m0_client_counter + 1
                        continue
        else:
            print("Could not fetch cluster info\n", file=sys.stderr)
            return -1
        return ret

    def start_cluster(self):
        global conf
        cmd = ''.join(["m0setup ", "-cv ", "-d ", self.sandbox_dir_for_logs,
                       " -m ", self.sandbox_dir_for_logs])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        cmd = ''.join(["m0setup ", "-v ", "-d ", self.sandbox_dir_for_logs,
                       " -m ", self.sandbox_dir_for_logs])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)

        if ('cdf' not in list(conf['mode']['cluster'].keys())):
            print('cdf option is not present in config file')
            self.write_to_file(self.startup_logs_err,
                               "The 'cdf' option is not present in config file\n")
            return -1
        if (conf['mode']['cluster']['cdf'] == None):
            print("No CDF is provided to start cluster\n")
            self.write_to_file(self.startup_logs_err,
                               "No CDF is provided to start cluster\n")
            return -1
        cdf = conf['mode']['cluster']['cdf']
        cmd = ''.join(["hctl ", "bootstrap ", "--mkfs ", cdf])
        ret = self.execute_command(cmd, self.startup_logs, self.timeout)
        return ret

    def get_setup_details(self):
        ret = 0
        if (('cluster' not in list(conf['mode'])) or
            (conf['mode']['cluster'] == None)):
            if (('singlenode' not in list(conf['mode'])) or
                (conf['mode']['singlenode'] == None)):
                print("Neither cluster nor singlemode option is present in \
                       config file")
                self.write_to_file(self.startup_logs_err,
                                   "Neither cluster nor singlemode \
                                    option is present in config file\n")
                return -1
            ret = self.start_singlenode()
            ret = self.ip_generate()
            if (ret != 0):
                return ret
            if (ret == 0):
                self.singlenode_active = True
            return ret
        elif (('app' in list(conf['mode']['cluster'].keys())) and
              (conf['mode']['cluster']['app'] != None)):
            if (conf['mode']['cluster']['app'] == 'hare'):
                if ('client_index' not in list(conf['mode']['cluster'].keys())):
                   self.client_index = 0
                else:
                   self.client_index = conf['mode']['cluster']['client_index']
                if (self.consul_status() == False):
                    print("Starting cluster.")
                    self.write_to_file(self.startup_logs,
                                       "Starting cluster.\n")
                    ret = self.start_cluster()
                    if (ret == -1):
                        return ret
                    os.system("sleep 30")
                ret = self.get_cluster_info()
                temp_print = "Profile: {}\nProcess Id: {}\
                             \nLocal Endpoint: {}\nHA Endpoint: {}\n".format(
                             self.profile_fid, self.process_fid,
                             self.local_endpoint, self.ha_endpoint)
                print(temp_print)
                self.write_to_file(self.startup_logs, temp_print)
                return ret
            else:
                print("The value for 'app' {} option \
                      is invalid\n".format(conf['mode']['cluster']['app']))
                self.write_to_file(self.startup_logs,
                                   "The value for 'app' {} option \
                                    is invalid\n".format(
                                    conf['mode']['cluster']['app']))
                return -1
        else:
            print("The 'app' key is missing or null\n")
            self.write_to_file(self.startup_logs,
                               "The 'app' key is missing or null\n")
            return -1


    def get_common_params(self):
        global conf

        if (("motr" in list(conf.keys())) and (conf["motr"] != None)):
            '''
               Get motr config parameters from workload file except
               local,ha endpoints and procees and profile fids
               since we are using running cluster local,ha endpoints and
               procees and profile fids
            '''
            self.get_common_params_from_config_file()
            '''
               Update workload file with cluster local,ha endpoints
               and procees and profile fids
            '''
            self.update_config_params(self.workload_file)
            self.create_conf_params_str()
        else:
            self.create_conf_params_str()

    def get_common_params_from_config_file(self):
        global conf
        d = conf['motr']
        items = d.items()
        for (key, val) in items:
            if ((key == 'LAYOUT_ID') and (val != None)):
                self.layout_id = val
                continue
            if ((key == 'IS_OOSTORE') and (val != None)):
                self.is_oostore = val
                continue
            if ((key == 'IS_READ_VERIFY') and (val != None)):
                self.is_read_verify = val
                continue
            if ((key == 'ADDB_INIT') and (val != None)):
                self.addb_init = val
                continue
            if ((key == 'TM_RECV_QUEUE_MIN_LEN') and (val != None)):
                self.tm_recv_q_min_len = val
                continue
            if ((key == 'MAX_RPC_MSG_SIZE') and (val != None)):
                self.max_rpc_msg_size = val
                continue

    def create_conf_params_str(self):
        self.write_to_file(self.startup_logs,
                           "local_endpoint(-l): {}".format(self.local_endpoint))
        self.write_to_file(self.startup_logs,
                           "ha_endpoint(-H): {}".format(self.ha_endpoint))
        self.write_to_file(self.startup_logs,
                           "process_fid(-P): {}".format(self.process_fid))
        self.write_to_file(self.startup_logs,
                           "profile_fid(-p): {}".format(self.profile_fid))

        print("local_endpoint(-l): {}".format(self.local_endpoint))
        print("ha_endpoint(-H): {}".format(self.ha_endpoint))
        print("process_fid(-P): {}".format(self.process_fid))
        print("profile_fid(-p): {}".format(self.profile_fid))

        self.common_conf_params = {
                              "-l":self.local_endpoint,
                              "-H":self.ha_endpoint,
                              "-P":self.process_fid,
                              "-p":self.profile_fid,
                              "-L":self.layout_id,
                              "-r":self.is_read_verify,
                              "-q":self.tm_recv_q_min_len,
                              "-S":self.max_rpc_msg_size
                             }
        self.common_conf_params_m0kv = {
                                       "-l":self.local_endpoint,
                                       "-h":self.ha_endpoint,
                                       "-f":self.process_fid,
                                       "-p":self.profile_fid,
                                      }

        # To create string which is like "-l 192.10.11.12 -H 192.20.21.22" etc.
        for key, value in self.common_conf_params.items():
            if (value != None):
                self.comm_conf_param_str = ''.join([self.comm_conf_param_str,
                                                    " ", str(key), " ",
                                                    str(value)])

        for key, value in self.common_conf_params_m0kv.items():
            if (value != None):
                self.comm_conf_param_m0kv_str = ''.join([self.comm_conf_param_m0kv_str,
                                                             " ", str(key), " ", str(value)])

    def convert_cmnd_dict_to_str(self, dict_param):
        m0_commands = ["m0cp", "m0cat", "m0cp_mt", "m0mt", "m0touch", "m0trunc",
                       "m0unlink", "m0composite"]
        cmd = ""
        if (dict_param["cmnd"] == "m0crate"):
            cmd = self.parse_funcs["m0crate"](dict_param)
        elif (dict_param["cmnd"] in m0_commands):
            cmd = self.parse_funcs["m0"](dict_param)
        elif (dict_param["cmnd"] == "m0kv"):
            cmd = self.parse_funcs["m0kv"](dict_param)
        else:
            cmd = self.parse_funcs["other"](dict_param)
        return cmd

    def read_parse_data_from_yaml_file(self):
        global conf
        batch_no = 1
        cmd_no = 1

        workloads = conf['workloads']
        for key, value in workloads.items():
            batch_no = key
            temp_dict = {}
            cmd_no = 1
            fname = ''
            temp_dict["batch_no"] = batch_no
            for inner_key, inner_value in value.items():
                if (inner_key == "runs"):
                   temp_dict["runs"] = inner_value
                if (inner_key == "batch"):
                    temp_list = []
                    cmd_no = 1
                    for temp in inner_value:
                        fname = ''.join(["batch", str(batch_no), "_cmd",
                                         str(cmd_no), "_", temp["cmnd"]])
                        temp_str = self.convert_cmnd_dict_to_str(temp)
                        if ("timeout" in temp.keys()):
                            temp_list.append((temp_str, fname, temp["timeout"]))
                        else:
                            temp_list.append((temp_str, fname, None))
                        cmd_no = cmd_no +  1
                    temp_dict["cmnds_and_fnames"] = temp_list
            self.list_of_cmnds_dicts.append(temp_dict)

    def run_commands(self):
        for batch in self.list_of_cmnds_dicts:
            curr_batch_no = batch["batch_no"]
            curr_batch_runs = batch["runs"]
            curr_batch_cmd_list = batch["cmnds_and_fnames"]
            for j in range(curr_batch_runs):
                for cmnd_fname in curr_batch_cmd_list:
                    sep = "======================================"
                    cmd = cmnd_fname[0]
                    fname = cmnd_fname[1]
                    timeout = cmnd_fname[2]
                    temp_stdout = ''.join([fname, "_", "log"])
                    self.write_to_file(temp_stdout, "run={}".format(j))
                    ret = self.execute_command(cmd, temp_stdout, timeout)
                    self.write_to_file(self.report_file, "run={}".format(j))
                    self.write_to_file(self.report_file, "cmd={}".format(cmd))
                    self.write_to_file(self.report_file, "Return Value={}".format(ret))
                    self.write_to_file(self.report_file, "Log File: '{}'".format(temp_stdout))
                    self.write_to_file(self.report_file, sep)
                    self.write_to_file(temp_stdout, sep)
                    print("run: {}".format(j))
                    print("cmd: {}".format(cmd))
                    if (ret == 0):
                        print("Return status: Success ({})".format(ret))
                    else:
                        print("Return status: Failure ({})".format(ret))
                    print("Log File: '{}'".format(temp_stdout))
                    print(sep)

        print("Check logs before command executions in '{}'".format(
              self.startup_logs))
        print("Check summary of all command executions in '{}'".format(self.report_file))
        print("All above files are in test dir '{}'".format(self.sandbox_dir_for_logs))

    def create_enter_sandbox_dir_for_logs(self):
        sandbox_dir = ""
        self.curr_dir = os.getcwd()
        temp_dir = "temp-{}".format(calendar.timegm(time.gmtime()));
        self.sandbox_dir_for_logs = "".join((self.sandbox_dir, '/', temp_dir))
        os.makedirs(self.sandbox_dir_for_logs, exist_ok=True)
        os.chdir(self.sandbox_dir_for_logs)

def execute_workload():
    global workload_file
    global conf
    global test_dir, curr_dir
    global conf_keys
    ret = 0

    conf_keys = list(conf.keys())

    TF = TestFramework()

    if (workload_file != None):
        TF.workload_file = workload_file

    if (('sandbox_dir' not in conf_keys) or (conf['sandbox_dir'] == None)):
        TF.sandbox_dir = os.getcwd()
    else:
        if (conf['sandbox_dir'] != None):
            TF.sandbox_dir = conf['sandbox_dir']

    # Create sandbox_dir_for_logs
    TF.create_enter_sandbox_dir_for_logs()

    if (conf['mode'] == None):
        print("The 'mode' option is missing in config file")
        TF.write_to_file(TF.startup_logs, "The 'mode' option is missing \
                                     in config file\n")
        return -1

    if (conf['workloads'] == None):
        print("The 'workloads' option is missing in config file")
        TF.write_to_file(TF.startup_logs, "The 'workloads' option is missing in \
                                     config file\n")
        return -1

    if ('timeout' in conf_keys):
        TF.timeout = conf['timeout']

    ret = TF.get_setup_details()
    if (ret != 0):
        return ret
    TF.get_common_params()
    TF.read_parse_data_from_yaml_file()
    TF.run_commands()

    if ('singlenode' in list(conf['mode']) and TF.singlenode_active == True):
        ret = TF.stop_singlenode()

    return ret


def print_help():
    descr = """
    ===========================================================================
    To test motr operations like m0crate, m0*, m0kv.

    Usage: m0workload -t <config yaml file absoulte path>
    ============================================================================
    Please refer sample workloads
    in cortx-motr/scripts/workload/sample_workloads directory.
    Note: In case of m0crate workload, make sure to copy workload file in sandbox directory.
    ============================================================================
    Sample workload file is as below.
    ============================================================================
  motr:
    MOTR_LOCAL_ADDR: 192.168.0.95@tcp:12345:4:1
    MOTR_HA_ADDR: 192.168.0.95@tcp:12345:1:1
    PROF: 0x7000000000000001:0x2c
    PROCESS_FID: 0x7200000000000001:0x26
    LAYOUT_ID: 4
    IS_OOSTORE: 1
    IS_READ_VERIFY: 0
    TM_RECV_QUEUE_MIN_LEN: 2
    MAX_RPC_MSG_SIZE: 131072
    IDX_SERVICE_ID: 1
    ADDB_INIT: 1
  mode:
    cluster:
      app: hare
      cdf: /tmp/CDF.yaml
      client_index: 1
    singlenode:
      config_file: /etc/motr/conf.xc
      base_port: 200
  sandbox_dir: /tmp/sandbox
  timeout: 120
  workloads:
    1:
      batch:
      - cmnd: dd
        params: '  if=/dev/urandom  of=/tmp/input150 bs=4k count=786'
        config_overrides: null
        timeout: 100
      - cmnd: m0cp
        params: ' -s 4k -c 786 -o 10:10  /tmp/input150'
        config_overrides: null
        timeout: 100
      - cmnd: m0trunc
        params: ' -s 4k -c 512 -t 256 -o 10:10'
        config_overrides: null
        timeout: null
      - cmnd: m0cat
        params: ' -s 4k -c 512 -o 10:10 > /tmp/input150_out'
        config_overrides: null
        timeout: 120
      - cmnd: diff
        params: '   /tmp/input150     /tmp/input150_out'
        config_overrides: null
        timeout: null
      - cmnd: du
        params: '  -h  /tmp/input150'
        config_overrides: null
        timeout: null
      - cmnd: du
        params: '  -h  /tmp/input150_out'
        config_overrides: null
        timeout: null
      - cmnd: m0unlink
        params: ' -o 10:10'
        config_overrides: null
        timeout: null
      - cmnd: m0crate
        params: ' -S /tmp/sandbox/m0crate_workload_batch_1_1597145826'
        config_overrides: null
        timeout: null
      runs: 2
    2:
      batch:
      - cmnd: m0crate
        params: ' -S /tmp/sandbox/m0crate_io_workload.yaml'
        config_overrides: null
        timeout: null
      runs: 5
    3:
      batch:
      - cmnd: m0kv
        params: '  index create "1:5"'
        config_overrides: null
        timeout: 100
      - cmnd: m0kv
        params: '  index list "1:5" 2'
        config_overrides: null
        timeout: 200
      - cmnd: m0crate
        params: ' -S /tmp/sandbox/m0crate_workload_batch_3_1597145826'
        config_overrides: null
        timeout: null
      runs: 1
    ==========================================================================
    """
    print("{}".format(descr))

if __name__ == "__main__":
    ret = 0
    argument_list = sys.argv[1:]
    short_options = "t:h"
    long_options = ["tests_file="]
    try:
        arguments, values = getopt.getopt(argument_list, short_options, long_options)
    except getopt.error as err:
        print(str(err))
        sys.exit(2)

    for arg, value in arguments:
        if (arg == '-t'):
            tests_file = value
            break
        if (arg == '-h'):
            print_help()
            sys.exit(0)
    with open(tests_file) as fname:
        workload_file = tests_file
        conf = yaml.safe_load(fname)
    ret = execute_workload()
