#!/usr/bin/env perl
#
# Copyright (c) 2012-2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script generates *.c or *.h skeleton files with predefined structure and
# automatically adds some constructs, which are required by Motr coding style
# (like copyright, author and creation date, include guards, emacs config, etc.)

# For detailed description and usage information please refer to the POD
# documentation at the end of file, after the __END__ marker.


# enable all features of Modern Perl, almost the same as done by Modern::Perl
# module, but doesn't require it as dependency
use 5.010;
use strict;
use warnings;


# check that all required external modules are available and display a hint to
# the user about how they can be installed using default package management
# system, if they are missing
BEGIN {

    my @required_modules = (
        {
            'name'       => 'IO::All',
            'debian-pkg' => 'libio-all-perl',
            'redhat-pkg' => 'perl-IO-All'
        },
        {
            'name'       => 'DateTime',
            'debian-pkg' => 'libdatetime-perl',
            'redhat-pkg' => 'perl-DateTime'
        }
    );
    my $some_module_is_missing = 0;

    for my $m (@required_modules) {

        my $module = $m->{'name'};

        $module =~ s#::#/#g;
        $module .= '.pm';

        no warnings 'uninitialized';
        if (eval { require $module; 1; } ne 1) {
            use warnings 'uninitialized';
            $some_module_is_missing = 1;
            print "$m->{'name'} perl module is missing\n"
                  . "   It can be installed manually or using package management system:\n"
                  . "     debian based:  apt-get install $m->{'debian-pkg'}\n"
                  . "     red-hat based: yum install $m->{'redhat-pkg'}\n"
                  . "     manually:      cpanm $m->{'name'}\n\n";
        }
    }

    die "Please, install all required modules\n"
        if $some_module_is_missing;
}


# core modules
use autodie;
use Getopt::Long qw( :config no_ignore_case );
use Pod::Usage;

# external modules (not included into base perl distribution)
use IO::All;
use DateTime;


# global variables
my %cli_option;
my @target_file_names;
my $top_src_dir;
my $src_prefix;
my $licence_file = 'scripts/licence_header';
my $user_name;
my $user_email;
my $copyright_header;
my $footer;
my $group = 'XXX';

sub build_copyright_header
{
    my $copyright = io("$top_src_dir/$licence_file")->slurp;

    chomp $copyright;
    $copyright =~ s/^/ * /gxms;
    $copyright =~ s/\s+$//gxms;

    return <<"END_COPYRIGHT"
/* -*- C -*- */
/*
$copyright
 *
 */
END_COPYRIGHT
}

sub build_footer
{
    return <<"END_FOOTER"
/*
 *  Local variables:
 *  c-indentation-style: "K&R"
 *  c-basic-offset: 8
 *  tab-width: 8
 *  fill-column: 80
 *  scroll-step: 1
 *  End:
 */
/*
 * vim: tabstop=8 shiftwidth=8 noexpandtab textwidth=80 nowrap
 */
END_FOOTER
}

sub build_include_guard_for
{
    my $file_name = shift;

    my $guard = uc $file_name;

    $guard =~ tr#/.#__#;
    $guard = "__MOTR_${guard}__";

    return $guard;
}

sub build_h_skeleton_for
{
    my $file_name = shift;

    my $include_guard = build_include_guard_for($file_name);

    return <<"END_HSKEL"
$copyright_header
#pragma once

#ifndef $include_guard
#define $include_guard

/**
 * \@defgroup $group
 *
 * \@{
 */


/** \@} end of $group group */
#endif /* $include_guard */

$footer
END_HSKEL
}

sub build_c_skeleton
{
    return <<"END_CSKEL"
$copyright_header
/**
 * \@addtogroup $group
 *
 * \@{
 */

#define M0_TRACE_SUBSYSTEM M0_TRACE_SUBSYS_XXX
#include "lib/trace.h"
/*** Header includes are after this line. Remove this line. ***/


#undef M0_TRACE_SUBSYSTEM

/** \@} end of $group group */

$footer
END_CSKEL
}

sub generate_content_for
{
    my $file_name = shift;

    die "Error: only *.h or *.c files are supported as targets\n"
        if $file_name !~ /\.(?:h|c)$/xms;

    given ($file_name) {
        when (/\.h$/xms) {
            return build_h_skeleton_for($src_prefix . $file_name);
        }
        when (/\.c$/xms) {
            return build_c_skeleton();
        }
    }
}

sub usage
{
    pod2usage(-verbose => 0);
}

sub help
{
    pod2usage(-verbose => 1);
}

sub man
{
    pod2usage(-verbose => 2);
}

sub process_cli_options
{
    help() if !GetOptions(
        'f|force-overwrite' =>  \$cli_option{'force_overwrite'},
	'g=s'       =>  \$group,
        'h|help'    =>  \&help,
        'usage'     =>  \&usage,
        'man'       =>  \&man
    );

    # consider remaining CLI arguments to be the names of files we need to
    # generate
    @target_file_names = @ARGV;

    die "Error: provide at least one file name as a command line argument\n"
        if !@target_file_names;

    return;
}

sub set_global_vars
{
    die "Error: 'git' command cannot be found, please install Git SCM\n"
        if ! `git --version 2>/dev/null`;

    die "Error: current directory is not inside work tree of git repository\n"
        if ! `git rev-parse --is-inside-work-tree 2>/dev/null`;

    chomp($top_src_dir = `git rev-parse --show-toplevel`);

    die "Error: licence file '$licence_file' cannot be found in '$top_src_dir'\n"
        if ! -r "$top_src_dir/$licence_file";

    chomp($src_prefix = `git rev-parse --show-prefix`);

    chomp($user_name  = `git config user.name`);
    warn "Warning: git user.name variable is not defined\n"
        if $user_name eq '';

    chomp($user_email = `git config user.email`);
    warn "Warning: git user.email variable is not defined\n"
        if $user_email eq '';

    $copyright_header = build_copyright_header();
    $footer = build_footer();

    return;
}

sub main
{
    process_cli_options();
    set_global_vars();

    for my $file_name (@target_file_names) {

        die "Error: file '$file_name' already exists, use -f option to"
            . " force owerwrite\n"
            if -e $file_name && !defined $cli_option{'force_overwrite'};

        my $content = generate_content_for($file_name);

        chomp $content;
        io($file_name)->print($content);
    }

    return;
}

main();


__END__

=head1 NAME

gen-src-skel - generates .c or .h skeleton files

=head1 SYNOPSIS

gen-src-skel [-f|--force-overwrite] [-h|--help] [--usage] [--man] <outputfile>...

=head1 DESCRIPTION

This script generates *.c or *.h skeleton files with predefined structure and
automatically adds some constructs, which are required by Motr coding style
(like copyright, author and creation date, include guards, emacs config, etc.)

User name and email are taken from `git config user.name` and
`git config user.email` output. Warning is printed if any of those variables is
not defined.

=head1 ARGUMENTS

=over 8

=item B<outputfile>...

One or more output files. Files should have .h or .c extension.

=back

=head1 OPTIONS

=over 8

=item B<-f|--force-overwrite>

Overwrite existing files. By default program stops execution and exits with
error status if one of output files already exists.

=item B<-g group>

Specify the Doxygen group.

=item B<-h|--help>

Print this help summary.

=item B<--usage>

Print usage line of this summary.

=item B<--man>

Print the complete manpage.

=back

=cut

