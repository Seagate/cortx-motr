#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#
# Base OS tasks
#
---
- name: dynamically load variables depending on the OS type
  include_vars: '{{ item  }}'
  with_first_found: '{{ ansible_os_family }}.yml'

- name: switch to CentOS-Vault release repositories
  when: ansible_os_family == 'RedHat'
  tags: vault-release
  block:
    - name: get full RedHat release version
      block:
        - slurp:
            path: /etc/redhat-release
          register: redhat_release_file
        - set_fact:
            redhat_full_release: '{{ redhat_release_file.content | b64decode | regex_search("\d+\.\d+\.\d+") }}'
    - name: get closest release repo
      # find first vault release that is less or equal to the current redhat release version
      shell: |
        for version in {{ redhat_vault_repo_versions|reverse|join(' ') }} ; do
          if [[ $version =~ {{ ansible_distribution_version | regex_search('\d+\.\d+') }} &&
                # get the last part of a version string, e.g. for '7.4.1611' it is '1611'
                $(echo $version | grep -oP '\d+$') -le {{ redhat_full_release | regex_search('\d+$') }} ]]
          then
            echo $version
            break
          fi
        done
      register: redhat_vault_repo
      changed_when: false
      check_mode: no

    - name: disable latest release repositories
      ini_file:
        path:    /etc/yum.repos.d/CentOS-Base.repo
        section: '{{ item }}'
        option:  enabled
        value:   0
      with_items:
        - base
        - updates
        - extras
      when: redhat_vault_repo.stdout != ""

    - name: enable {{ redhat_vault_repo.stdout }} vault repositories
      vars:
        repo_name: '{{ (item == "base") | ternary("os", item) }}'
        version:   '{{ redhat_vault_repo.stdout | regex_replace("^C(.*)$", "\1") }}'
      yum_repository:
        file:        CentOS-Vault
        name:        '{{ redhat_vault_repo.stdout }}-{{ item }}'
        description: CentOS-{{version}} - {{ item | capitalize }}
        baseurl:     http://vault.centos.org/{{version}}/{{repo_name}}/$basearch/
        gpgkey:      file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
        gpgcheck:    yes
      with_items:
        - base
        - updates
        - extras
      when: redhat_vault_repo.stdout != ""

- name: configure 'EPEL' repository
  package: name=epel-release  state=present
  when:    ansible_os_family == 'RedHat'
  tags: epel

- name: configure 'Debuginfo' repository
  yum_repository:
    name:        debuginfo
    description: CentOS - Debuginfo
    baseurl:     http://debuginfo.centos.org/$releasever/$basearch/
    # debuginfo packages are not signed, need to disable signature verification
    gpgcheck: no
  when: ansible_os_family == 'RedHat'
  tags: debuginfo

- name: configure 'ZFS' repository
  package:
    name: 'http://download.zfsonlinux.org/epel/zfs-release.el{{ facter_os["release"]["major"] + "_" + facter_os["release"]["minor"] }}.noarch.rpm'
    state: present
  when: ansible_os_family == 'RedHat'
  tags:
    - never
    - zfs

- name: disable SELinux
  selinux:
    state: disabled
  when: ansible_os_family == 'RedHat'
  tags:
    - no-selinux

# in situations when we aren't allowed to reboot target node to ensure that
# running kernel is the latest one, we need to request kernel-devel-`uname -r`
# explicitely because kernel-devel (w/o version) will pull the latest version
# but not the current one
# sometimes this can fail because an older package version may not be available
# in the default repo, e.g. when a new CentOS version is released and we're
# using Vagrant box from the previous release (e.g. 7.5 vs 7.6)
- name: install kernel-devel for the current kernel
  package:
    state: present
    name:  'kernel-devel-{{ ansible_kernel }}'
  ignore_errors: yes
  when: ansible_os_family == 'RedHat'

- name: upgrade all packages to latest versions
  #   force_apt_get=yes
  package:  name=*  state=latest  update_cache=yes
  tags: upgrade

- name: check if reboot is needed
  # `yum upgrade` might have installed a new kernel which we want to boot to.
  shell: |
    [[ $(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}') == $(uname -r) ]]
  register: reboot_required
  ignore_errors: yes
  changed_when: false
  # TODO: add suport for debian-based distros
  when: ansible_os_family == 'RedHat'

- name: install basic tools
  package:
    state: present
    name:  '{{ basic_tools_pkgs }}'

- name: install development tools
  package:
    state: present
    name:  '{{ devel_tools_pkgs }}'
  tags:
    - devel

- name: install extra tools
  package:
    state: present
    name:  '{{ extra_tools_pkgs }}'
  when: extra_tools_pkgs is defined

- name: install ZFS
  package: name=zfs state=present
  tags:
    - never
    - zfs

- name: change default editor to vim
  alternatives:
    name: editor
    path: /usr/bin/vim.basic
  when: ansible_os_family == 'Debian'

- name: apply CentOS 7.5 workarounds
  when: ansible_os_family == 'RedHat' and ansible_distribution_version | regex_search('\d+\.\d+') is version('7.5', '==')
  block:
    - name: re-start dbus
      service: name=dbus state=restarted
      tags: start-services

    - name: re-start systemd-logind
      service: name=systemd-logind state=restarted
      tags: start-services

    - name: disable broken CentOS-Sources.repo yum config
      shell: mv /etc/yum.repos.d/CentOS-Sources.repo{,.disabled}
      args:
        creates: /etc/yum.repos.d/CentOS-Sources.repo.disabled
        removes: /etc/yum.repos.d/CentOS-Sources.repo

    - name: upgrade rpm and rpm-build (required by python3* packages)
      yum:
        disablerepo: '*'
        enablerepo: [ base, updates ]
        name: [ rpm, rpm-build ]
        state: latest

    - name: install python3-* packages that obsolete python36-*
      yum:
        disablerepo: '*'
        enablerepo: [ base, updates ]
        name:
          - python3
          - python3-devel
          - python3-pip
          - python3-setuptools
        state: latest
  tags: c75-workarounds

- name: apply CentOS 7.6 workarounds
  when: ansible_os_family == 'RedHat' and ansible_distribution_version | regex_search('\d+\.\d+') is version('7.6', '==')
  block:
    - name: upgrade rpm and rpm-build (required by python3* packages)
      yum:
        disablerepo: '*'
        enablerepo: [ base, updates ]
        name: [ rpm, rpm-build ]
        state: latest
    - name: install python3-* packages that obsolete python36-*
      yum:
        disablerepo: '*'
        enablerepo: [ base, updates ]
        name:
          - python3
          - python3-devel
          - python3-pip
          - python3-setuptools
        state: latest
  tags: c76-workarounds

- name: enable persistent storage for journald
  ini_file:
    path:    /etc/systemd/journald.conf
    section: Journal
    option:  Storage
    value:   persistent
    no_extra_spaces: yes

- name: start avahi
  service: name={{ avahi_service }} state=started enabled=yes
  tags: start-services

- name: enable kernel debug messages on console
  sysctl:
    name:  kernel.printk
    value: 8
    state: present
  tags: debug

- name: set sensible defaults for shell environment
  lineinfile:
    path:   /etc/profile.d/editor.sh
    create: yes
    line:   'export EDITOR=vi'

- name: enable kernel crash dumps
  block:
    - name: create /var/crash dir
      file:
        path:  /var/crash
        state: directory
        mode:  '1777'

    - name: set global crash dumps location
      sysctl:
        name:  kernel.core_pattern
        value: /var/crash/core.%u.%e.%p

    - name: install kernel dump tools
      package:
        state: present
        name:  kexec-tools

- name: enable core dumps
  block:
    - name: set global soft core dump limit
      pam_limits:
        domain: '*'
        limit_type: soft
        limit_item: core
        value: unlimited

    - name: set global hard core dump limit
      pam_limits:
        domain: '*'
        limit_type: hard
        limit_item: core
        value: unlimited

- name: enable NOPASSWD `sudo` execution for %sudo user group
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo   ALL=(ALL:ALL) NOPASSWD: ALL'
  when: ansible_os_family == 'Debian'

- name: Check whether we are in development environment
  shell: grep -q vagrant /etc/passwd
  register: devenv
  ignore_errors: yes

- name: add /usr/local/s?bin/ to secure path
  # this is required for tools that are installed in '/usr/local/bin', to
  # be accessible with `sudo`, which uses secure path instead of the usual PATH
  # environment variable; it's enabled only in development environment though
  # (i.e. under Vagrant)
  when: devenv.rc == 0
  block:
    - name: add /usr/local/s?bin/ to secure path in sudoers
      replace:
        path: /etc/sudoers
        regexp: '^(Defaults\s+secure_path\s*=\s*).*$'
        replace: '\g<1>/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'

    - name: add /usr/local/s?bin/ to secure path in PAM config
      lineinfile:
        path: /etc/security/pam_env.conf
        line: PATH  DEFAULT=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  tags: sudo-usr-local-bin

- name: enable internal Seagate NTP server
  lineinfile:
    path:   /etc/systemd/timesyncd.conf
    create: no
    line:   'NTP=time.seagate.com'
    insertafter: '\[Time\]'
  ignore_errors: yes
  notify: restart systemd-timesyncd
  tags:
    - never
    - seagate-ntp

- name: restart machine
  when: reboot_required.rc == 1
  block:
    - name: reboot machine (in {{ reboot_delay_sec }} seconds)
      command: systemd-run --on-active={{ reboot_delay_sec }} systemctl reboot

    - name: wait for reboot to start and hopefully finish
      pause: minutes={{ reboot_wait_min }}

    - name: re-connect to rebooted machine before continuing
      command:  /bin/true
      register: online
      until:    online is success
  tags:
    - reboot
