#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


#
# Main script for motr-build Jenkins job
#

# auto export all variables
set -a

# exit with error code on any command failure (including pipes)
set -eo pipefail

if [ $# = 0 ]; then
  echo " Usage: $0 [--transport <lnet|libfabric|sock|membulk>] [other build options]";
  echo " Example : $0 --transport libfab --enable-coverage"
  exit 0
fi

CONFIGURE_OPTIONS=""
MAKE_OPTIONS=""
TRANSPORT="libfabric"
PACKAGE=""

until [ -z "$1" ]; do
  case $1 in
    "--transport")
        shift
        TRANSPORT="$1"
        shift ;;
    "docs")
        shift
        MAKE_OPTIONS="doc" ;;
    "nodocs")
        shift ;;
    *) CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1" ; shift;;
  esac
done

# Printing package name
echo "Package name is: $TRANSPORT"

WORKSPASE=$(pwd)
ARTIFACTS=$WORKSPASE/artifacts

# for backward compatibility with old Jenkins environment we need to `cd` into
# 'workdir/src' directory if it exists, that is where old Jenkins jobs stored
# motr sources
src_dir=workdir/src
[[ ! -d $src_dir ]] || cd $src_dir

sudo git clean -dfx
sudo git submodule foreach git clean -dfx
git submodule update --init

if [[ -d $ARTIFACTS ]] ; then
    rm -f $ARTIFACTS/*
else
    mkdir $ARTIFACTS
fi

./autogen.sh |& tee $ARTIFACTS/configure.log

if [[ $TRANSPORT == "lnet" ]]; then
	PACKAGE='lustre-client'
	CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-default-network=LNET " 
elif [[ $TRANSPORT == "libfabric" ]]; then
	PACKAGE='libfabric'
	CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-default-network=LF " 
elif [[ $TRANSPORT == "sock" ]]; then
	CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-default-network=SOCK " 
elif [[ $TRANSPORT == "membulk" ]]; then
	CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --with-default-network=MEMBULK " 
else
	echo "$TRANSPORT not yet supported"
	exit 1;
fi

if [[ "$PACKAGE" ]]; then 
	# Checking if package is available or not
	if [[ ! -z $(rpm -qa $PACKAGE) ]]; then
		echo "$PACKAGE package is present"
	else
		echo "need to install $PACKAGE module"
		yum install ${PACKAGE}* -y
	fi

	if [[ "$PACKAGE" == "libfabric" ]]; then
		echo "You are using default $PACKAGE module"
	else
	# @todo No need to remove rpms once selection of transport
	# for UT's and ST's based on configuration option of default
	# transport is added.
		if  [[ ! -z $(rpm -qa | grep libfabric) ]]; then
			rpm -e $(rpm -qa | grep libfabric)
		fi
		echo "$PACKAGE is not present in the VM"
	fi
fi


if [[ $MAKE_OPTIONS == "docs" ]]
then 
./configure ${CONFIGURE_OPTIONS} --disable-systemd |& tee -a $ARTIFACTS/configure.log
make -j $MAKE_OPTIONS |& tee $ARTIFACTS/make.log
else
[[ -d $HOME/rpmbuild ]] && rm -rf $HOME/rpmbuild/*
./configure ${CONFIGURE_OPTIONS} |& tee -a $ARTIFACTS/configure.log
make -j |& tee $ARTIFACTS/make.log
cp -v xcode/protocol*.txt $ARTIFACTS/
make -j rpms |& tee $ARTIFACTS/rpm.log
cp -av $HOME/rpmbuild/RPMS/x86_64/*.rpm $ARTIFACTS/
cp -av $HOME/rpmbuild/SRPMS/*.rpm $ARTIFACTS/
(cd $ARTIFACTS/ ; ln -vs cortx-motr-[[:digit:]]*.x86_64.rpm motr-latest.rpm)
fi
