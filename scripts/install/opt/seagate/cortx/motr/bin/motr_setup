#!/usr/libexec/platform-python
#
# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

import sys
import errno
import argparse
import inspect
import traceback
import signal
import psutil


from cortx.utils.conf_store import Conf
from motr_mini_prov import *

MOTR_HARE_CONF_PATH = "/opt/seagate/cortx/motr/conf/motr_hare_keys.json"

class Cmd:
    """Setup Command"""
    _index = "conf"

    # Index for Hare-Motr keys required for intercomponent communication
    _index_motr_hare = "conf_motr_hare"

    def __init__(self, args: dict):
        self._url = args.config

        self._services = args.services
        self._idx = args.idx
        # URL for Hare-Motr keys required for intercomponent communication
        Conf.load(self._index, self._url)
        self._args = args.args
        self._debug = args.debug
        configure_machine_id(self, None)

        # Configure log files and logger
        self.local_path = get_value(self, 'cortx>common>storage>local', str)
        self.log_path = get_value(self, 'cortx>common>storage>log', str)
        self.local_path_motr = f"{self.local_path}/motr/{self.machine_id}"
        self._motr_hare_conf = f"{self.local_path_motr}/motr_hare_keys.json"
        self._url_motr_hare = f"json://{self._motr_hare_conf}"
        self.log_path_motr = f"{self.log_path}/motr/{self.machine_id}"

        # Check if local and log path exists, return if not exists
        validate_files([self.local_path, self.log_path])

        create_dirs(self, [self.local_path_motr, self.log_path_motr])
        self.logfile =  f"{self.log_path_motr}/mini_provisioner"
        self.logger = config_logger(self)

        # Default setup size is small
        set_setup_size(self, self._services)

        # Fetch important data from Confstore
        self.cortx = get_value(self, 'cortx', dict)
        self.cluster = get_value(self, 'cluster', dict)
        self.nodes = get_value(self, 'node', dict)
        self.node = get_server_node(self)
        self.storage_nodes = get_data_nodes(self)
        if self.machine_id in self.storage_nodes:
            self.storage = get_storage(self)
        Conf.load(self._index_motr_hare, self._url_motr_hare)
    @property
    def args(self) -> str:
        return self._args

    @property
    def url(self) -> str:
        return self._url

    @staticmethod
    def usage(prog: str):
        """Print usage instructions"""

        sys.stderr.write(
            f"usage: {prog} [-h] <cmd> --config <url> <args>\n"
            f"where:\n"
            f"cmd           post_install, prepare, config, init, test, reset, cleanup,"
            f" upgrade, backup, restore\n"
            f"url           Config URL\n")

    @staticmethod
    def get_command(desc: str, argv: dict):
        """Return the Command after parsing the command line."""
        parser = argparse.ArgumentParser(desc)
        subparsers = parser.add_subparsers()
        cmds = inspect.getmembers(sys.modules[__name__])
        cmds = [(x, y) for x, y in cmds
            if x.endswith("Cmd") and x != "Cmd"]
        for name, cmd in cmds:
            cmd.add_args(subparsers, cmd, name)
        args = parser.parse_args(argv)
        return args.command(args)

    @staticmethod
    def add_args(parser: str, cls: str, name: str):
        """Add Command args for parsing."""

        parser1 = parser.add_parser(cls.name, help=f'setup {name}')
        parser1.add_argument('--config', type=str, help="Config URL")
        parser1.add_argument('args', nargs='*', default=[], help='args')
        parser1.add_argument('--debug', '-d', help='enable debug print',
                         action="store_true")
        parser1.add_argument('--services', type=str, help='Service name')
        parser1.add_argument('--idx', type=str, help='Service index')
        parser1.set_defaults(command=cls)

class PrepareCmd(Cmd):
    """Prepare Setup Cmd"""
    name = "prepare"

    def __init__(self, args: dict):
        super().__init__(args)

    def process(self):
        self.logger.info(f"Processing {self.name} {self.url} {self._args}\n")
        configure_net(self)
        self.logger.info("SUCCESS\n")

class PostInstallCmd(Cmd):
    """PostInstall Setup Cmd"""
    name = "post_install"

    def __init__(self, args: dict):
        super().__init__(args)

    def process(self):
        self.logger.info(f"Processing {self.name} {self.url} {self._args}\n")

        # Nothing required for post_install stage in k8
        self.logger.info("SUCCESS\n")
        return 0

class ConfigCmd(Cmd):
    """Config Setup Cmd"""
    name = "config"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        self.logger.info(f"Processing {self.name} {self.url} {self._args}\n")
        motr_config_k8(self)
        return

class InitCmd(Cmd):
    """Init Setup Cmd"""
    name = "init"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        self.logger.info(f"Processing {self.name} {self.url} {self._args}\n")
        self.logger.info("SUCCESS\n")

class TestCmd(Cmd):
    """Test Setup Cmd"""
    name = "test"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        self.logger.info(f"Processing {self.name} {self.url} {self._args}\n")
        '''
           If cortx-hare, cortx-motr-ivt is installed and
           cluster is up, perform test IO. Else, skip.
        '''
        if (
             pkg_installed(self, "cortx-hare") and
             pkg_installed(self, "cortx-motr-ivt") and
             cluster_up(self)
            ):
            test_io(self)
        else:
            self.logger.warning("Skipping test IO.\n")
        self.logger.info("SUCCESS\n")

class ResetCmd(Cmd):
    """Reset Setup Cmd"""
    name = "reset"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        if pkg_installed(self, "cortx-hare"):
            if cluster_up(self):
                self.logger.warning("Cluster is already up...Exiting.\n")
                return
        patterns = ["addb", "*trace"]
        remove_logs(self, patterns)
        pass

class CleanupCmd(Cmd):
    """Cleanup Setup Cmd"""
    name = "cleanup"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        if (len(self._args) > 1):
            self.logger.error(f"Invalid number of arguments of 'cleanup'\n")
            self.logger.error(f"Usage: <prog> [-h] <cmd> --config <url> <args>\n")
            self.logger.error(f"Ex: /opt/seagate/cortx/motr/bin/motr_setup cleanup --config <config_url> [pre-factory]")
            return
        if pkg_installed(self, "cortx-hare"):
            if cluster_up(self):
                self.logger.warning("Cluster is already up...Exiting.\n")
                return

        patterns = ["addb", "*trace", "m0d"]
        remove_logs(self, patterns)
        pass

class UpgradeCmd(Cmd):
    """Upgrade Setup Cmd"""
    name = "upgrade"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        pass

class BackupCmd(Cmd):
    """Backup Setup Cmd"""
    name = "backup"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        pass

class RestoreCmd(Cmd):
    """Restore Setup Cmd"""
    name = "restore"

    def __init__(self, args):
        super().__init__(args)

    def process(self):
        pass

class StartCmd(Cmd):
    """Start Cmd"""
    name = "start"

    def __init__(self, args: dict):
        super().__init__(args)

    def process(self):
        name = "start"
        self.logger.info(f"Processing cmd={self.name} config={self.url} services={self._services} idx={self._idx}\n")
        nargs = len(self._args) #0

        if re.match('^[0-9]*$', self._services):
            self.logger.error(f"Invalid service name({self._services}).")
            return
        if (nargs == 0):
            svc = self._services

            if not self._idx:
                self._idx = 1
            idx = int(self._idx)
            if idx < 1:
                self.logger.error(f"Invalid index({idx}). Index starts from 1\n")
                return
            configure_machine_id(self, name)
            start_service(self, svc, idx)
        else:
            self.logger.error(f"Invalid number of arguments.\n")
            self.logger.error("Usage: <prog> [-h] <cmd> --config <url> --services <service_name>  --idx <index>\n")
            self.logger.error("Ex: /opt/seagate/cortx/motr/bin/motr_setup start"
                              " --config yaml:///root/cluster_conf_store.yaml "
                              "--services ioservice --idx 1\n")
            self.logger.error("Ex: /opt/seagate/cortx/motr/bin/motr_setup start"
                              " --config yaml:///root/cluster_conf_store.yaml "
                              "--services fsm\n")
            self.logger.error("Ex: /opt/seagate/cortx/motr/bin/motr_setup start"
                              " --config yaml:///root/cluster_conf_store.yaml "
                              "--services confd\n")
        return

def main(argv: dict):
    try:
        desc = "Motr Setup command"
        command = Cmd.get_command(desc, argv[1:])
        command.process()

    except Exception as e:
        sys.stderr.write(f"\n{str(e)}\n\n")
        sys.stderr.write(f"{traceback.format_exc()}\n")
        Cmd.usage(argv[0])
        return errno.EINVAL

if __name__ == '__main__':
    signal.signal(signal.SIGTERM, receiveSigTerm)
    sys.exit(main(sys.argv))
