#!/usr/bin/env bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
#set -x

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG [OPTS] <CDF> [<params.yaml>]

Formats EES Cortx MOTR storage.

Here are some prerequisites/guidelines:

* Password-less ssh access between the nodes is required.
* Cortx MOTR is installed.

* The script should be run from the "left" node.

Mandatory parameters:
  --ip1           <addr>         1st roaming IP address
  --ip2           <addr>         2nd roaming IP address.
  --left-node     <n1>  Left  node hostname (default: pod-c1)
  --right-node    <n2>  Right node hostname (default: pod-c2)
  --left-volume   <lv>  Left  node /var/motr volume (default: /dev/sdb)
  --right-volume  <rv>  Right node /var/motr volume (default: /dev/sdc)
                  <CDF>          Hare Cluster Description File

Optional parameters:
  --mkfs-only           run mkfs on motr meta data devices.
  --single-node         run mkfs from single node only.
  --start-consul        start consul
  --stop-consul         stop  consul
  --get-fid             <service-name> <node-name>  get fid of service
Note: parameters can be specified either directly via cmd-line options
or via a yaml file, e.g.:

  ip1: <ip>
  ip2: <ip2>
  left-node: <lnode>
  right-node: <rnode>
  left-volume: <lvolume>
  right-volume: <rvolume>
EOF
}

TEMP=$(getopt --options h,i: \
              --longoptions help,ip1:,ip2: \
              --longoptions left-node:,right-node: \
              --longoptions left-volume:,right-volume: \
              --longoptions start-consul \
              --longoptions stop-consul \
              --longoptions mkfs-only,single-node:, \
              --longoptions get-fid \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

ip1=
ip2=
iface=eth1
net_type=tcp
lnode=pod-c1
rnode=pod-c2
lvolume=/dev/sdb
rvolume=/dev/sdc
mkfs_only=
single_node=false
start_consul_only=
stop_consul_only=
get_fid_only=

while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        --ip1)               ip1=$2; shift 2 ;;
        --ip2)               ip2=$2; shift 2 ;;
        -i|--interface)      iface=$2; shift 2 ;;
        --net-type)          net_type=$2; shift 2 ;;
        --left-node)         lnode=$2; shift 2 ;;
        --right-node)        rnode=$2; shift 2 ;;
        --left-volume)       lvolume=$2; shift 2 ;;
        --right-volume)      rvolume=$2; shift 2 ;;
        --start-consul)      start_consul_only=true; shift ;;
        --stop-consul)       stop_consul_only=true; shift  ;;
        --mkfs-only)         mkfs_only=true; shift ;;
        --single-node)       single_node=true; shift 2 ;;
        --get-fid)           get_fid_only=true; shift ;;
        --)                  shift; break ;;
        *)                   break ;;
    esac
done

cdf=${1:-}
argsfile=${2:-}

hare_dir=/var/lib/hare

die() {
    echo "$PROG: ERROR: $*" >&2
    exit 1
}

# Read Virtual ip, node and meta data volume information from args file.
if [[ -f $argsfile ]]; then
    while IFS=': ' read name value; do
       case $name in
           ip1)          ip1=$value     ;;
           ip2)          ip2=$value     ;;
           interface)    iface=$value   ;;
           net-type)     net_type=$value ;;
           left-node)    lnode=$value   ;;
           right-node)   rnode=$value   ;;
           left-volume)  lvolume=$value ;;
           right-volume) rvolume=$value ;;
       esac
    done < $argsfile
fi

[[ $ip1 ]] && [[ $ip2 ]] && [[ $cdf ]]  || {
    usage >&2
    exit 1
}

[[ -b $lvolume ]] || die "meta-data volume $lvolume is not available"
[[ -b $rvolume ]] || die "meta-data volume $rvolume is not available"

reset() {
    echo 'Exporting Consul configuration to /var/lib/hare/consul-conf-exported.json'
    /opt/seagate/cortx/hare/bin/consul kv export > \
       /var/lib/hare/consul-conf-exported.json
    # Temporily move consul resources after lnet on both the nodes so that
    # lnet resources are still running after we stop consul.
    echo 'Repositioning Consul resources on both the nodes...'
    sudo pcs resource group add c1 consul-c1 --after lnet-c1
    sudo pcs resource group add c2 consul-c2 --after lnet-c2

    echo 'Disabling Consul resources...'
    sudo pcs resource disable consul-c1
    sudo pcs resource disable consul-c2

    echo 'Waiting for Consul agents, hax and m0d services to stop on both the nodes...'
    while [[ `pgrep -a consul | grep 'consul agent'` ]] || [[ `pgrep hax` ]] ||
          [[ `pgrep m0d` ]] ||
          [[ `ssh $rnode 'pgrep -a consul | grep "consul agent"'` ]] ||
          [[ `ssh $rnode 'pgrep hax'` ]] || [[ `ssh $rnode 'pgrep m0d'` ]]; do
        sleep 5
    done

    # Killing any remaining consul watcher processes.
    sudo pkill consul || true
    ssh $rnode 'sudo pkill consul' || true

    ip a | grep -qF $ip1 ||
      die "IP address $ip1 doesn't appear to be configured at $lnode"

    ssh $rnode "ip a | grep -qF $ip2" ||
      die "IP address $ip2 doesn't appear to be configured at $rnode"

    sudo lctl list_nids | grep -qF $ip1 ||
      die "LNet endpoint $ip1 doesn't appear to be configured at $lnode"

    ssh $rnode "sudo lctl list_nids | grep -qF $ip2" ||
      die "LNet endpoint $ip2 doesn't appear to be configured at $rnode"

    echo 'Conforming if /var/motr on both the nodes is unmounted...'
    while mountpoint /var/motr && ! umount /var/motr; do sleep 1; done
    while ssh $rnode 'mountpoint /var/motr && ! umount /var/motr'; do sleep 1; done

    echo "Formatting volumes $lvolume and $rvolume ..."
    mkfs.ext4 $lvolume
    mkfs.ext4 $rvolume

    echo 'Mounting /var/motr on both the nodes...'
    mkdir -p /var/motr &&
      ! mountpoint -q /var/motr && sudo mount $lvolume /var/motr
    ssh $rnode "mkdir -p /var/motr &&
      ! mountpoint -q /var/motr && sudo mount $rvolume /var/motr"

    echo 'Resetting failed systemd units on both the nodes...'
    sudo systemctl reset-failed hare\* m0d\*
    ssh $rnode 'sudo systemctl reset-failed hare\* m0d\*'

    echo 'Running hctl bootstrap..'
    hctl bootstrap --mkfs -c /var/lib/hare
    hctl shutdown

    # Ideally we will not touch the foreign directories (/var/motr{1,2}) for
    # each node during reset but we make sure they exist when cluster is back up.
    sudo mkdir -p /var/motr2
    ssh $rnode 'sudo mkdir -p /var/motr1'

    echo 'Unmounting /var/motr from both the nodes...'
    sudo umount /var/motr
    ssh $rnode 'sudo umount /var/motr'

    # Move consul resources back to their original positions in their respective
    # resource groups i.e. after virtual ip resources on both the nodes.
    echo 'Repositioning Consul resources to original location on both the nodes...'
    sudo pcs resource group add c1 consul-c1 --after ip-c1
    sudo pcs resource group add c2 consul-c2 --after ip-c2

    echo 'Enabling Consul resources on both the nodes...'
    sudo pcs resource enable consul-c1
    sudo pcs resource enable consul-c2

    # Reset failcount once after reset
    sudo pcs resource cleanup

    echo 'Waiting for Consul agents, hax and m0ds to start on both the nodes...'
    while true; do
        if [[ `pgrep -a consul | grep 'consul agent'` &&
              `pgrep hax` && `pgrep m0d` &&
              `ssh $rnode 'pgrep -a consul | grep "consul agent"'` &&
              `ssh $rnode 'pgrep hax'` && `ssh $rnode 'pgrep m0d'` ]]; then
                break
       fi
       sleep 5
    done

    echo 'Importing /var/lib/hare/consul-conf-exported.json...'
    for i in {1..10}; do
        /opt/seagate/cortx/hare/bin/consul kv import \
            @/var/lib/hare/consul-conf-exported.json && break || sleep 5
    done
}

get_fid() {
    service=$1
    node=$2     

    # wait until consul becomes available for returning the data
    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/$node/processes | grep $service` ]]
    do
	      echo "Trying to fetch fid again"
        sleep 2
    done
    
    proc_id=$(/opt/seagate/cortx/hare/bin/consul kv get --recurse \
              m0conf/nodes/$node/processes | grep $service | \
              awk 'BEGIN {FS="/"} {print $5}')
    fid=$(printf '0x7200000000000001:0x%x\n' $proc_id)
    echo $fid
}

get_proc_state() {
    fid=$1

    state=$(/opt/seagate/cortx/hare/bin/consul kv get processes/$fid 2> /dev/null | jq -r '.state')
    echo $state
}

run_cmd() {
    local node=$1; shift
    local cmd=$*
    ssh $node $cmd
}

get_leader() {
    /opt/seagate/cortx/hare/bin/consul kv get leader
}

m0_mkfs() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi

    local confd_fid_c1=$(get_fid 'confd' $lnode)
    local ios_fid_c1=$(get_fid 'ios' $lnode)

    local confd_fid_c2=$(get_fid 'confd' $rnode)
    local ios_fid_c2=$(get_fid 'ios' $rnode)

    run_cmd $node1 "systemctl is-active --quiet m0d@$confd_fid_c1" ||
    run_cmd $node1 "systemctl is-active --quiet m0d@$ios_fid_c1" ||
    run_cmd $node2 "systemctl is-active --quiet m0d@$confd_fid_c2" ||
    run_cmd $node2 "systemctl is-active --quiet m0d@$ios_fid_c2" &&
        die 'Active m0d instances found, please stop all the m0d instances'

    echo "Starting motr-mkfs@$confd_fid_c1 (confd)"
    run_cmd $node1 "sudo systemctl start motr-mkfs@$confd_fid_c1"
    while [[ $(get_proc_state $confd_fid_c1) != M0_CONF_HA_PROCESS_STOPPED ]]; do
        sleep 1
    done
    sleep 5
    echo "Started motr-mkfs@$confd_fid_c1 (confd)"

    echo "Starting m0d@$confd_fid_c1 (confd)"
    run_cmd $node1 "sudo systemctl start m0d@$confd_fid_c1"
    while [[ $(run_cmd $node1 "systemctl is-active m0d@$confd_fid_c1") != 'active' ]]; do
       sleep 5
    done
    sleep 5
    echo "Started m0d@$confd_fid_c1 (confd)"

    echo "Starting motr-mkfs@$confd_fid_c2 (confd)"
    run_cmd $node2 "sudo systemctl start motr-mkfs@$confd_fid_c2"
    while [[ $(get_proc_state $confd_fid_c2) != M0_CONF_HA_PROCESS_STOPPED ]]; do
        sleep 1
    done
    sleep 5
    echo "Started motr-mkfs@$confd_fid_c2 (confd)"

    echo "Starting m0d@$confd_fid_c2 (confd)"
    run_cmd $node2 "sudo systemctl start m0d@$confd_fid_c2"
    while [[ $(run_cmd $node2 "systemctl is-active m0d@$confd_fid_c2") != 'active' ]]; do
       sleep 5
    done
    sleep 5
    echo "Started m0d@$confd_fid_c2 (confd)"

    echo "Starting motr-mkfs@$ios_fid_c1 (ios)"
    run_cmd $node1 "sudo systemctl start motr-mkfs@$ios_fid_c1"
    while [[ $(get_proc_state $ios_fid_c1) != M0_CONF_HA_PROCESS_STOPPED ]]; do
        sleep 1
    done
    sleep 5
    echo "Started motr-mkfs@$ios_fid_c1 (ios)"

    echo "Starting motr-mkfs@$ios_fid_c2 (ios)"
    run_cmd $node2 "sudo systemctl start motr-mkfs@$ios_fid_c2"
    while [[ $(get_proc_state $ios_fid_c2) != M0_CONF_HA_PROCESS_STOPPED ]]; do
        sleep 1
    done
    sleep 5
    echo "Started motr-mkfs@$ios_fid_c2 (ios)"

    echo "Starting m0d@$ios_fid_c1 (ios)"
    run_cmd $node1 "sudo systemctl start m0d@$ios_fid_c1"
    while [[ $(run_cmd $node1 "systemctl is-active m0d@$ios_fid_c1") != 'active' ]]; do
       sleep 5
    done
    sleep 5
    echo "Started m0d@$ios_fid_c1 (ios)"

    echo "Starting m0d@$ios_fid_c2 (ios)"
    run_cmd $node2 "sudo systemctl start m0d@$ios_fid_c2"
    while [[ $(run_cmd $node2 "systemctl is-active m0d@$ios_fid_c2") != 'active' ]]; do
        sleep 5
    done
    echo "Started m0d@$ios_fid_c2 (ios)"
    sleep 15

    echo "Stopping m0d@$ios_fid_c1, m0d@$ios_fid_c2, m0d@$confd_fid_c1, m0d@$confd_fid_c2"
    run_cmd $node1 "sudo systemctl stop m0d@$ios_fid_c1"
    run_cmd $node2 "sudo systemctl stop m0d@$ios_fid_c2"
    run_cmd $node1 "sudo systemctl stop m0d@$confd_fid_c1"
    run_cmd $node2 "sudo systemctl stop m0d@$confd_fid_c2"

    echo -n "Waiting for all m0d services to stop"
    while [[ `pgrep m0d` ]]; do
       sleep 5
    done
    echo "Stopped all m0d services"
}

start_consul() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi

    echo 'Adding ip addresses..'
    run_cmd $node1 "sudo ifconfig $iface:c1 $ip1"
    run_cmd $node2 "sudo ifconfig $iface:c2 $ip2"

    echo 'Adding lnet interfaces..'
    # Its possible that lnet module is not loaded.
    run_cmd $node1 "sudo modprobe lnet"
    run_cmd $node2 "sudo modprobe lnet"

    run_cmd $node1 "sudo lnetctl net add --net $net_type --if $iface:c1"
    run_cmd $node2 "sudo lnetctl net add --net $net_type --if $iface:c2"

    echo 'Restarting motr-kernel..'
    run_cmd $node1 "sudo systemctl restart motr-kernel"
    run_cmd $node2 "sudo systemctl restart motr-kernel"

    echo 'Modifying Consul systemd units..'
    run_cmd $node1 "sudo sed -i 's/^\(ExecStartPost\|ExecStopPost\)=\/usr\/sbin\/attrd_updater/#&/' \
                        /usr/lib/systemd/system/hare-consul-agent-c1.service"
    run_cmd $node2 "sudo sed -i 's/^\(ExecStartPost\|ExecStopPost\)=\/usr\/sbin\/attrd_updater/#&/' \
                        /usr/lib/systemd/system/hare-consul-agent-c2.service"

    run_cmd $node1 "sudo systemctl reset-failed"
    run_cmd $node2 "sudo systemctl reset-failed"
    run_cmd $node1 "sudo systemctl daemon-reload"
    run_cmd $node2 "sudo systemctl daemon-reload"

    echo 'Starting Consul agents..'
    run_cmd $node1 "sudo systemctl start hare-consul-agent-c1"
    run_cmd $node2 "sudo systemctl start hare-consul-agent-c2"

    while [[ ($(get_leader) != $lnode) && ($(get_leader) != $rnode) ]]; do
        sleep 1
    done

    # An issue is observed if we try to fetch data from Consul immediately
    # after stating Consul services. So, let's wait till consul becomes available.
    sleep 10
    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/srvnode-1 | grep confd` ]]
    do
        sleep 2
    done

    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/srvnode-2 | grep confd` ]]
    do
        sleep 2
    done
    echo 'Started Consul agents..'
}

stop_consul() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi
		
    echo 'Stopping Consul agents..'
    run_cmd $node2 "sudo systemctl stop hare-consul-agent-c2"
    run_cmd $node1 "sudo systemctl stop hare-consul-agent-c1"

    echo 'Deleting lnet interfaces..'
    run_cmd $node1 "sudo lnetctl net del --net $net_type --if $iface:c1"
    run_cmd $node2 "sudo lnetctl net del --net $net_type --if $iface:c2"

    echo 'Restarting motr-kernel..'
    run_cmd $node1 "sudo systemctl restart motr-kernel"
    run_cmd $node2 "sudo systemctl restart motr-kernel"

    echo 'Restoring Consul systemd units..'
    run_cmd $node1 "sudo sed -i '/\(#ExecStartPost\|#ExecStopPost\)=\/usr\/sbin\/attrd_updater/s/#//g' \
                        /usr/lib/systemd/system/hare-consul-agent-c1.service"
    run_cmd $node2 "sudo sed -i '/\(#ExecStartPost\|#ExecStopPost\)=\/usr\/sbin\/attrd_updater/s/#//g' \
                        /usr/lib/systemd/system/hare-consul-agent-c2.service"

    run_cmd $node1 "sudo systemctl daemon-reload"
    run_cmd $node2 "sudo systemctl daemon-reload"
    run_cmd $node1 "sudo systemctl reset-failed"
    run_cmd $node2 "sudo systemctl reset-failed"

    echo 'Removing ipaddresses..'
    run_cmd $node1 "ip addr del $ip1/24 dev $iface:c1"
    run_cmd $node2 "ip addr del $ip2/24 dev $iface:c1"
}

mkfs() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi

    start_consul

    echo 'Starting Hax..'
    run_cmd $node1 "sudo systemctl start hare-hax-c1"
    run_cmd $node2 "sudo systemctl start hare-hax-c2"

    while [[ $(run_cmd $node1 "systemctl is-active hare-hax-c1") != 'active' ||
             $(run_cmd $node2 "systemctl is-active hare-hax-c2") != 'active' ]]; do
        sleep 5
    done
    echo 'Started Hax..'

    echo 'Doing Motr mkfs..'
    m0_mkfs
    echo 'Motr mkfs done..'

    echo 'Stopping Hax..'
    run_cmd $node2 "sudo systemctl stop hare-hax-c2"
    run_cmd $node1 "sudo systemctl stop hare-hax-c1"

    stop_consul
}


if [[ $start_consul_only ]]; then
    start_consul
elif [[ $stop_consul_only ]]; then
    stop_consul
elif [[ $mkfs_only ]]; then
    mkfs
elif [[ $get_fid_only ]]; then
    get_fid $3 $4
else
    reset
fi
