#!/bin/bash
. /opt/seagate/cortx/motr/common/m0_sns_utils_common.sh
. /opt/seagate/cortx/motr/common/m0_dix_utils_common.sh
. /opt/seagate/cortx/motr/common/m0_spiel_dix_utils_common.sh

# Device id to failed. This parameter will override by
# command line --device option
DEVICE_ID=""
DEV_STATE=""
DEV_PATH=""
TYPE=""
OPERATION=""
REC_TYPE="SNS"
UTILITY="m0repair"

READ_VERIFY=0

_dix_repair_start() {
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_dix_repair_start
	else
		dix_repair # Using m0repair
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "DIX repair start failed with rc = $rc."
	fi
	return $rc
}

_dix_repair_wait() {
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_wait_for_dix_repair
	else
		wait_for_dix_repair_or_rebalance "repair"
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "Wait for DIX repair failed with rc = $rc."
	fi
	return $rc
}

_dix_repair_status()
{
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_dix_repair_status
	else
		dix_repair_or_rebalance_status "repair"
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "DIX repair status failed with rc = $rc."
	fi
	return $rc
}

_dix_rebalance_start() {
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_dix_rebalance_start
	else
		dix_rebalance # Using m0repair
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "DIX rebalance start failed with rc = $rc."
	fi
	return $rc
}

_dix_rebalance_wait() {
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_wait_for_dix_rebalance
	else
		wait_for_dix_repair_or_rebalance "rebalance"
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "Wait for DIX rebalance failed with rc = $rc."
	fi
	return $rc
}

_dix_rebalance_status()
{
	local rc
	if [ "$UTILITY" == "m0spiel" ]; then
		spiel_dix_rebalance_status
	else
		dix_repair_or_rebalance_status "rebalance"
	fi
	rc=$?
	if [ $rc != 0 ]
	then
		echo "DIX rebalance status failed with rc = $rc."
	fi
	return $rc
}

_motr_trigger_sns_rebalance()
{
        local rc=0
        local fail_device=$DEVICE_ID

        echo "Query device state"
        disk_state_get "$fail_device"
        if [ "$state_recv" != "repaired" ]; then
                echo "Device state doesn't seem in "repaired""
                return 1
        fi

        disk_state_set "rebalance" "$fail_device" || return $?
        echo "Starting SNS Re-balance.."
        sns_rebalance || return $?

        # Make sure rebalance is complete.
        wait_for_sns_repair_or_rebalance "rebalance" || return $?

        disk_state_set "online" "$fail_device" || return $?

        echo "query sns rebalance status"
        sns_repair_or_rebalance_status "rebalance" || return $?

        disk_state_get "$fail_device"

        echo "SNS Re-balance done."

        return $?
}

_motr_trigger_sns_repair()
{
        local rc=0
        local fail_device=$DEVICE_ID

        echo "Starting SNS repair ..."

        echo "Disk state get"
        disk_state_get "$fail_device"
        if [ "$state_recv" != "failed" ]; then
                echo "Device state doesn't seem in  "failed""
                return 1
        fi

        disk_state_set "repair" "$fail_device" || return $?
        echo "trigger sns repair"
        sns_repair || return $?

        echo "wait for sns repair"
        wait_for_sns_repair_or_rebalance "repair" || return $?

        echo "query sns repair status"
        sns_repair_or_rebalance_status "repair" || return $?

        disk_state_set "repaired" "$fail_device" || return $?

        echo "SNS Repair done."

       return $?
}

_motr_trigger_dix_rebalance()
{
        local rc=0
        local fail_device=$DEVICE_ID

        echo "Query device state"
        disk_state_get "$fail_device"
        if [ "$state_recv" != "repaired" ]; then
                echo "Device state doesn't seem in "repaired""
                return 1
        fi

        disk_state_set "rebalance" "$fail_device" || return $?
        echo "Starting DIX Re-balance.."
        _dix_rebalance_start || return $?

        # Make sure rebalance is complete.
        echo "Wait for DIX Re-balance.."
        _dix_rebalance_wait || return $?

        disk_state_set "online" "$fail_device" || return $?

        echo "Query DIX rebalance status"
        _dix_rebalance_status || return $?

        disk_state_get "$fail_device"

        echo "DIX Re-balance done."

        return $?
}

_motr_trigger_dix_repair()
{
        local rc=0
        local fail_device=$DEVICE_ID

        echo "Starting DIX repair ..."

        echo "Disk state get"
        disk_state_get "$fail_device"
        if [ "$state_recv" != "failed" ]; then
                echo "Device state doesn't seem in  "failed""
                return 1
        fi

        disk_state_set "repair" "$fail_device" || return $?
        echo "trigger DIX repair"
        _dix_repair_start || return $?

        echo "Wait for DIX repair"
        _dix_repair_wait || return $?

        echo "Query DIX repair status"
        _dix_repair_status || return $?

        disk_state_set "repaired" "$fail_device" || return $?

        echo "DIX Repair done."

       return $?
}

motr_trigger_repair()
{
        if [ "$REC_TYPE" == "DIX" ]; then
                _motr_trigger_dix_repair || return 1
        else
                _motr_trigger_sns_repair || return 1
        fi
}

motr_trigger_rebalance()
{
        if [ "$REC_TYPE" == "DIX" ]; then
                _motr_trigger_dix_rebalance || return 1
        else
                _motr_trigger_sns_rebalance || return 1
        fi
}

motr_trigger_repair_and_rebalance()
{
        # Trigger repair first
        motr_trigger_repair || return 1
        # Trigger rebalance if repair is successful
        motr_trigger_rebalance || return 1
}

get_dev_id_from_dev_name()
{
        local dev_idx=""
        local conf_cg="/opt/conf.cg"

        if [ ! -b "$DEV_PATH" ]; then
                echo "$DEV_PATH doesn't seem valid block device"
                exit
        fi

        generate_conf_cg "$conf_cg"
        if [ ! -f "$conf_cg" ]; then
                echo "$conf_cg not present, can't get device id"
                exit
        fi

        dev_idx=$(grep "$DEV_PATH" "$conf_cg" | head -1 | awk '{print $1}' | cut -d '-' -f2)
        if [ ! -z "$dev_idx" ]; then
                DEVICE_ID=$(cat "$CONF_FILE" | grep "\^d|1:${dev_idx}," | cut -d : -f 2 | cut -d ')' -f1)
        fi
        if [ -z "$DEVICE_ID" ]; then
                echo "Couldn't retrieve device id for $DEV_PATH"
                exit
        fi
        if [[ $DEVICE_ID == "0x"* ]]; then
                DEVICE_ID=$(echo $DEVICE_ID | cut -d 'x' -f 2)
                DEVICE_ID=$((16#$DEVICE_ID))
        fi
        echo "Device id for $DEV_PATH is : $DEVICE_ID"
        rm -f "$conf_cg"
}

main()
{
        local rc=0

        # Check hctl status to know current status
        check_cluster_status || return $?

        sandbox_init
        get_lnet_nid

        set_service_type "$REC_TYPE"

        if [ "$UTILITY" == "m0spiel" ]; then
                spiel_prepare
        else
                get_ios_endpoints
        fi

        if [ -z "$DEVICE_ID" ] && [ ! -z "$DEV_PATH" ]; then
                get_dev_id_from_dev_name
        fi

        local fail_device=$DEVICE_ID
        if [ "$READ_VERIFY" -eq 1 ]; then
                # Perform some write operation on data store before
                # disk failure and verify data on repair
                prepare_datafiles_and_objects || return $?
                client_read_verify 0      || return $?
                disk_state_set "failed" "$fail_device" || return $?
        fi

        if [ "$TYPE" == "drive" ]; then
                if [ ! -z "$DEV_STATE" ]; then
                        if [ -z "$DEVICE_ID" ] || [ -z "$DEV_STATE" ]; then
                                echo "Need device id and state to set disk state"
                                return 1
                        fi
                        echo "Setting $DEVICE_ID state to $DEV_STATE"
                        disk_state_set "$DEV_STATE" "$DEVICE_ID" || return $?
                else
                        state_recv=""
                        echo "Getting $DEVICE_ID state"
                        disk_state_get "$DEVICE_ID"
                        if [ -z "$state_recv" ]; then
                                echo "Could not retrieve state for $DEVICE_ID"
                                return 1
                        fi
                        echo "Device $DEVICE_ID state is :$state_recv"
                fi
        elif [ "$TYPE" == "repair" ]; then
                echo "Running $REC_TYPE Repair "
                motr_trigger_repair
                rc=$?
        elif [ "$TYPE" == "rebalance" ]; then
                echo "Running $REC_TYPE Rebalance "
                motr_trigger_rebalance
                rc=$?
        elif [ "$TYPE" == "repreb" ]; then
                echo "Running $REC_TYPE Repair and Rebalance "
                motr_trigger_repair_and_rebalance
                rc=$?
        else
                echo "Invalid or no operation is provided"
                return 1
        fi

        if [ "$READ_VERIFY" -eq 1 ]; then
                echo "Verifying checksums.."
                client_read_verify 0
        fi

        if [[ $rc -eq 0 ]]; then
                echo "$TYPE operation is completed successfully"
        else
                echo "$TYPE operation failed, rc:$rc"
        fi

        if [ $rc -eq 0 ]; then
                echo "Remove sandbox directory"
                sandbox_fini
        fi
        return $rc
}

usage()
{
        echo "./m0_ha_sim [OPTIONS]"
        echo "[OPTIONS]"
        echo "-t, --type        : Type of operation (drive/repair/rebalance/repreb)"
        echo "-o, --ops         : Sub operation of type (abort/pause/resume)"
        echo "-r, --recover-type: Type of recover (SNS (Default) / DIX)"
        echo "-i, --dev-id      : Device id of to failed/replaced device"
        echo "-d, --dev-path    : Dev path of to failed/replaced device"
        echo "-s, --state       : State of the device to set(failed/replaced)"
        echo "-u, --utility     : Utility to use for repair/rebalance"
        echo "                    (m0repair (default) / m0spiel)"
        echo "-v, --read-verify : Do IO operations before repair/rebalance and verify"
        echo "-h, --help        : To see this help options"
        exit 0
}

if [ $# -eq 0 ]; then
        usage
fi
OPTS=`getopt -o t:o::r:i:d:s:u:vh --long type:,ops:,recover-type:,dev-id:,dev-path:,:state,:utility,read-verify,help -n 'parse-options' -- "$@"`

if [ $? != 0 ]; then echo "Failed parsing options." >&2; exit 1; fi
eval set -- "$OPTS"
while true; do
        case "$1" in
        -t | --type )   TYPE=$2; shift; shift;;
        -o | --ops )   OPERATION=$2; shift; shift;;
        -r | --recover-type)  REC_TYPE=$2; shift; shift;;
        -i | --dev-id ) DEVICE_ID=$2; shift; shift;;
        -d | --dev-path )  DEV_PATH=$2; shift; shift;;
        -s | --state )  DEV_STATE=$2; shift; shift;;
        -u | --utility ) UTILITY=$2; shift; shift;;
        -v | --read-verify ) READ_VERIFY=1; shift;;
        -h | --help )   usage; shift;;
        * ) break;;
        esac
done

if [ ! -z "$DEV_STATE" ]; then
        if [[ ! "$DEV_STATE" =~ ^(failed|replaced)$ ]]; then
                echo "Valid state are only (failed/replaced)"
                usage
        fi
fi

if [ ! -z "$OPERATION" ]; then
        echo "Sub operations are not supported yet"
        usage
fi

if [ ! -z "$REC_TYPE" ]; then
        if [[ ! "$REC_TYPE" =~ ^(SNS|DIX)$ ]]; then
                echo "Valid recover types are only (SNS/DIX)"
                usage
        fi
fi

if [ ! -z "$UTILITY" ]; then
        if [[ ! "$UTILITY" =~ ^(m0repair|m0spiel)$ ]]; then
                echo "Valid utilities for repair / rebalance are only \
                      (m0repair/m0spiel)"
                usage
        fi
fi

main
report_and_exit m0-ha-sim $?
