#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# exit immediately if one the commands exits with a non-zero status
set -e

# constants
readonly PROG_NAME=$(basename $0)

# global variables, which can be overriden in /etc/sysconfig/motr
MOTR_GENDERS_CONF=/etc/motr/genders
MOTR_CONF_XC_DEFAULT=/etc/motr/conf.xc

# service local variables
user_config=/etc/sysconfig/motr
ha_config="/etc/sysconfig/m0d-${1#m0d-}"
kernel_config=/etc/sysconfig/motr-kernel
service_funcs=/usr/libexec/cortx-motr/motr-service.functions

# BE log resize
MD_DIR="/var/motr"
M0BETOOL="m0betool"
BE_REPLAY="be_recovery_run"
BE_RESIZE="be_log_resize"

service_fid=""

be_log_resize() {
   local new_be_log_size=""
   local current_be_log_size=""

   # Extract current BE log file size
   new_be_log_size=$(grep -w MOTR_M0D_BELOG_SIZE $user_config | grep -v '#' | cut -d"=" -f2)
   if [[ -z $new_be_log_size ]]; then
      m0_log "BE log size is not configured"
      return 0
   fi
   m0_log "Given BE log size: $new_be_log_size"

   # Validate current BE LOG file size and New BE LOG file size
   current_be_log_size=$(ls -l "$MD_DIR"/"$service_fid"/db-log/o/0:28 | awk '{ print $5 }')
   if [[ $current_be_log_size == "" ]]; then
      m0_log "Failed to get existing be log size"
      return 1
   fi

   if [[ "$current_be_log_size" == "$new_be_log_size" ]]; then
      m0_log "Current and New BE log sizes are equal"
      return 0
   fi
   m0_log "Current BE log size:  $current_be_log_size"

   # Replay exist BE log
   if ! $($M0BETOOL $BE_REPLAY $MD_DIR/"$service_fid"/db); then
      m0_log "m0d service $service_fid  log replay is failed"
      return 0
   fi
   m0_log "Completed log_replay"

   # Resizing BE log file size with new BE log size
   if ! $($M0BETOOL $BE_RESIZE $MD_DIR/"$service_fid"/db $new_be_log_size); then
      m0_log "m0d service $service_fid log resize is failed"
      return 0
   fi
   m0_log "Completed log_resize with $new_be_log_size"
}

m0_server()
{
    local service=$1
    local cmd=${2:-m0d}
    local cmd_opts="$3"

    source $service_funcs

    [[ -n $service ]] || m0_exit "usage: $PROG_NAME <SERVICE>"

    if [[ $service == m0d-* && ! -e $ha_config ]] ; then
        m0_exit "service config file '$ha_config' doesn't exist"
    fi

    # read configs
    [[ -r $kernel_config ]] && source $kernel_config
    [[ -r $ha_config   ]]   && source $ha_config
    [[ -r $user_config ]]   && source $user_config

    # apply global system tweaks
    if [[ -n $KERNEL_HUGEPAGE_DEFRAG ]] ; then
        local hpdefrag_file='/sys/kernel/mm/transparent_hugepage/defrag'
        echo "$KERNEL_HUGEPAGE_DEFRAG" > $hpdefrag_file
        m0_log "$hpdefrag_file: $(cat $hpdefrag_file)"
    fi

    # validate Halon config
    if [[ $service == m0d-* ]] ; then
        [[ -n $MOTR_M0D_EP ]] &&
            m0_log "MOTR_M0D_EP: $MOTR_M0D_EP" ||
                m0_exit "MOTR_M0D_EP isn't set for $service service"

        m0_log "MOTR_PROCESS_FID: $(m0_get_proc_fid_for $service)"

        [[ -z $MOTR_HA_EP ]] ||
            m0_log "MOTR_HA_EP: $MOTR_HA_EP"

        if [[ -n $MOTR_M0D_DATA_DIR ]] ; then
            m0_log "MOTR_M0D_DATA_DIR: $MOTR_M0D_DATA_DIR"
        fi

        if [[ -n $MOTR_CONF_XC ]] ; then
            m0_log "MOTR_CONF_XC: $MOTR_CONF_XC"
        fi
    fi

    [[ -n $MOTR_M0D_DEBUGGER ]] && export M0_DEBUGGER=$MOTR_M0D_DEBUGGER

    local service_dir=$(m0_get_m0d_data_dir_for $service)
    if [[ $MOTR_M0D_REMOVE_SERVICE_DIR == true ]] && [[ -d "$service_dir" ]] ; then
        rm -rf "$service_dir"
    fi
    [[ ! -d "$service_dir" ]] && mkdir -p "$service_dir"
    cd "$service_dir"

    MOTR_M0D_OPTS=${MOTR_M0D_OPTS:-$(m0_get_core_params)}

    local stob_type="-T $(m0_get_stob_mode)"
    local stob_path='-S stobs'
    local stob_opts
    local proc_fid="<$(m0_get_proc_fid_for $service)>"
    local be_seg0_path=
    local be_seg_path=
    local be_seg_size=

    # @todo
    # These BE segment devices needs to pass through Motr configuration
    # (confd.xc) as part of MD service. This change may be workaround to
    # make it use for LDR-R1 data recovery.
    if [[ -n $MOTR_BE_SEG0_PATH &&  -b $MOTR_BE_SEG0_PATH ]]; then
        be_seg0_path=" -b $MOTR_BE_SEG0_PATH "
    fi

    if [[ -n $MOTR_BE_SEG_PATH && -b $MOTR_BE_SEG_PATH ]]; then
        be_seg_path=" -B $MOTR_BE_SEG_PATH "
        if [[ -n $MOTR_M0D_IOS_BESEG_SIZE ]]; then
            be_seg_size=" -z $MOTR_M0D_IOS_BESEG_SIZE"
        fi
    fi

    # mds and rms are expected to read local configuration until the
    # order of motr bootstrapping changes to start rms along with
    # confd prior to any other services, except maybe ha, which is
    # independent of confd or rms, but to be started prior to any
    # other m0d or m0t1fs requiring ha for further remote conf read
    case "$service" in
        mds*)  MOTR_M0D_OPTS+=" -c ${MOTR_CONF_XC:-$MOTR_CONF_XC_DEFAULT}"
            ;;

        rms*)  MOTR_M0D_OPTS+=" -c ${MOTR_CONF_XC:-$MOTR_CONF_XC_DEFAULT}"
            ;;

        fdmi*)  MOTR_M0D_OPTS+=" -c ${MOTR_CONF_XC:-$MOTR_CONF_XC_DEFAULT}"
            ;;

        ios*)  local disks_conf="/etc/motr/disks-$service.conf"
               if [[ -r $disks_conf ]]; then
                   stob_opts+=" -d $disks_conf"
               else
                   stob_opts+=' -U '
               fi
               stob_path="-S $(m0_get_ios_stob_path_for $service)"
            ;;

        cas*)
            ;;

        confd|ha*)
               : ${MOTR_CONF_XC:=$MOTR_CONF_XC_DEFAULT}

               stob_type='-T linux'
               MOTR_M0D_OPTS+=" -c $MOTR_CONF_XC"
               if [[ ! -r $MOTR_CONF_XC ||
                     $(stat -c%Y $MOTR_GENDERS_CONF) -gt $(stat -c%Y $MOTR_CONF_XC) ]]
               then
                   m0_build_local_conf > $MOTR_CONF_XC
               fi
            ;;

        m0d-*) # Halon controlled services

               # check if it is a confd process
               if [[ -n $MOTR_CONF_XC ]] ; then
                   stob_type='-T linux'
                   MOTR_M0D_OPTS+=" -c $MOTR_CONF_XC"
               fi

               MOTR_M0D_OPTS+=${MOTR_HA_EP:+ -H $MOTR_HA_EP}
               MOTR_M0D_OPTS+=" -U"
            ;;

        *)     m0_exit "Failed to start unknown service '$service'," \
                       " available services are 'mds*' and 'ios*'"
            ;;
    esac

    if [[ $service != m0d-* ]] ; then
        local ha_ep=${MOTR_HA_EP:-$(m0_get_global_ep_of ha)}
    fi

    local service_ep
    if [[ $service == ha ]]; then
        service_ep="lnet:$ha_ep"
    else
        service_ep="lnet:${MOTR_M0D_EP:-$(m0_get_ep_of $service)}"
        MOTR_M0D_OPTS+=${ha_ep:+ -H $ha_ep}
    fi

    local addbstob_dir=${MOTR_M0D_ADDB_STOB_DIR:+$MOTR_M0D_ADDB_STOB_DIR/$service/}
    [[ -z $addbstob_dir ]] || mkdir -p $addbstob_dir

    local binary=$(m0_path_to $cmd)

    # enable core dumps
    ulimit -c unlimited

    # Increase vm.max_map_count. MOTR-2171 MOTR-2396
    sysctl -w vm.max_map_count=30000000

    # use custom trace files location if it's specified
    [[ -z $MOTR_M0D_TRACE_DIR ]] || {
        export M0_TRACE_DIR=$MOTR_M0D_TRACE_DIR/$service
        mkdir -p $M0_TRACE_DIR
    }

    # show actual exec commands in log file
    if [[ -n $MOTR_MOD_ADDB_RECORD_SIZE ]]; then
       addb_opts=" -r ${MOTR_MOD_ADDB_RECORD_SIZE}"
    fi

    # m0d services log resize
    if [[ "$2" != "m0mkfs" ]]; then
       service_fid=$1
       m0_log "Service FID: $service_fid"
       be_log_resize
    fi

    set -x
    exec $binary -e $service_ep \
                    -A linuxstob:${addbstob_dir}addb-stobs \
                    -f $proc_fid $stob_type $stob_path $MOTR_M0D_OPTS \
                       $be_seg0_path $be_seg_path $be_seg_size \
                       $stob_opts $cmd_opts $addb_opts $MOTR_M0D_EXTRA_OPTS
}


m0_server "$@"
