#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# exit immediately if one the commands exits with a non-zero status
set -e

# constants
readonly PROG_NAME=$(basename $0)

# global variables, which can be overriden in /etc/sysconfig/motr
MOTR_GENDERS_CONF=/etc/motr/genders

# service local variables
service_funcs=/usr/libexec/cortx-motr/motr-service.functions

calc_log_rotation_options()
{
    local free_space_mb=$(df -BM $MOTR_LOG_DIR | tail -n1 | awk '{print $4}' | sed -e 's/M$//')
    local trace_targets=$(( $(m0_get_services | wc -w) + 1)) # +1 is for motr-kernel
    local log_space_per_service=$(( free_space_mb / trace_targets ))
    local min_log_space_per_service=$(( MOTR_TRACED_MIN_LOG_CHUNK_SIZE_MB * MOTR_TRACED_MIN_LOG_CHUNKS ))
    local max_log_space_per_service=$(( MOTR_TRACED_MAX_LOG_CHUNK_SIZE_MB * MOTR_TRACED_MAX_LOG_CHUNKS ))

    if (( $log_space_per_service < $min_log_space_per_service )) ; then
        m0_exit "not enough free space available on '$MOTR_LOG_DIR' for trace logs," \
                "required: $min_log_space_per_service MB per service," \
                "available: $log_space_per_service MB per service"
    fi

    local space=$max_log_space_per_service
    local ratio=1
    while (( $space > $log_space_per_service )) ; do
        space=$(( space / 4 ))
        (( ratio++ ))
    done

    local chunk_size_mb=$(( MOTR_TRACED_MAX_LOG_CHUNK_SIZE_MB / ratio ))
    local chunks_num=$(( MOTR_TRACED_MAX_LOG_CHUNKS / ratio ))

    if (( $chunk_size_mb > $MOTR_TRACED_MAX_LOG_CHUNK_SIZE_MB )) ; then
        chunk_size_mb=$MOTR_TRACED_MIN_LOG_CHUNK_SIZE_MB
    fi

    if (( $chunks_num > $MOTR_TRACED_MAX_LOG_CHUNKS )) ; then
        chunks_num=$MOTR_TRACED_MIN_LOG_CHUNKS
    fi

    m0_log "motr-trace: rotation scheme: ${chunk_size_mb}MB/x$chunks_num"

    echo "-s $chunk_size_mb -k $chunks_num"
}

cleanup_old_logs()
{
    local service=$1

    cd $MOTR_LOG_DIR

    case "$service" in
        kernel)
            local img_mask='m0tr.ko~*.img'
            local log_mask='trace-m0tr~*.bin'
            ;;

        confd*|ha*|ios*|cas*|mds*|rms*|fdmi*)
            local log_mask='trace-m0d-'$service'-*.bin'
            ;;

        m0d-*)
            local log_mask='trace-m0d-'${service#m0d-}'-*.bin'
            ;;
    esac

    m0_log 'cleaning up old logs'
    set +e
    for mask in img_mask log_mask ; do
        if [[ -n ${!mask} ]] ; then
            ls -t -1 ${!mask} \
            | tail -n +$(( $MOTR_TRACED_KEEP_LOGS_NUM + 1 )) \
            | sed -e 's/$/*/' \
            | xargs bash -c 'rm -vf $@' argv0_placeholder
        fi
    done
    set -e

    cd -
}

m0_traced()
{
    local target=$1

    [[ -n $target ]] || m0_exit "usage: $PROG_NAME <SERVICE>"

    source $service_funcs

    [ -r $user_config ] && source $user_config

    [ ! -d "$MOTR_LOG_DIR" ] && mkdir -p "$MOTR_LOG_DIR"

    local date=$(date -u '+%F_%T')
    local m0traced=$(m0_path_to m0traced)

    case "$target" in
        kernel)
            [[ $MOTR_TRACED_KMOD == yes ]] || exit 0
            local m0tr_ko_img=$MOTR_LOG_DIR/m0tr.ko~$date.img
            local output_file=$MOTR_LOG_DIR/trace-m0tr~$date.bin
            local opts="-K -O $m0tr_ko_img"
            ln -sf $(basename $m0tr_ko_img) /var/log/motr/m0tr_ko.img
            if ! mount | grep -q /sys/kernel/debug ; then
                mount -t debugfs none /sys/kernel/debug
            fi
            ;;

        confd*|ha*|ios*|cas*|mds*|rms*|fdmi*)
            [[ $MOTR_TRACED_M0D == yes ]] || exit 0
            local server_pid=$(m0_get_server_pid_for $target)
            local trace_file_dir=$(m0_get_m0d_data_dir_for $target)
            [[ -z $MOTR_M0D_TRACE_DIR ]] || trace_file_dir=$MOTR_M0D_TRACE_DIR/$target
            local server_trace_file=$trace_file_dir/m0trace.$server_pid
            local opts="-S -i $server_trace_file ${MOTR_TRACED_CHECK_INPUT:+-m $MOTR_TRACED_CHECK_INPUT}"
            local output_file=$MOTR_LOG_DIR/trace-m0d-$target-$server_pid~$date.bin
            ;;

        m0d-*)
            [[ $MOTR_TRACED_M0D == yes ]] || exit 0
            local server_pid=$(m0_get_server_pid_for $target)
            local trace_file_dir=$(m0_get_m0d_data_dir_for $target)
            [[ -z $MOTR_M0D_TRACE_DIR ]] || trace_file_dir=$MOTR_M0D_TRACE_DIR/$target
            local server_trace_file=$trace_file_dir/m0trace.$server_pid
            local opts="-S -i $server_trace_file ${MOTR_TRACED_CHECK_INPUT:+-m $MOTR_TRACED_CHECK_INPUT}"
            local output_file="$MOTR_LOG_DIR/trace-m0d-${target#m0d-}-$server_pid~$date.bin"
            ;;

        *) m0_exit "Failed to start m0traced for unknown target '$target'," \
                   "available targets are 'kernel', 'confd*', 'ios*', 'cas*', 'fdmi*'" \
                   "'mds*' and 'ha*'"
            ;;
    esac

    cleanup_old_logs $target

    local log_rotation_opts=$(calc_log_rotation_options)
    [[ -n $log_rotation_opts ]] ||
        exit 1

    set -x
    exec $m0traced -L $opts $log_rotation_opts -o "$output_file" $MOTR_TRACED_EXTRA_OPTS
}


m0_traced $(echo $1 | sed -r -e 's/^motr-(server[-@])?//' \
                             -e 's/^(0x)?[0-9a-f]+:(0x)?[0-9a-f]+$/m0d-&/')
