#
# Error handling
#

# By default, bash doesn't propagate error exit code from a subshell process to
# the parent shell. Especially, if a subshell is called in double quotes as an
# assignment to a local variable:
#
#   local nodes="$current_node $(get_sibling_nodes)"
#
# In order to enable proper error handling, additional options and traps need to
# be enabled.

set -e
set -E

sysconfig_dir='/etc/sysconfig'
[ -d /etc/sysconfig ] || sysconfig_dir='/etc/default'

MOTR_M0D_CONF_DIR=$(source /etc/sysconfig/motr; echo $MOTR_M0D_CONF_DIR)

user_config=${MOTR_M0D_CONF_DIR:-$sysconfig_dir}/motr
kernel_config=${MOTR_M0D_CONF_DIR:-$sysconfig_dir}/motr-kernel
ha_config="${MOTR_M0D_CONF_DIR:-$sysconfig_dir}/m0d-${1#m0d-}"

_error_handler()
{
    kill -TERM $$
    echo 'propagating error to parent shell' >&2
}
trap _error_handler ERR

_term_handler()
{
    echo 'got sub-shell error, terminating..' >&2
    exit 42
}
trap _term_handler TERM

#
# Default values
#

# Profile fid in the format suitable for 'prof=' mount option. Must match $prof
# variable in m0_build_local_conf()
readonly m0_prof_opt='0x7000000000000001:0'

readonly default_m0d_max_rpc_msg_size=65536
readonly default_m0d_min_rpc_recvq_len=16
readonly default_m0d_beseg_size=8589934592
readonly default_m0d_ios_beseg_size=4294967296

readonly MOTR_M0D_DEFAULT_DATA_DIR='/var/motr'

#
# Library functions
#

# Print message on console (STDERR)
#   @param  $1  msg
m0_log()
{
    echo "$@" >&2
}


# Print message on STDERR
m0_echo_err()
{
    echo "motr: ERROR: $*" >&2
}

# Report error and exit.
#   @param  $*  error msg
m0_exit()
{
    m0_log "$*"
    exit 1
}

# Run a command constructed from a concatenation of all positional parameters.
# Resulting command string is logged with m0_log().
#   @param  $*  command and it's arguments
m0_run()
{
    m0_log "$*"
    "$@"
}

_trap_munge()
{
    local cmd=$1
    local signal=$2

    [[ -n "$cmd" && -n "$signal" ]] || {
        m0_exit "$FUNCNAME: not enough arguments provided"
    }

    local old_cmd=$(trap -p $signal | awk -F"'" '{print $2}')

    trap "$cmd;$old_cmd" $signal
}

# path to binaries inside working directory
declare -rA _path_inside_workdir=(
    [m0tr.ko]='m0tr.ko'
    [m0d]='motr/m0d'
    [m0mkfs]='utils/mkfs/m0mkfs'
    [m0traced]='utils/trace/m0traced'
    [m0dixinit]='utils/m0dixinit'
)

# Return a path to Motr executables.
#   @param  $1  name of an executable
m0_path_to()
{
    local binary=$1

    if [ -n "$MOTR_DEVEL_WORKDIR_PATH" ] ; then
        echo "$MOTR_DEVEL_WORKDIR_PATH/${_path_inside_workdir[$binary]}"
    else
        echo "$(which $binary)"
    fi
}

# Checks whether CAS service is enabled
m0_cas_enabled()
{
    m0_get_services | grep -q cas
}

# Checks if particular variable exists in genders "database"
#   @param  $1  name of a variable
#   @param  $2  optional name of a node, for which the query is performed, if
#               ommited, then current node is queried
m0_genders_has_variable()
{
    local var_name=$1
    local node=$2

    if [[ -e $MOTR_GENDERS_CONF ]] ; then
        nodeattr -f $MOTR_GENDERS_CONF -Q $node $var_name
    else
        return 1
    fi
}

# Return value of particular variable, stored in genders "database"
#   @param  $1  name of a variable
#   @param  $2  optional name of a node, for which the query is performed, if
#               ommited, then value is returned for current node
m0_genders_value_of()
{
    local var_name=$1
    local node=$2

    if [[ -e $MOTR_GENDERS_CONF ]] ; then
        if m0_genders_has_variable $var_name $node ; then
            nodeattr -f $MOTR_GENDERS_CONF -v $node $var_name
        else
            m0_log "WARN: query not existing genders var '$var_name'${node:+ node $node}"
        fi
    fi
}

# Load Motr modules.
m0_load_modules()
{
    local m0tr_params

    if [ -n "$MOTR_KMOD_PARAMS" ] ; then
        m0tr_params="$MOTR_KMOD_PARAMS $MOTR_KMOD_EXTRA_PARAMS"
    else
        local uuid=${MOTR_NODE_UUID:-$(m0_genders_value_of m0_uuid)}
        local msg_size=${MOTR_M0D_MAX_RPC_MSG_SIZE:-$(m0_genders_value_of m0_max_rpc_msg_size)}
        local qlen=${MOTR_M0D_MIN_RPC_RECVQ_LEN:-$(m0_genders_value_of m0_min_rpc_recvq_len)}
        local ep=$(m0_get_kmod_ep)

        [[ -n "$uuid" ]] || m0_exit 'MOTR_NODE_UUID is missing, check /etc/sysconfig/motr-kernel file'

        m0tr_params="$m0tr_params node_uuid=$uuid"
        m0tr_params="$m0tr_params local_addr=$ep"
        m0tr_params="$m0tr_params max_rpc_msg_size=${msg_size:-$default_m0d_max_rpc_msg_size}"
        m0tr_params="$m0tr_params tm_recv_queue_min_len=${qlen:-$default_m0d_min_rpc_recvq_len}"
        m0tr_params="$m0tr_params $MOTR_KMOD_EXTRA_PARAMS"
    fi

    if [ -n "$MOTR_DEVEL_WORKDIR_PATH" ] ; then
        insmod $(m0_path_to m0tr.ko) $m0tr_params || {
            m0_exit "Failed to load m0tr module"
        }
        _trap_munge "rmmod $(m0_path_to m0tr.ko)" ERR
    else
        set -x
        modprobe m0tr $m0tr_params
    fi
}

# Unload Motr modules.
m0_unload_modules()
{
    if [ -n "$MOTR_DEVEL_WORKDIR_PATH" ] ; then
        rmmod m0tr || m0_exit "Failed to unload m0tr module"
    else
        modprobe -r m0tr
    fi
}

# Return path to a working directory of particular m0d instance
#   @param  $1  m0d service name
m0_get_m0d_data_dir_for()
{
    local service=$1

    local data_dir=$MOTR_M0D_DEFAULT_DATA_DIR

    if m0_genders_has_variable m0_datadir ; then
        data_dir=$(m0_genders_value_of m0_datadir)
    fi

    echo "${MOTR_M0D_DATA_DIR:-$data_dir}/$service"
}

# Return space-separated list of all nodes in the cluster from genders file
m0_get_nodes()
{
    if [[ -e $MOTR_GENDERS_CONF ]] ; then
        nodeattr -f $MOTR_GENDERS_CONF -c -A | tr ',' ' '
    fi
}

# Return lnet NID of a node
#   @param  $1  optional name of a node, for which the query is performed, if
#               ommited, then value is returned for current node
m0_get_lnet_nid()
{
    local node=$1

    local lnid
    # if $node is empty, then query is for current node
    if [[ -z "$node" || $node == $(hostname -s) ]] ; then
        lnid=${MOTR_NODE_LNID:=$(m0_genders_value_of m0_lnet_nid)}
        if [[ -z "$lnid" || $lnid == auto ]] ; then
            if [ "$(m0_get_motr_transport)" = "lnet" ]; then
                lnid=$(lctl list_nids | head -n1)
            else
                touch /etc/libfab.conf
                local netconf=$(cat /etc/libfab.conf)
                if [[ "$netconf" == "" ]]; then
                    netstat -i > /etc/libfab_tmp.txt
                    local conf=$(sed -n '3p' /etc/libfab_tmp.txt | awk '{print $1;}')
                    echo "networks=tcp($conf)" > /etc/libfab.conf
                    rm /etc/libfab_tmp.txt
                fi
                local iface=`cat /etc/libfab.conf | grep '\S' | grep --invert-match "^ *#" | cut -d "(" -f2 | cut -d ")" -f1`
                local proto=`cat /etc/libfab.conf | grep '\S' | grep --invert-match "^ *#" | cut -d "=" -f2 | cut -d "(" -f1`
                local ip_addr=`ip addr show $iface |grep inet| head -1 | awk '{print $2}'|cut -d '/' -f1`
                lnid=$ip_addr@$proto
            fi
            [[ -z "$lnid" ]] && \
                m0_exit 'Failed to auto-detect Lnet NID, please check that' \
                        ' lnet service is running'
        fi
    else
        lnid=$(m0_genders_value_of m0_lnet_nid $node)
    fi

    echo $lnid
}

# Return the default transport
# If libfab is available, then that is chosen as the transport
m0_get_motr_transport()
{
    local trans

    trans=$(whereis fi_info | cut -d ':' -f2)
    if [[ $trans != "" ]]; then
        trans="libfab"
    else
        trans="lnet"
    fi

    echo $trans
}

# Return space-separated list of all services for particular node
#   @param  $1  optional name of a node, for which the query is performed, if
#               ommited, then value is returned for current node
m0_get_services()
{
    local node=$1
    local services

    # if $node is empty, then query is for current node
    if [ -z "$node" -o "$node" = "$(hostname -s)" ] ; then
        services=${SERVICES:-$MOTR_SERVICES}
    fi

    echo ${services:-$(m0_genders_value_of m0_services $node | tr ';' ' ')}
}

# Return space-separated list of all services in the cluster
#   @param  $1  optional service type name, if ommited, the list of all services
#               in cluster is returned
m0_get_global_services()
{
    local service_type=$1

    local services

    for node in $(m0_get_nodes); do
        services="$services $(m0_get_services $node)"
    done

    case $service_type in
        '') echo $services
            ;;
        *)
            echo $services | grep -E -o "$service_type([[:digit:]]+)?" || true
            ;;
    esac
}

# Return m0tr.ko endpoint
m0_get_kmod_ep()
{
    echo "${MOTR_M0T1FS_EP:-$(m0_get_lnet_nid):12345:41:301}"
}

_portal_id()
{
    local s=$1
    local portal_id;

    case $s in
        mds*)   portal_id=41;;
        ios*)   portal_id=42;;
        rms*)   portal_id=43;;
        confd)  portal_id=44;;
        ha)     portal_id=45;;
        cas*)   portal_id=46;;
        fdmi)   portal_id=47;;
    esac
    echo $portal_id
}

# Return endpoint of a particular service
#   @param  $1  service name
#   @param  $2  optional name of a node, for which the query is performed, if
#               ommited, then value is returned for current node
m0_get_ep_of()
{
    local service=$1
    local node=$2

    # services managed by Halong get their endpoints from the per-service config
    # file
    if [[ $service == m0d-* ]] ; then
        [[ -n "$MOTR_M0D_EP" ]] ||
            m0_exit "MOTR_M0D_EP isn't set for $service service"
        echo $MOTR_M0D_EP
        return
    fi

    local found=false
    local lnid=$(m0_get_lnet_nid $node)
    local lpid=12345
    local confd_tid=1
    local mds_tid=201
    local rms_tid=301
    local ha_tid=1
    local ios_tid=401
    local cas_tid=501
    local fdmi_tid=601
    local portal=$(_portal_id $1)
    local ep
    local s

    for s in $(m0_get_services $node); do
        case $s in
            confd*) ep=${MOTR_CONFD_EP:-$lnid:$lpid:$portal:$((confd_tid++))}
                ;;
            mds*) ep=${MOTR_MDS_EP:-$lnid:$lpid:$portal:$((mds_tid++))}
                ;;
            ios*) ep=$lnid:$lpid:$portal:$((ios_tid++))
                ;;
            cas*) ep=$lnid:$lpid:$portal:$((cas_tid++))
                ;;
            rms*) ep=$lnid:$lpid:$portal:$((rms_tid++))
                ;;
            fdmi*) ep=$lnid:$lpid:$portal:$((fdmi_tid++))
                ;;
            ha*)  ep=${MOTR_HA_EP:-$lnid:$lpid:$portal:$((ha_tid++))}
                ;;
        esac

        if [[ $s == $service ]] ; then
            found=true
            break
        fi
    done

    if ! $found ; then
        m0_echo_err "cannot find endpoint of '$service' on the" \
                    " ${node:+current} node"
        ep=''
    fi

    echo $ep
}

_word_index()
{
    local str=$1
    local word=$2

    echo $str | awk "{ for (i = 1; i <= NF; i++) if (\"$word\" == \$i) print i }"
}

m0_get_proc_fid_for()
{
    local service=$1
    local node=$2

    # services managed by Halong have process FID included in their names
    if [[ $service == m0d-* ]] ; then
        echo ${service#m0d-}
        return
    fi

    local nidx
    local sidx
    local proc_fid=''

    nidx=$(_word_index "$(m0_get_nodes)" ${node:-$(hostname -s)})

    if [[ -n "$nidx" ]] ; then
        sidx=$(_word_index "$(m0_get_services)" $service)

        if [[ -n "$sidx" ]] ; then
            ((--sidx)) || true
            proc_fid=$(printf 0x%x:%d $((0x7200000000000000+$nidx)) $sidx)
        else
            m0_exit "cannot find service $service"
        fi
    else
        m0_exit "cannot find node $node"
    fi

    echo $proc_fid
}

# Return space-separated list of all endpoints in the cluster for particular
# service type, from genders file
#   @param  $1  service type (confd mds ios ha rms fdmi)
m0_get_global_eps_of()
{
    local stype=$1
    local global_eps
    local n
    local s

    for n in $(m0_get_nodes); do
        for s in $(m0_get_services $n); do
            if [[ $s == ${stype}* ]]; then
                global_eps="$global_eps $(m0_get_ep_of $s $n)"
            fi
        done
    done

    echo $global_eps
}

# Return first found endpoint of a particular service in the cluster, from
# genders file
#   @param  $1  service
m0_get_global_ep_of()
{
    local stype=$1

    echo $(m0_get_global_eps_of $stype) | awk '{print $1}'
}

# Return stob mode if defined or the default one.
m0_get_stob_mode()
{
    if m0_genders_has_variable m0_stob_mode ; then
        m0_genders_value_of m0_stob_mode
    else
        echo ad
    fi
}

# Return stob mode if defined or the default one.
#   @param  $1  service
m0_get_ios_stob_path_for()
{
    local service=$1

    if m0_genders_has_variable m0_stobdir ; then
        echo "$(m0_genders_value_of m0_stobdir)/$service"
    else
        echo stobs
    fi
}

# Build parameters list for m0d running "core" services
#
#   @param $1 directory to store configuration file.
#
m0_get_core_params()
{
    local optional_params

    if m0_genders_has_variable m0_be_tx_group_tx_nr_max ; then
        optional_params+=" -n $(m0_genders_value_of m0_be_tx_group_tx_nr_max)"
    elif [[ -n "$MOTR_M0D_BETXGR_TX_NR_MAX" ]]; then
        optional_params+=" -n $MOTR_M0D_BETXGR_TX_NR_MAX"
    fi

    if m0_genders_has_variable m0_be_tx_group_reg_nr_max ; then
        optional_params+=" -k $(m0_genders_value_of m0_be_tx_group_reg_nr_max)"
    elif [[ -n "$MOTR_M0D_BETXGR_REG_NR_MAX" ]]; then
        optional_params+=" -k $MOTR_M0D_BETXGR_REG_NR_MAX"
    fi

    if m0_genders_has_variable m0_be_tx_group_reg_size_max ; then
        optional_params+=" -K $(m0_genders_value_of m0_be_tx_group_reg_size_max)"
    elif [[ -n "$MOTR_M0D_BETXGR_REG_SIZE_MAX" ]]; then
        optional_params+=" -K $MOTR_M0D_BETXGR_REG_SIZE_MAX"
    fi

    if m0_genders_has_variable m0_be_tx_group_payload_size_max ; then
        optional_params+=" -p $(m0_genders_value_of m0_be_tx_group_payload_size_max)"
    elif [[ -n "$MOTR_M0D_BETXGR_PAYLOAD_SIZE_MAX" ]]; then
        optional_params+=" -p $MOTR_M0D_BETXGR_PAYLOAD_SIZE_MAX"
    fi

    if [[ -n "$MOTR_M0D_BETX_REG_NR_MAX" ]]; then
        optional_params+=" -C $MOTR_M0D_BETX_REG_NR_MAX"
    fi

    if [[ -n "$MOTR_M0D_BETX_REG_SIZE_MAX" ]]; then
        optional_params+=" -N $MOTR_M0D_BETX_REG_SIZE_MAX"
    fi

    if [[ -n "$MOTR_M0D_BETX_PAYLOAD_SIZE_MAX" ]]; then
        optional_params+=" -s $MOTR_M0D_BETX_PAYLOAD_SIZE_MAX"
    fi

    if [[ -n "$MOTR_M0D_BETXGR_FREEZE_TIMEOUT_MIN" ]]; then
        optional_params+=" -y $MOTR_M0D_BETXGR_FREEZE_TIMEOUT_MIN"
    fi

    if [[ -n "$MOTR_M0D_BETXGR_FREEZE_TIMEOUT_MAX" ]]; then
        optional_params+=" -Y $MOTR_M0D_BETXGR_FREEZE_TIMEOUT_MAX"
    fi

    if [[ -n "$MOTR_M0D_IOS_BUFFER_POOL_SIZE" ]]; then
        optional_params+=" -E $MOTR_M0D_IOS_BUFFER_POOL_SIZE"
    fi

    if [[ -n "$MOTR_M0D_SNS_BUFFER_POOL_SIZE" ]]; then
        optional_params+=" -J $MOTR_M0D_SNS_BUFFER_POOL_SIZE"
    fi

    if [[ -n "$MOTR_M0D_BTREE_ENABLE_TRICKLE_RELEASE" ]]; then
        optional_params+=" -t $MOTR_M0D_BTREE_ENABLE_TRICKLE_RELEASE"
    fi

    if [[ -n "$MOTR_M0D_BTREE_LRU_WM_LOW" ]]; then
        optional_params+=" -X $MOTR_M0D_BTREE_LRU_WM_LOW"
    fi

    if [[ -n "$MOTR_M0D_BTREE_LRU_WM_TARGET" ]]; then
        optional_params+=" -P $MOTR_M0D_BTREE_LRU_WM_TARGET"
    fi

    if [[ -n "$MOTR_M0D_BTREE_LRU_WM_HIGH" ]]; then
        optional_params+=" -O $MOTR_M0D_BTREE_LRU_WM_HIGH"
    fi

    if m0_genders_has_variable m0_pool_width ; then
        optional_params+=" -w $(m0_genders_value_of m0_pool_width)"
    fi

    local msg_size=${MOTR_M0D_MAX_RPC_MSG_SIZE:-$(m0_genders_value_of m0_max_rpc_msg_size)}
    local qlen=${MOTR_M0D_MIN_RPC_RECVQ_LEN:-$(m0_genders_value_of m0_min_rpc_recvq_len)}
    local directio=${MOTR_M0D_DIRECT_IO:-$(m0_genders_value_of m0_directio)}

    if [[ -n "$directio" ]] && ! $directio ; then
        # disable direct-IO
        optional_params+=' -I'
    fi

    echo " -D db" \
         " -m ${msg_size:-$default_m0d_max_rpc_msg_size}" \
         " -q ${qlen:-$default_m0d_min_rpc_recvq_len}" \
         " $optional_params"
}

# Return space-separated list of running Motr servers on a current node
m0_get_running_servers()
{
    if [ -x /usr/bin/systemctl ] ; then
        systemctl \
        | sed -n -r -e 's#^motr-server[-@](.*)\.service.*running.*#\1#p'
    fi
}

# Return PID of running m0d daemon for particular Motr service
#   @param  $1  name of a service, e.g. 'mds', 'ios1', 'fdmi'
m0_get_server_pid_for()
{
    local service=$1

    local prefix=motr-server
    local t='@'
    case $service in
        confd|ha) t='-' ;;
        m0d-*)    prefix=m0d ;;
    esac

    if [ -x /usr/bin/systemctl ] ; then
        systemctl show -pMainPID ${prefix}${t}${service#m0d-}.service \
        | sed -e 's/MainPID=//'
    fi
}

# Return generated service FID in form of container:key
#   @param  $1  name of a service, e.g. 'mds', 'ios1', 'fdmi'
#   @param  $2  node index in global nodes array where service is located
m0_build_service_fid()
{
    local service=$1
    local node_idx=$2
    local sidx_param=${3:-0}
    local cid=0

    local stype
    local sidx

    stype=${service//[0-9]}
    sidx=${service//[^0-9]}
    sidx=${sidx:-$sidx_param}

    case $stype in
        mds)           cid=1 ;;
        ios)           cid=2 ;;
        confd)         cid=3 ;;
        rms)           cid=4 ;;
        ha)            cid=5 ;;
        sns-repair)    cid=6 ;;
        sns-rebalance) cid=7 ;;
        addb)          cid=8 ;;
        sss)           cid=9 ;;
        cas)           cid=10 ;;
        dix-repair)    cid=11 ;;
        dix-rebalance) cid=12 ;;
        fdmi)          cid=13 ;;
        iscs)          cid=14 ;;
    esac

    printf %s:%d "^s|$(( $cid + $node_idx * 16 ))" $sidx
}

_build_disk_ids_str()
{
    local id_major=$1
    local start_id=$2
    local count=$3

    local dev_ids
    local id
    for id in $(seq $start_id $(($start_id + $count - 1))) ; do
        local dev_id="^d|$id_major:$id"
        dev_ids="$dev_ids${dev_ids:+, }$dev_id"
    done

    echo "[$count: $dev_ids]"
}

_build_disk_fids_str()
{
    local id_major=$1
    local imeta_id_major=$2
    local pool_width=$3
    local ipool_width=$4

    local disk_fids
    local id
    for id in $(seq 1 $pool_width) ; do
        local ddisk_id="^k|$id_major:$id"
        disk_fids="$disk_fids${disk_fids:+, }$ddisk_id"
    done

    if m0_cas_enabled ; then
        for id in $(seq 1 $ipool_width) ; do
            local ddisk_id="^k|$imeta_id_major:$id"
            disk_fids="$disk_fids${disk_fids:+, }$ddisk_id"
        done
    else
        ipool_width=0
    fi

    echo "[$(($pool_width + $ipool_width)): $disk_fids]"
}

_build_diskv_fids_str()
{
    local count=$1
    local id_major=$2

    local disk_fids
    local id
    for id in $(seq 1 $count) ; do
        local ddiskv_id="^j|$id_major:$id"
        disk_fids="$disk_fids${disk_fids:+, }$ddiskv_id"
    done

    echo "[$count: $disk_fids]"
}

_build_devs()
{
    local count=$1
    local id_major=$2
    local dev_idx_seed=$3
    local pverid=$4

    local disk_size_in_bytes=$((64 * 1024**3))
    if m0_genders_has_variable m0_disk_size_in_bytes ; then
        disk_size_in_bytes=$(m0_genders_value_of m0_disk_size_in_bytes)
    fi

    local dev_idx=$dev_idx_seed
    local devs
    local id
    for id in $(seq 1 $count) ; do
        local ddev_id="^d|$id_major:$id"
        local ddisk_id="^k|$id_major:$id"
        local ddiskv_id="^j|$id_major:$id"
        local ddev_obj="{0x64| (($ddev_id), $dev_idx, 4, 1, 4096, $disk_size_in_bytes, 3, 4, \"/dev/loop$(($dev_idx + 1))\")}"
        local ddisk_obj="{0x6b| (($ddisk_id), $ddev_id, [1: $pverid])}"
        local ddiskv_obj="{0x6a| (($ddiskv_id), $ddisk_id, [0])}"
        local dev="$ddev_obj,\n  $ddisk_obj,\n  $ddiskv_obj"
        devs="$devs${devs:+,\n  }$dev"
        ((++dev_idx)) || true
    done

    echo -e "$devs"
}

_build_ios_devs()
{
    local pool_width=$1
    local pverid=$2

    _build_devs $pool_width 1 0 $pverid
}

_build_cas_devs()
{
    local ipool_width=$1
    local pool_width=$2
    local pverid=$3

    _build_devs $ipool_width 20 $pool_width $pverid
}

_build_process_names()
{
    local proc_fid_con=$1
    local node
    local names=""
    local key=0

    for node in $(m0_get_nodes) ; do
        for s in $(m0_get_services $node) ; do
            local name="$proc_fid_con:$key"
            names="$names${names:+, }$name"
            ((++key)) || true
        done
    done

    echo -e "$names"
}

_build_process_objects()
{
    local proc_fid_con=$1
    local idx=0
    local node_idx=0
    local node
    local objs=""
    local rms_nr=$(m0_get_global_services rms | wc -w)

    for node in $(m0_get_nodes) ; do
        for s in $(m0_get_services $node) ; do
            local ep=$(m0_get_ep_of $s $node)
            local sname="$(m0_build_service_fid $s $node_idx)"
            local addb="$(m0_build_service_fid "addb2$idx" $node_idx)"
            local rms="$(m0_build_service_fid "rms$idx" $node_idx)"
            local fdmi="$(m0_build_service_fid "fdmi$idx" $node_idx)"
            local iscs="$(m0_build_service_fid "iscs$idx" $node_idx)"

            proc_name="$proc_fid_con:$idx"

            if [[ $s == ios* || $s == cas* ]] ; then
                local repair
                local rebalance
                local svc_name
                local prefix

                if [[ $s == ios* ]] ; then
                    svc_name="ios"
                    prefix="sns"
                else
                    svc_name="cas"
                    prefix="dix"
                fi

                repair="$(m0_build_service_fid ${s/$svc_name/${prefix}-repair} $node_idx)"
                rebalance="$(m0_build_service_fid ${s/$svc_name/${prefix}-rebalance} $node_idx)"

                obj="{0x72| (($proc_name), [1:3], 0, 0, 0, 0, "\"$ep\"", [7: $sname, $repair, $rebalance, $rms, $addb, $fdmi, $iscs])}"
            else
                obj="{0x72| (($proc_name), [1:3], 0, 0, 0, 0, "\"$ep\"", [5: $sname, $rms, $addb, $fdmi, $iscs])}"
            fi

            objs="$objs${objs:+, \n} $obj"
            ((idx++)) || true
        done
        ((node_idx++)) || true
    done

    echo -e "$objs"
}

_type_id()
{
    local s=$1
    local type_id;

    case $s in
        mds*)          type_id=@M0_CST_MDS ;;
        ios*)          type_id=@M0_CST_IOS ;;
        fdmi*)         type_id=@M0_CST_FDMI ;;
        confd)         type_id=@M0_CST_CONFD ;;
        rms*)          type_id=@M0_CST_RMS ;;
        ha)            type_id=@M0_CST_HA ;;
        sss)           type_id=@M0_CST_SSS ;;
        sns-repair)    type_id=@M0_CST_SNS_REP ;;
        sns-rebalance) type_id=@M0_CST_SNS_REB ;;
        addb*)         type_id=@M0_CST_ADDB2 ;;
        cas*)          type_id=@M0_CST_CAS ;;
        dix-repair)    type_id=@M0_CST_DIX_REP ;;
        dix-rebalance) type_id=@M0_CST_DIX_REB ;;
        iscs)          type_id=@M0_CST_ISCS ;;

#        cas*)          type_id=11 ;;
#        dix-repair)    type_id=12 ;;
#        dix-rebalance) type_id=13 ;;
    esac
    echo $type_id
}

_build_service_objects()
{
    local idx=0
    local node_idx=0
    local node
    local objs
    local ios_nr=0
    local cas_nr=0
    local rms_nr=$(m0_get_global_services rms | wc -w)

    for node in $(m0_get_nodes) ; do
        for s in $(m0_get_services $node) ; do
            local ep=$(m0_get_ep_of $s $node)
            local type_id=$(_type_id $s)
            local disk_ids='[0]'
            local name="$(m0_build_service_fid $s $node_idx)"

            if [[ $s == ios* ]] ; then
                local count=$(m0_get_global_services ios | wc -w)
                local disks_per_service=$(( $pool_width / $count ))

                disk_ids=$(_build_disk_ids_str 1 $(($ios_nr * $disks_per_service + 1)) $disks_per_service)
                ((ios_nr++)) || true
            fi

            if [[ $s == cas* ]] ; then
                local count=$(m0_get_global_services cas | wc -w)
                local disks_per_service=$(( $ipool_width / $count ))

                disk_ids=$(_build_disk_ids_str 20 $(($cas_nr * $disks_per_service + 1)) $disks_per_service)
                ((cas_nr++)) || true
            fi

            objs="$objs${objs:+,\n  }{0x73| (($name), $type_id, [1: "\"$ep\""], [0], $disk_ids)}"

            addb="$(m0_build_service_fid "addb2$idx" $node_idx)"
            type_id=$(_type_id "addb")
            objs="$objs${objs:+,\n  }{0x73| (($addb), $type_id, [1: "\"$ep\""], [0], [0])}"

            rms="$(m0_build_service_fid "rms$idx" $node_idx)"
            type_id=$(_type_id "rms")
            objs="$objs${objs:+,\n  }{0x73| (($rms), $type_id, [1: "\"$ep\""], [0], [0])}"

            fdmi="$(m0_build_service_fid "fdmi$idx" $node_idx)"
            type_id=$(_type_id "fdmi")
            objs="$objs${objs:+,\n  }{0x73| (($fdmi), $type_id, [1: "\"$ep\""], [0], [0])}"

            iscs="$(m0_build_service_fid "iscs$idx" $node_idx)"
            type_id=$(_type_id "iscs")
            objs="$objs${objs:+,\n  }{0x73| (($iscs), $type_id, [1: "\"$ep\""], [0], [0])}"

            if [[ $s == ios* || $s == cas* ]] ; then
                local repair
                local rebalance
                local svc_name
                local prefix

                if [[ $s == ios* ]] ; then
                    svc_name="ios"
                    prefix="sns"
                else
                    svc_name="cas"
                    prefix="dix"
                fi

                repair="$(m0_build_service_fid ${s/$svc_name/${prefix}-repair} $node_idx)"
                rebalance="$(m0_build_service_fid ${s/$svc_name/${prefix}-rebalance} $node_idx)"

                type_id=$(_type_id "${prefix}-repair")
                objs="$objs${objs:+,\n  }{0x73| (($repair), $type_id, [1: "\"$ep\""], [0], [0])}"

                type_id=$(_type_id "${prefix}-rebalance")
                objs="$objs${objs:+,\n  }{0x73| (($rebalance), $type_id, [1: "\"$ep\""], [0], [0])}"
            fi
            ((idx++)) || true
        done
        ((node_idx++)) || true
    done

    echo -e "$objs"
}

_build_pool_ids_str()
{
    local pool_ids
    local poolid=$1
    local mdpoolid=$2
    local imetapoolid=$3

    if m0_cas_enabled ; then
        pool_ids="[3: $poolid, $mdpoolid, $imetapoolid]"
    else
        pool_ids="[2: $poolid, $mdpoolid]"
    fi

    echo -e "$pool_ids"
}

# Construct local_conf mount option from genders file
m0_build_local_conf()
{
    local pool_width=$(m0_genders_value_of m0_pool_width)
    local ipool_width=$(m0_genders_value_of m0_imeta_pool_width)
    local data_units=$(m0_genders_value_of m0_data_units)
    local parity_units=$(m0_genders_value_of m0_parity_units)
    local spare_units=$(m0_genders_value_of m0_spare_units)
    local iparity_units=$(m0_genders_value_of m0_imeta_parity_units)
    local ispare_units=$(m0_genders_value_of m0_imeta_spare_units)

    local  root='^t|1:0'
    local  prof='^p|1:0'
    local  node='^n|1:2'
    local  proc='^r|1:3'

    local diskid='^k|1:1'
    local siteid='^S|1:6'
    local rackid='^a|1:6'
    local enclid='^e|1:7'
    local ctrlid='^c|1:8'
    local poolid='^o|1:9'
    local mdpoolid='^o|2:9'
    local imetapoolid='^o|20:1'
    local pverid='^v|1:10'
    local mdpverid='^v|2:10'
    local imetapverid
    m0_cas_enabled && imetapverid='^v|1:20' || imetapverid="(0, 0)"

    local sitevid="^j|1:$(($pool_width + 1))"
    local rackvid="^j|1:$(($pool_width + 2))"
    local enclvid="^j|1:$(($pool_width + 3))"
    local ctrlvid="^j|1:$(($pool_width + 4))"
    local mdsitevid="^j|2:$(($pool_width + 1))"
    local mdrackvid="^j|2:$(($pool_width + 2))"
    local mdenclvid="^j|2:$(($pool_width + 3))"
    local mdctrlvid="^j|2:$(($pool_width + 4))"
    local mddiskvid="^j|2:$(($pool_width + 5))"
    local imetasitevid="^j|20:$(($ipool_width + 1))"
    local imetarackvid="^j|20:$(($ipool_width + 2))"
    local imetaenclvid="^j|20:$(($ipool_width + 3))"
    local imetactrlvid="^j|20:$(($ipool_width + 4))"

    local site="{0x53| (($siteid), [1: $rackid], [1: $pverid])}"
    local rack="{0x61| (($rackid), [1: $enclid], [1: $pverid])}"
    local encl="{0x65| (($enclid), $node, [1: $ctrlid], [1: $pverid])}"
    local ctrl_pver_fids_str
    m0_cas_enabled && ctrl_pver_fids_str="[2: $pverid, $imetapverid]" || ctrl_pver_fids_str="[1: $pverid]"
    local ctrl="{0x63| (($ctrlid), $(_build_disk_fids_str 1 20 $pool_width $ipool_width), $ctrl_pver_fids_str)}"
    local pool="{0x6f| (($poolid), 0, [1: $pverid])}"
    local pver="{0x76| (($pverid), {0| ($data_units, $parity_units, $spare_units, $pool_width, [5: 0, 0, 0, 0, $parity_units], [1: $sitevid])})}"
    local sitev="{0x6a| (($sitevid), $siteid, [1: $rackvid])}"
    local rackv="{0x6a| (($rackvid), $rackid, [1: $enclvid])}"
    local enclv="{0x6a| (($enclvid), $enclid, [1: $ctrlvid])}"
    local ctrlv="{0x6a| (($ctrlvid), $ctrlid, $(_build_diskv_fids_str $pool_width 1))}"
    local mdpool="{0x6f| (($mdpoolid), 0, [1: $mdpverid])}"
    local mdpver="{0x76| (($mdpverid), {0| (1, 0, 0, 1, [5: 0, 0, 0, 0, 1], [1: $mdsitevid])})}"
    local mdsitev="{0x6a| (($mdsitevid), $siteid, [1: $mdrackvid])}"
    local mdrackv="{0x6a| (($mdrackvid), $rackid, [1: $mdenclvid])}"
    local mdenclv="{0x6a| (($mdenclvid), $enclid, [1: $mdctrlvid])}"
    local mdctrlv="{0x6a| (($mdctrlvid), $ctrlid, [1: $mddiskvid])}"
    local mddiskv="{0x6a| (($mddiskvid), $diskid, [0])}"
    local imetapool="{0x6f| (($imetapoolid), 0, [1: $imetapverid])}"
    local imetapver="{0x76| (($imetapverid), {0| (1, $iparity_units, $ispare_units, $ipool_width, [5: 0, 0, 0, 0, 1], [1: $imetasitevid])})}"
    local imetasitev="{0x6a| (($imetasitevid), $siteid, [1: $imetarackvid])}"
    local imetarackv="{0x6a| (($imetarackvid), $rackid, [1: $imetaenclvid])}"
    local imetaenclv="{0x6a| (($imetaenclvid), $enclid, [1: $imetactrlvid])}"
    local imetactrlv="{0x6a| (($imetactrlvid), $ctrlid, $(_build_diskv_fids_str $ipool_width 20))}"

    local proc_fid_con='^r|1'
    local proc_names=$(_build_process_names $proc_fid_con)
    local proc_objs=$(_build_process_objects $proc_fid_con)
    local procs=$(m0_get_global_services | wc -w)
    local service_objs=$(_build_service_objects)
    local services=$(echo "$service_objs" | wc -l)
    local cas_objs_nr
    m0_cas_enabled && cas_objs_nr=$(($ipool_width * 3 + 6)) || cas_objs_nr=0
    local local_conf=$(cat <<CONF_END
[$(($procs + $services + $pool_width * 3 + 13 + 7 + $cas_objs_nr)):
  {0x74| (($root), 1, (11, 22), $mdpoolid, $imetapverid, 1,
          [1: "$pool_width $data_units $parity_units $spare_units"],
          [1: $node],
          [1: $siteid],
          $(_build_pool_ids_str $poolid $mdpoolid $imetapoolid),
          [1: $prof], [0])},
  {0x70| (($prof), $(_build_pool_ids_str $poolid $mdpoolid $imetapoolid))},
  {0x6e| (($node), 16000, 2, 3, 2, [$procs: $proc_names])},
  $proc_objs,
  $service_objs,
  $(_build_ios_devs $pool_width $pverid),
  $site,
  $rack,
  $encl,
  $ctrl,
  $pool,
  $pver,
  $sitev,
  $rackv,
  $enclv,
  $ctrlv,
  $mdpool,
  $mdpver,
  $mdsitev,
  $mdrackv,
  $mdenclv,
  $mdctrlv,
  $mddiskv
CONF_END
)
    if m0_cas_enabled ; then
        local_conf+=$(cat <<CONF_END
,
  $(_build_cas_devs $ipool_width $pool_width $imetapverid),
  $imetapool,
  $imetapver,
  $imetasitev,
  $imetarackv,
  $imetaenclv,
  $imetactrlv
CONF_END
)
    fi

    local_conf+=']'

    echo "$local_conf"
}

# vim: tabstop=4 shiftwidth=4 expandtab filetype=sh
