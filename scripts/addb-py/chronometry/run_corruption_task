#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -e
set -x

SCRIPT_NAME=`echo $0 | awk -F "/" '{print $NF}'`
SCRIPT_PATH="$(readlink -f $0)"
SCRIPT_DIR="${SCRIPT_PATH%/*}"

if [[ -z "$MOTR_SRC_DIR" ]]; then
    MOTR_SRC_DIR="${SCRIPT_PATH%/*/*/*/*}"
fi

HALON_SRC_DIR="${MOTR_SRC_DIR}/../halon"
HARE_SRC_DIR="${MOTR_SRC_DIR}/../hare"

IO_WORKLOAD_TIMEOUT="12h"

# functions _check_root(), _check_is_cluster_online()
. ${SCRIPT_DIR}/common/common_funcs
# functions parse_nodes(), ...
. ${SCRIPT_DIR}/common/remote_execution
# check_motr_version()
. ${SCRIPT_DIR}/common/sw_ver_check_funcs

trap set_term SIGTERM

function set_term()
{
    echo "got termination request"
    kill -SIGTERM "$child"
    wait "$child"
}

function perform_fio_tests()
{
    if [[ -n "$FIO_TESTS_DIR" ]]; then
        _info "perform fio tests: $FIO_TESTS_DIR"
        $EX_SRV $SCRIPT_DIR/fio_tests $FIO_TESTS_DIR
        cluster_copy '/tmp/fio_results/*' "`pwd`"
    fi
}

function halon_build()
{
    pushd $HALON_SRC_DIR
    git clean -dfx
    git pull
    popd

    _info "Halon building"
    $HALON_SRC_DIR/scripts/h0 make &> halon_build.log
}

function hare_build()
{
    local curr_dir=$(pwd)
    pushd $HARE_SRC_DIR
    set +e
    git clean -dfx
    set -e
    _info "Hare building"
    make &> $curr_dir/hare_build.log
    popd
}

function motr_build()
{
    pushd $MOTR_SRC_DIR

    set +e
    git clean -dfx
    set -e

    [[ -z "$MOTR_GIT_COMMIT" ]] || {
        git checkout .
        git checkout $MOTR_GIT_COMMIT
    }

    if [[ -n "$NO_MOTR_TRACE" ]]; then
        git apply $SCRIPT_DIR/no_motr_trace.patch
    fi

    popd

    _info "motr clean"
    $MOTR_SRC_DIR/scripts/m0 clean

    _info "motr build options: $MOTR_BUILD_OPTIONS"
    _info "Building Motr commit $MOTR_GIT_COMMIT"
    MAKE_OPTS=-j$(nproc) CONFIGURE_OPTS="$MOTR_BUILD_OPTIONS" \
        $MOTR_SRC_DIR/scripts/m0 make &>motr_build.log
}

function run_io_workload()
{
    _info "io_workload starting"

    local motr_conf_param=""
    local nodes_param=""

    [[ -z "$MOTR_CONF" ]] || {
        echo "using motr conf params: $MOTR_CONF"
        motr_conf_param="-m \"${MOTR_CONF}\""
    }

    [[ -z "$SRV_CLI_MAP" ]] || {
        echo "srv-cli mapping: $SRV_CLI_MAP"
        nodes_param="-n \"${SRV_CLI_MAP}\""
    }

    [[ -z "$TELNET_ADDR" ]] || {
        echo "hardware address: $TELNET_ADDR"
        local addr_hw_param="--hw-addr $TELNET_ADDR"
    }

    [[ -z "$TELNET_LOGIN" ]] || {
        echo "hardware login: $TELNET_LOGIN"
        local login_hw_param="--hw-login $TELNET_LOGIN"
    }

    [[ -z "$TELNET_PASS" ]] || {
        echo "hardware password: $TELNET_PASS"
        local pass_hw_param="--hw-pass $TELNET_PASS"
    }

    [[ -z "$TIMEOUT_OPTION" ]] || {
        echo "using timeout value: $TIMEOUT_OPTION"
        local timeout_param="--timeout $TIMEOUT_OPTION"
    }

    for ((i = 0; i < $((${#WORKLOAD_CONF[*]})); i++)); do
        app=${APP_CONF[((i))]}
        conf=${WORKLOAD_CONF[((i))]}
        local workload_param="$workload_param -w \"$app\" \"$conf\""
    done

    eval "(MOTR_SRC_DIR=\"${MOTR_SRC_DIR}\" \
        $SCRIPT_DIR/corruption_workload \
        $workload_param $motr_conf_param -c \"${SKLN_CLUSTER_CONF_DIR}\" \
        $addr_hw_param $login_hw_param $pass_hw_param \
        $disable_addb_param $nodes_param \
        ${WORKLOAD_OPTS} $timeout_param) &"

    child=$!

    mark_pid $child
    while kill -0 "$child" >/dev/null 2>&1; do
        sleep 30
    done
}

function check_and_stop_cluster()
{
    set +e
    $EX_SRV systemctl stop halond
    $EX_SRV systemctl stop halon-cleanup
    $EX_SRV systemctl stop s3authserver
    $EX_SRV systemctl stop slapd
    $EX_SRV systemctl stop haproxy

    $EX_SRV systemctl start halon-cleanup
    $EX_SRV pkill -9 m0d
    $EX_SRV pkill -9 m0crate
    $EX_SRV pkill -9 -f s3server
    $EX_SRV pkill -9 -f s3bench
    $EX_SRV pkill AuthServer
    $EX_SRV systemctl start motr-cleanup
    $EX_SRV $HALON_SRC_DIR/scripts/h0 fini
    $EX_SRV lsmod | grep -q m0ctl && ( rmmod m0ctl || echo "Failed to unload m0ctl module" )
    $EX_SRV lsmod | grep -q m0tr && ( rmmod m0tr || echo "Failed to unload m0tr module" )
    $EX_SRV lsmod | grep -q m0gf && ( rmmod m0gf || echo "Failed to unload m0gf module" )
    $EX_SRV lsmod | grep -q galois && ( rmmod galois || echo "Failed to unload galois module" )
    set -e
}

function check_mandatory_args()
{
    [[ -n "$WORKLOAD_CONF" && -n "$PATH_FOR_ARTIFACTS" \
    && -n "$MOTR_GIT_COMMIT" \
    && -n "$SKLN_CLUSTER_CONF_DIR" && -n "$SRV_CLI_MAP" ]] || {
        echo -e "missed mandatory parameter\nUse --help option"
        exit 1
    }
}

function usage()
{
    cat << EOF

Usage: $SCRIPT_NAME [options]
    -w, --workload_config     workload options. It is mandatory option. Has
                              overrides of m0crate config file default
                              parameters.
                              Example: "IOSIZE=4k BLOCK_SIZE=4k"

    -p, --result-path         path to save results artifacts. It is mandatory
                              option.

    -m, --motr_config         options for override motr config file values.
                              There is string with values which replace current
                              values in file /etc/sysconfig/motr.
                              Example: "MOTR_TRACED_M0D=yes MOTR_M0D_OPTS=1"

    -g, --motr-git-commit     commit for motr building

    -b, --motr-build-options  options for motr building

    -n, --nodes               List of cluster nodes (both clients and servers)

    -d, --no-addb-dumps       disable addb2 stobs dumping

        --hw-addr             Address of hardware device used as storage of cluster.
                              If this address is specified then it will be used for
                              collection of hardware configuration information.

        --hw-login            Hardware device telnet login

        --hw-pass             Hardware device telnet password

        --timeout             Time limit for test execution. May be defined in days,
                              hours, minutes and seconds.
                              Examles: 1d, 4h, 50m, 1200s

        --hare                use Hare as HA service

    -h, --help                this help

Example:
    $SCRIPT_NAME -w m0crate "IOSIZE=4k BLOCK_SIZE=4k NR_THREADS=1" -p ./results

EOF
}

function check_arg_value()
{
    [[ $# -gt 1 ]] || {
        echo -e "Incorrect use of the option $1\nUse --help option"
        exit 1
    }
}

function parse_commits_ids()
{
    pushd $MOTR_SRC_DIR
    git fetch origin
    git fetch origin "+refs/changes/*:refs/remotes/origin/changes/*"
    #remove "commit=" part if exist
    MOTR_GIT_COMMIT=$(echo "$MOTR_GIT_COMMIT" | sed 's/commit=//')
    if [[ "$MOTR_GIT_COMMIT" == "master" ]]; then
        MOTR_GIT_COMMIT=$(git rev-parse origin/master)
    fi
    popd
}

function save_commits_ids() {
    echo "$MOTR_GIT_COMMIT" > motr.commit
    echo "$MOTR_BUILD_OPTIONS" > motr.build_options
}

function mark_pid() {
    local active_pid=$1
    echo "Active PID: $active_pid"
    echo "active_pid: $active_pid" > /tmp/taskq_active_pid
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -w|--workload_config)
            check_arg_value $1 $2 $3
            APP_CONF+=("$2")
            WORKLOAD_CONF+=("$3")
            shift
            shift
            ;;
        -c|--cluster-configs)
            check_arg_value $1 $2
            SKLN_CLUSTER_CONF_DIR="$2"
            shift
            ;;
        -m|--motr_config)
            check_arg_value $1 $2
            MOTR_CONF=$2
            shift
            ;;
        -g|--motr-git-commit)
            check_arg_value $1 $2
            MOTR_GIT_COMMIT=$2
            shift
            ;;
        -b|--motr-build-options)
            check_arg_value $1 $2
            MOTR_BUILD_OPTIONS=$2
            shift
            ;;
        -p|--result-path)
            check_arg_value $1 $2
            PATH_FOR_ARTIFACTS=$2
            shift
            ;;
        --no-m0trace-files)
            WORKLOAD_OPTS+=" $1";
            ;;
        --no-m0trace-dumps)
            WORKLOAD_OPTS+=" $1";
            ;;
        --no-addb-stobs)
            WORKLOAD_OPTS+=" $1";
            ;;
        -d|--no-addb-dumps)
            WORKLOAD_OPTS+=" $1";
            ;;
        --no-m0play-db)
            WORKLOAD_OPTS+=" $1";
            ;;
        --no-motr-trace)
            NO_MOTR_TRACE=1
            ;;
        -n|--srv-cli-map)
            check_arg_value $1 $2
            SRV_CLI_MAP=$2
            shift
            ;;
        --hw-addr)
            TELNET_ADDR="$2"
            shift
            ;;
        --hw-login)
            TELNET_LOGIN="$2"
            shift
            ;;
        --hw-pass)
            TELNET_PASS="$2"
            shift
            ;;
        --timeout)
            TIMEOUT_OPTION="$2"
            shift
            ;;
        -f|--fio-tests)
            FIO_TESTS_DIR="$2"
            shift
            ;;
        --hare)
            HARE_OPTION="--hare"
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo -e "Invalid option: $1\nUse --help option"
            exit 1
            ;;
    esac
    shift
done

_check_root
check_mandatory_args
parse_nodes

echo "creating $PATH_FOR_ARTIFACTS"
mkdir -p $PATH_FOR_ARTIFACTS
pushd $PATH_FOR_ARTIFACTS
echo "task is started in `pwd`"

check_and_stop_cluster
perform_fio_tests
# TODO: Perform LNet tests also - between servers
parse_commits_ids
save_commits_ids

if ! check_motr_version $MOTR_GIT_COMMIT "$MOTR_BUILD_OPTIONS"; then
    motr_build

    if [[ -n "$HARE_OPTION" ]]; then
        hare_build
    else
        halon_build
    fi
fi

run_io_workload
popd
echo "task is finished"
