#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#set -x
set -e

SCRIPT_NAME=`echo $0 | awk -F "/" '{print $NF}'`
SCRIPT_PATH="$(readlink -f $0)"
SCRIPT_DIR="${SCRIPT_PATH%/*}"

SYSTEM_HOSTS_FILE="/etc/hosts"

. ${SCRIPT_DIR}/functions

function remove_hostnames() {
    local ignore_comment="/^\s*#/!"

    for hostname in $HOSTNAMES; do
        local remove_hostname="s/ $hostname//"
        sed -r -i "$ignore_comment$remove_hostname" $HOSTS_FILE
    done

    local ip_pattern="[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
    local remove_ip_without_hostname="/^\s*$ip_pattern\s*$/d"
    sed -r -i "$remove_ip_without_hostname" $HOSTS_FILE
}

function add_hostnames() {
    for hostname in $HOSTNAMES; do
        # search of existing entry with IP
        if grep "^\s*$IP_ADDR" $HOSTS_FILE > /dev/null; then
            # add hostname to an existing entry
            SED_CMD="/^\s*$IP_ADDR/s/$/ $hostname/"
            sed -r -i "$SED_CMD" $HOSTS_FILE
        else
            # add new entry
            if [[ -n "`tail -1 $HOSTS_FILE`" ]]; then
                local lf='\n'
            fi

            echo -n -e "$lf$IP_ADDR $hostname" >> $HOSTS_FILE
        fi
    done
}

function make_tmp_file() {
    HOSTS_FILE=$(mktemp)
}

function delete_tmp_file() {
    rm -f $HOSTS_FILE
}

function usage() {
    cat << EOF

Usage: $SCRIPT_NAME options

required options:

    -n, --hostnames     List of hostnames

    -m, --srv-cli-map   Server-client map

other options:

    -h, --help          This help

example:
    $SCRIPT_NAME -n "s3.seagate.com seagatebucket.s3.seagate.com" -m "smc33-m09=smc41-m09 smc34-m09=smc42-m09"

EOF
}

function parse_parameters() {
    while [[ $# -gt 0 ]]; do

        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -n|--hostnames)
                HOSTNAMES="$2"
                shift
                ;;
            -m|--srv-cli-map)
                S3_SRV_CLI_MAP="$2"
                shift
                ;;
            *)
                echo "invalid option: $1"
                exit 1
                ;;
        esac

        shift
    done
}

function check_parameters() {
    if [[ -z "$HOSTNAMES" || -z "$S3_SRV_CLI_MAP" ]]; then
        echo "required parameter not passed. Use --help options"
        exit 1
    fi
}

function get_ip() {
    local cli_node_hostname=$1
    local srv_node_hostname=$(hostname)

    if [[ "$cli_node_hostname" == "$srv_node_hostname" ]]; then
        IP_ADDR="127.0.0.1"
    else
        IP_ADDR=$(ssh $cli_node_hostname "host $srv_node_hostname" \
            | grep -o -P "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
    fi
}

function patch_client_hosts() {
    local nodes=$(echo $CLI_NODES | sed "s/,/ /g")

    make_tmp_file

    for node in $nodes; do
        scp ${node}:$SYSTEM_HOSTS_FILE $HOSTS_FILE
        get_ip $node
        remove_hostnames
        add_hostnames
        scp $HOSTS_FILE ${node}:$SYSTEM_HOSTS_FILE
    done

    delete_tmp_file
}

parse_parameters "$@"
check_parameters
parse_s3_nodes_map $S3_SRV_CLI_MAP
patch_client_hosts
