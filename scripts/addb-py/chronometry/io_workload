#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#set -x
set -e

SCRIPT_NAME=`echo $0 | awk -F "/" '{print $NF}'`
SCRIPT_PATH="$(readlink -f $0)"
SCRIPT_DIR="${SCRIPT_PATH%/*}"

if [[ -z "$MOTR_SRC_DIR" ]]; then
    MOTR_SRC_DIR="${SCRIPT_PATH%/*/*/*/*}"
fi

HALON_SRC_DIR="${MOTR_SRC_DIR}/../halon"
HARE_SRC_DIR="${MOTR_SRC_DIR}/../cortx-hare"

CURENT_DIR=`pwd`
ARTIFACTS_TOP_DIR=$CURENT_DIR/m0crate_artifacts_`date '+%Y-%m-%d_%H.%M.%S'`

OVERRIDE_MOTR_CONF_PARAMS=""
MOTR_CONF_FILE="/etc/sysconfig/motr"
HALOND_CONF_FILE="/etc/sysconfig/halond"
HALON_FACTS_FILE="/etc/halon/halon_facts.yaml"
MOTR_ROLE_MAPPINGS_FILE="/etc/halon/motr_role_mappings"

SRV_CLI_MAP="$(hostname)=$(hostname)" #single node cluster by default

# functions check_root(), _check_is_cluster_online()
. ${SCRIPT_DIR}/common/common_funcs
# functions parse_nodes(), ...
. ${SCRIPT_DIR}/common/remote_execution

HA_TYPE="halon" # by default

APPS=(
    "m0crate"
    "m0crate"
)

CONFS=(
    "LAYOUT_ID=9 IOSIZE=1g BLOCK_SIZE=32m NR_THREADS=16 NR_OBJS=16"
    "LAYOUT_ID=9 IOSIZE=1g BLOCK_SIZE=32m NR_THREADS=16 NR_OBJS=16"
)

function stop_hare_cluster()
{
    set +e
    hctl shutdown || {
        _warn "Cluster stop FAILED! Trying to go further."
    }
    
    $EX_SRV systemctl reset-failed hare-hax
    set -e
}

function stop_halon_cluster()
{
    set +e
    hctl motr stop || {
        _warn "Cluster stop FAILED! Trying to go further."
    }
    $EX_SRV systemctl stop halond
    $EX_SRV systemctl stop halon-cleanup
    set -e
}

function cleanup_cluster()
{
    set +e
    $EX_SRV systemctl start halon-cleanup
    $EX_SRV pkill -9 m0crate
    $EX_SRV pkill -9 m0d
    $EX_SRV pkill -9 -f s3server
    $EX_SRV systemctl start motr-cleanup
    $EX_SRV $HALON_SRC_DIR/scripts/h0 fini
    systemctl stop hare-consul-agent
    $EX_SRV systemctl reset-failed hare-hax
    $EX_SRV "pushd $HARE_SRC_DIR && make uninstall && popd"
    $EX_SRV lsmod | grep -q m0ctl && ( rmmod m0ctl || echo "Failed to unload m0ctl module" )
    $EX_SRV lsmod | grep -q m0tr && ( rmmod m0tr || echo "Failed to unload m0tr module" )
    $EX_SRV lsmod | grep -q m0gf && ( rmmod m0gf || echo "Failed to unload m0gf module" )
    $EX_SRV lsmod | grep -q galois && ( rmmod galois || echo "Failed to unload galois module" )
    set -e

    $EX_SRV 'rm -rf /var/motr/*'
    $EX_SRV 'rm -rf /var/crash/*'
}

function setup_ha()
{
    if [[ "$HA_TYPE" == "halon" ]]; then
        _info "setup Halon"
        $EX_SRV $HALON_SRC_DIR/scripts/h0 init

        # install halon/motr service to cluster
        $EX_SRV systemctl stop halond
        $EX_SRV systemctl start motr-cleanup
        $EX_SRV systemctl start halon-cleanup
         
   else
        _info "setup Hare"
        CURRENT_CDF="/tmp/cdf.yaml"
        $EX_SRV $MOTR_SRC_DIR/scripts/install-motr-service -l

        for s in $(echo "$SRV_NODES" | sed 's/,/ /g'); do
            pdsh -S -w $s "pushd $HARE_SRC_DIR && make devinstall && popd"
        done

    fi
}

function restart_cluster()
{
    _info 'cluster restart'
    cleanup_cluster
    setup_ha

    setup_m0_configs
    setup_ha_configs

    bootstrap_cluster
}

function setup_m0_configs()
{
    _info "copying cluster config files from $CLUSTER_CONFIGS_DIR"

    cp $CLUSTER_CONFIGS_DIR/motr /tmp/motr
    override_motr_conf /tmp/motr $OVERRIDE_MOTR_CONF_PARAMS
    $EX_SRV scp $(hostname):/tmp/motr $MOTR_CONF_FILE
    rm -f /tmp/motr
}

function setup_ha_configs()
{
   # TODO: Add support for dev VMs.   
   if [[ "$HA_TYPE" == "halon" ]]; then
        _info "setup Halon configs"
        # halon_facts.yaml
        case $(echo $SRV_NODES | sed "s/,/ /g" | wc -w) in
            1)
                local node=$(echo $SRV_NODES | awk -F '.' '{print $1}')
                $EX_SRV cp $CLUSTER_CONFIGS_DIR/halon_facts.$node.io.yaml $HALON_FACTS_FILE
                ;;
            2)
                $EX_SRV cp $CLUSTER_CONFIGS_DIR/halon_facts.dual.io.yaml $HALON_FACTS_FILE
                ;;
        esac

        $EX_SRV scp $(hostname):/tmp/motr_role_mappings /etc/halon/motr_role_mappings
   else
        _info "setup Hare configs"
        case $(echo $SRV_NODES | sed "s/,/ /g" | wc -w) in
            1)
                local node=$(echo $SRV_NODES | awk -F '.' '{print $1}')
                cp $CLUSTER_CONFIGS_DIR/cdf.$node.io.yaml $CURRENT_CDF
                ;;
            2)
                cp $CLUSTER_CONFIGS_DIR/cdf.dual.io.yaml $CURRENT_CDF
                ;;
        esac

   fi
}

function bootstrap_cluster()
{
    if [[ "$HA_TYPE" == "halon" ]]; then
        $EX_SRV systemctl start halond
        hctl motr bootstrap
        wait_for_motr_start
    else
        hctl bootstrap --mkfs $CURRENT_CDF
    fi
}

function create_artifacts_dir() {
    # Create local dir
    local num=$1
    shift
    local app=$1
    shift

    ARTIFACTS_DIR=`echo t$num-$app-$@ | sed -r -e 's/\s+/__/g' | sed -r 's/=/-/g'`
    mkdir -p $ARTIFACTS_DIR

    # Create temporary dir on remote nodes
    $EX_SRV rm -fr /tmp/io_workload_arts/ || true
    $EX_SRV mkdir -p /tmp/io_workload_arts/
}

function dump_m0traces() {
    for filename in m0trace.*; do
        _info "dump $filename"
        $MOTR_SRC_DIR/utils/trace/m0trace -i ${filename} \
            -o ${filename}.txt 2>/dev/null
        rm $filename
    done
}

function save_hardware_conf() {
    if [[ -n "$TELNET_ADDR" ]]; then

        if [[ -z "$TELNET_LOGIN" || -z "$TELNET_PASS" ]]; then
            _err "missed parameter --hw-login or --hw-pass"
            exit 1
        fi

        _info "saving of hw hardware config"
        $SCRIPT_DIR/get_hw_conf.exp $TELNET_ADDR $TELNET_LOGIN \
                                      $TELNET_PASS > hw_conf.json
    fi
}

function save_cli_artifacts() {
    _info 'Save_cli_artifacts'
    local app=$1

    if [[ $app == "m0crate" ]]; then
        client_copy '/tmp/m0crate.log' "$(pwd)/m0crate.%h.log"

        if [[ -z "$NO_M0TRACE_DUMPS" ]]; then
            dump_m0traces
        fi

        if [[ -z "$NO_ADDB_DUMPS" ]]; then
            M0_SRC_DIR="$MOTR_SRC_DIR" $SCRIPT_DIR/$P0_SCRIPT dump cli
        fi
    fi

    cluster_copy '/tmp/io_workload_arts/*' $(pwd)
}

function save_motr_artifacts() {
    local ios_m0trace_dir="m0trace_ios"
    local configs_dir="configs"
    local crash_dir="crash"

    if [[ "$HA_TYPE" == "hare" ]]; then
        # local variables for Hare cluster
        local ioservice_list=$(cat $ARTIFACTS_TOP_DIR/hctl-status.stop \
            | grep ioservice | sed 's/\[.*\]//' | awk '{print $2}')
    fi

    mkdir -p $configs_dir
    
    pushd $configs_dir
    cp $MOTR_CONF_FILE ./
    
    if [[ "$HA_TYPE" == "halon" ]]; then
        #Halon configs
        cp $HALOND_CONF_FILE ./
        cp $HALON_FACTS_FILE ./
        cp $MOTR_ROLE_MAPPINGS_FILE ./
    else
        mv $CURRENT_CDF ./
    fi

    popd # configs_dir

    mkdir -p $crash_dir
    pushd $crash_dir
    for srv in $(echo $SRV_NODES | tr ',' ' '); do
        mkdir -p $srv
        scp -r $srv:/var/crash $srv
        ssh $srv -T 'rm -rf /var/crash/*'
    done
    popd

    mkdir -p $ios_m0trace_dir
    local ioservice_fid=`hctl motr status | grep "\[.*\].*ioservice" \
                        | awk '{print $3}'`

    pushd $ios_m0trace_dir
    if [[ -z "$NO_M0TRACE_FILES" ]]; then
        set +e

        if [[ "$HA_TYPE" == "halon" ]]; then
            #Halon
            cluster_copy '/var/motr/m0d-$(hctl motr status \
                | grep "\[.*\].*ioservice" | grep $(hctl motr status \
                | grep $(hostname) -A 1 \
                | grep -E -o "([0-9]+[.][0-9]+[.][0-9]+[.][0-9]+)") \
                | awk '"'"'{print $3}'"'"')/m0trace.*' $(pwd)
        else
            #Hare
            local cur_dir=$(pwd)
            local cur_hostname=$(hostname)
            for ios_fid in $ioservice_list; do
                local ios_dir="/var/motr/m0d-$ios_fid"
                local srv_node_cmd="if [ -e $ios_dir ]; then scp $ios_dir/m0trace.* ${cur_hostname}:${cur_dir} ; fi"
                $EX_SRV $srv_node_cmd
            done
        fi

        set -e

        if [[ -z "$NO_M0TRACE_DUMPS" ]]; then
            dump_m0traces
        fi
    fi

    popd # $ios_m0trace_dir

    if [[ -z "$NO_ADDB_STOBS" ]] && [[ -z "$NO_ADDB_DUMPS" ]]; then
        # Dump servers

        if [[ "$HA_TYPE" == "halon" ]]; then
            #Halon
            $EX_SRV mkdir -p /tmp/m0dumps/
            $EX_SRV "pushd /tmp/m0dumps && M0_SRC_DIR=\"$MOTR_SRC_DIR\" $SCRIPT_DIR/$P0_SCRIPT dump srv && popd"
            cluster_copy '/tmp/m0dumps/*' $(pwd)
            $EX_SRV rm -fr /tmp/m0dumps
        else
            #Hare
            local cur_dir=$(pwd)
            local cur_hostname=$(hostname)
            for ios_fid in $ioservice_list; do
                local ios_dir="/var/motr/m0d-$ios_fid"
                local ios_addb_stob="$ios_dir/addb-stobs/o/100000000000000:2"
                local pid=$(echo $ios_addb_stob | sed -E 's/.*[x]([a-z0-9]*)[/].*/\1/')
                srv_node_cmd="if [ -e $ios_addb_stob ]; then scp $ios_addb_stob ${cur_hostname}:${cur_dir} ; fi"
                $EX_SRV $srv_node_cmd
                set -x
                ${MOTR_SRC_DIR}/utils/m0addb2dump -f  -- "$cur_dir/100000000000000:2" > dumps_${pid}.txt
                set +x
                rm -f $cur_dir/100000000000000:2
            done
        fi
    fi

    $EX_SRV rm -fr /tmp/io_workload_arts/
}

function save_srv_artifacts() {
    local m0cli_dir="m0cli"
    local motr_art_dir="m0d"
    local hw_conf_dir="hw_conf"

    mkdir -p $motr_art_dir
    pushd $motr_art_dir
    save_motr_artifacts
    popd

    mkdir -p $hw_conf_dir
    pushd $hw_conf_dir
    save_hardware_conf
    popd

    # Generate m0play.db
    if [[ -z "$NO_ADDB_STOBS" ]] && [[ -z "$NO_ADDB_DUMPS" ]] && [[ -z "$NO_M0PLAY_DB" ]]; then
        M0_SRC_DIR="$MOTR_SRC_DIR" $SCRIPT_DIR/$P0_SCRIPT db \
            $m0cli_dir/*/dump* $motr_art_dir/dump*
    fi
}

function check_and_stop_cluster()
{
    if _check_is_hare_cluster_online; then
        _info "stopping Hare cluster before test"
        stop_hare_cluster
    fi

    if _check_is_cluster_online; then
        _info "stopping cluster before test"
        stop_halon_cluster
    fi
}

function stop_cluster()
{
    if [[ "$HA_TYPE" == "halon" ]]; then
        stop_halon_cluster
    else
        stop_hare_cluster
    fi
}

function wait_for_motr_start() {
    echo "wait for motr start"

    while ! _check_is_cluster_online
    do
        if _check_is_cluster_failed; then
            _err "cluster is failed"
            exit 1
        fi

        sleep 5
    done
}

function override_app_conf() {
    [[ -z "$APPS_OVERRIDED" ]] && {
        _info "overriding workload applications"
        APPS=()
        APPS_OVERRIDED=1
    }
    APPS+=("$1")
}

function override_workload_conf() {
    [[ -z "$CONFS_OVERRIDED" ]] && {
        _info "overriding workload configurations"
        CONFS=()
        CONFS_OVERRIDED=1
    }
    CONFS+=("$1")
}

function override_motr_conf() {
    _info "overriding motr config parameters: $@"

    local conf=$1
    shift

    for param in $@; do
        local param_name=`echo "${param}" | awk -F "=" '{print $1}'`
        local param_value=`echo "${param}" | awk -F "=" '{print $2}'`

        sed -i "/.*${param_name}.*/d" $conf
        param_value="$param_name=$param_value #changed by io_workload script"
        echo -e "\n$param_value" >> $conf
    done
}

function start_glances() {
    _info "starting glances"
    $EX_SRV 'glances -q --export-csv /tmp/glances.$(hostname -s).csv' &
    GLANCES_PID=$!
}

function stop_glances() {
    _info "stopping glances"
    set +e
    kill -9 $GLANCES_PID
    $EX_SRV pkill -9 -f glances
    set -e

    cluster_copy '/tmp/glances.*' $(pwd)
    $EX_SRV 'rm -f /tmp/glances.*'
}

function start_stat_utils() {
    _info "starting dstat"
    $EX_SRV 'dstat --output /tmp/io_workload_arts/$(hostname -s)-dstat.log.csv \
        &> /tmp/io_workload_arts/$(hostname -s)-dstat.log &'

    _info "starting iostat"
    $EX_SRV 'iostat 1 &> /tmp/io_workload_arts/$(hostname -s)-iostat.log &'
}

function stop_stat_utils() {
    _info "stopping dstat"
    set +e
    $EX_SRV pkill dstat
    set -e

    _info "stopping iostat"
    set +e
    $EX_SRV pkill iostat
    set -e
}

function run_m0crate() {
    if [[ -z "$M0CRATE_APPS" ]]; then
        M0CRATE_APPS=1
    fi

    local m0crate_tmp=$SCRIPT_DIR/m0crate_tmp-$(mktemp -u XXXXXXX)
    mkdir -p $m0crate_tmp

    $EX_CLI "pushd $m0crate_tmp && APPS=$M0CRATE_APPS \
        M0_SRC_DIR=\"$MOTR_SRC_DIR\" $SCRIPT_DIR/$P0_SCRIPT run m0crate $@ \
        &> /tmp/m0crate.log && popd"

    mv $m0crate_tmp/addb* ./
    mv $m0crate_tmp/m0trace* ./
    mv $m0crate_tmp/test_io*.yaml ./
    rm -r $m0crate_tmp
}

function run_client() {
    local app=$1
    shift

    _info "running test..."

    case $app in
        m0crate)
            run_m0crate $@
            ;;
        sleep)
            sleep $@
            ;;
        "exit")
            exit $@
            ;;
    esac
}

function run_tests() {
    ulimit -Hn 100000
    ulimit -Sn 100000

    local m0cli_dir="m0cli"
    restart_cluster
    mkdir -p $ARTIFACTS_TOP_DIR
    pushd $ARTIFACTS_TOP_DIR

    mkdir -p $m0cli_dir
    pushd $m0cli_dir
    start_glances
    for ((i = 0; i < $((${#CONFS[*]})); i++)); do
        app=${APPS[((i))]}
        conf=${CONFS[((i))]}

        echo "app: "$app
        echo "conf: "$conf

        # In some cases conf may be empty
        if [[ -z "$app" ]]; then
            continue
        fi

        create_artifacts_dir $i $app $conf
        pushd $ARTIFACTS_DIR
        start_stat_utils
        _info "running test..."
        run_client $app $conf
        stop_stat_utils
        save_cli_artifacts $app
        popd
    done
    stop_glances
    popd #m0cli_dir

    set +e
    
    if [[ "$HA_TYPE" == "halon" ]]; then
       hctl motr status > hctl-motr-status.stop
       hctl motr stop || {
           _warn "Cluster stop FAILED! Trying to go further."
       }
    else
       hctl status > hctl-status.stop
       hctl stop || {
           _warn "Cluster stop FAILED! Trying to go further."
       }
    fi

    set -e

    save_srv_artifacts
    popd #ARTIFACTS_TOP_DIR

    stop_cluster
    cleanup_cluster
}

function usage() {
    cat << EOF

Usage: $SCRIPT_NAME [options]
    -c, --cluster-configs  directory containing config files for cluster.

        --config           specifying file for generation halon facts.

    -w, --workload_config  workload options. Overrides default m0crate config
                           file parameters.
                           Example: "IOSIZE=4k BLOCK_SIZE=4k"

    -m, --motr_config      motr options. Overrides default motr config file
                           parameters.
                           Example: "MOTR_TRACED_M0D=yes MOTR_M0D_OPTS=1"

        --num-m0crate-apps number of m0crate instances.
                           This option allows to run multiple instances
                           of m0crate

    -n, --srv-cli-map      Mapping of server nodes to client nodes.
                           Format: "srv-node1-name=cli-node1-name srv-node2-name=cli-node2-name..."
                           Example: "smc33-m09=smc41-m09 smc34-m09=smc42-m09"

    -d, --disable-addb-dump disable addb2 stobs dumping

        --hw-addr          Address of device used as storage of cluster.
                           If this address is specified then it will be used for
                           collection of hardware configuration information.

        --hw-login         Hardware device telnet login

        --hw-pass          Hardware device telnet password

    -h, --help             this help

Example:
    $SCRIPT_NAME -w "IOSIZE=4k BLOCK_SIZE=4k NR_THREADS=1"

EOF
}

function check_arg_value() {
    [[ $# -gt 1 ]] || {
        echo -e "Incorrect use of the option $1\nUse --help option"
        exit 1
    }
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --config)
            check_arg_value $1 $2

            [[ -f "$2" ]] || {
                echo -e "File not exist: $2"
                exit 1
            }
            PATH_TO_CONFIG=$2
            shift
            ;;
        -w|--workload_config)
            check_arg_value $1 $2 $3
            override_app_conf "$2"
            override_workload_conf "$3"
            shift
            shift
            ;;
        -m|--motr_config)
            check_arg_value $1 $2
            OVERRIDE_MOTR_CONF_PARAMS=$2
            shift
            ;;
        -c|--cluster-configs)
            check_arg_value $1 $2

            [[ -d $2 ]] || {
                echo "Directory not exist: $2"
                exit 1
            }

            CLUSTER_CONFIGS_DIR=$2
            shift
            ;;
        --num-m0crate-apps)
            check_arg_value $1 $2
            M0CRATE_APPS=$2
            shift
            ;;
        --no-m0trace-files)
            NO_M0TRACE_FILES=1;
            ;;
        --no-m0trace-dumps)
            NO_M0TRACE_DUMPS=1;
            ;;
        --no-addb-stobs)
            NO_ADDB_STOBS=1
            ;;
        -d|--no-addb-dumps)
            NO_ADDB_DUMPS=1
            ;;
        --no-m0play-db)
            NO_M0PLAY_DB=1;
            ;;
        -n|--srv-cli-map)
            SRV_CLI_MAP="$2"
            shift
            ;;
        --hw-addr)
            TELNET_ADDR="$2"
            shift
            ;;
        --hw-login)
            TELNET_LOGIN="$2"
            shift
            ;;
        --hw-pass)
            TELNET_PASS="$2"
            shift
            ;;
        --hare)
            HA_TYPE="hare"
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo -e "Invalid option: $1\nUse --help option"
            exit 1
            ;;
    esac
    shift
done

if [[ "$HA_TYPE" == "halon" ]]; then
    P0_SCRIPT="p0"
else
    P0_SCRIPT="p0_hare"
fi

parse_nodes

_check_root
check_and_stop_cluster
run_tests

exit 0
