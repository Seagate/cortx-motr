#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script reports any public funcnition, which is present in
# libmotr-altogether.so, but not listed in motr-pub.api file. Only
# functions, started which "m0_" prefix or which contain "tlist" in their names,
# are reported.


#
# Global vars
#

PROG_NAME=$(basename $0)

pub_api='motr/motr-pub.api'
libmotr='motr/.libs/libmotr-altogether.so'


#
# Usage
#

help() {
    [ $1 -eq 0 ] && usage || usage >&2
    exit $1
}

usage() {
    cat <<EOF
Usage: $PROG_NAME [-h|--help] [-a|--api motr-pub.api] [-l|--libmotr libmotr.so]

    -a|--api            A text file with the list of names of public motr
                        functions. By default it's "$pub_api".

    -l|--libmotr        libmotr.so library binary, by default it's
                        "$libmotr".

    -h|--help           Print this help screen.
EOF
}


#
# Parse CLI options
#

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o ha:l: --long help,api:,libmotr: -n "$PROG_NAME" -- "$@")

[ $? -eq 0 ] || exit 1

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) help 0 ;;
        -a|--api) pub_api=$2; shift 2 ;;
        -l|--libmotr) libmotr=$2; shift 2 ;;
        --) shift ; break ;;
        *) echo "getopt: internal error..." ; exit 1 ;;
    esac
done


#
# Main
#

[[ -e $libmotr ]] || exit 0 # do nothing if libmotr-altogether.so doesn't exist

echo -n 'Checking motr public API... '

# exit immediately if one the commands exits with a non-zero status
set -e

# to have identical sorting order, we need to sort file's content using the same
# locale
_sort() { LC_ALL=C sort; }
_comm() { LC_ALL=C comm "$@"; }

readonly IGNORED_FUNCS='__dummy_function|_fini|_init'
func_list=$(mktemp)
nm "$libmotr" | awk '$2 == "T" {print $3}' |
    grep -Ev "^($IGNORED_FUNCS)$" |
    _sort > $func_list

pub_api_sorted=$(mktemp)
sed -e '/^#/d' -e '/^$/d' -e 's/^\*//' $pub_api | _sort > $pub_api_sorted

ids_unexpected=$(_comm -13 $pub_api_sorted $func_list)
ids_missing=$(_comm -23 $pub_api_sorted $func_list)
if [[ -n "$ids_missing" ]]; then
	tolerated=$(mktemp)
	sed -n 's/^\*//p' $pub_api | _sort > $tolerated
	if [[ -s $tolerated ]]; then
		ids_missing=$(echo "$ids_missing" | _comm -23 - $tolerated)
	fi
fi

[[ -n "${ids_unexpected}${ids_missing}" ]] && echo FAIL || echo OK

rc=0
[[ -z "$ids_unexpected" ]] || {
	echo "*ERROR* Not found in \`$pub_api':" $ids_unexpected
    rc=1
}
[[ -z "$ids_missing" ]] || {
	echo "*ERROR* Present in \`$pub_api' but not defined:" $ids_missing
    rc=1
}

rm $func_list $pub_api_sorted ${tolerated:-}

exit $rc
