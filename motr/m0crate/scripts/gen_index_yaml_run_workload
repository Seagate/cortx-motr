#!/usr/bin/bash
#
# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

#
#	script: m0crate/scripts/gen_index_yaml_run_workload
#
#	- script uses m0crate/scripts/m0crate-index.yaml.template as template
#	  and runs m0crate kv workload.
#	- Update scripts/m0crate-index.yaml.template according to your usage.
# 	- you can specify multiple key_sizes and value_sizes based upon your requirement
#		for example: keys=(16, 32, 64) and
#			     values=(1024, 2192, 4096)
#		(Note: sizes are in bytes)
#	- also specify uniq start_of_indexfid for each kv test run, later this is used as counter.
#	- if you have 3*3 key_size and value_size combination in this situation
#	  there will be 9 workloads to run,
#	- script will generate uniq indexfids by increamenting start_of_indexfid. In above 3*3 scenario
#	  consecutive 9 indexfids will get generated.
#
#	- input: set key_sizes, value_sizes and start_of_indexfid
#	- output: create workload_logs in curr dir, then creates timestamp base dir in which
#		  configs and output dir gets created.
#		  configs will have all .yaml files created in the workload execution by
#		  gen_index_yaml_run_workload script.
#		  outout will have workload execution logs in .csv and text format.

script_dir=`dirname $(readlink -f  $0)`
M0CRATE=$script_dir/../m0crate

if [ ! -f "$M0CRATE" ]; then
	echo "$M0CRATE not exists."
	exit
fi

keys=(64 128 256 512 1024)
values=(1024 4096 8192 16384 32768)
start_of_indexfid=0

time_dir=workload_logs/`date +%d%m%y-%H%M%S`
config_dir=$time_dir/configs
output_dir=$time_dir/output
mkdir -p $config_dir $output_dir

log_csv_file=$output_dir/kv_run_output.csv
test_logs=$output_dir/test_run.log

#method to execute kvs workload
function run_workload() {
	klen=$1
	vlen=$2
	yaml_file=$3
	$M0CRATE -S $yaml_file 2>&1 | tee temp.log
	cat temp.log >> $test_logs
	test_time=`awk '/result: total_s/{ print $3 $5 $11","}
			/result: PUT/{print $4 $6 $8","}
			/result: GET/{print $4 $6 $8","}
			/result: NEXT/{print $4 $6 $8","}
			/result: DEL/{print $4 $6 $8""}' temp.log | tr '\n' ' '`

	echo "$klen, $vlen, $test_time" >> $log_csv_file
	rm -f temp.log
}

function generate_single_yaml_from_template() {
	indexfid=$1
	klen=$2
	vlen=$3
	template_file="$script_dir/m0crate-index.yaml.template"
	yaml_file="$config_dir/m0crate-index-$klen-$vlen.yaml"
	sed "s/INDEXFID/$indexfid/g;s/KEYSIZE/$klen/g;s/VALUESIZE/$vlen/g" $template_file > $yaml_file
	#echo "run_workload $klen $vlen $yaml_file"
	run_workload $klen $vlen $yaml_file
}

function  generate_yaml_files_and_run_worklod() {
	for klen in ${keys[@]}
	do
		for vlen in ${values[@]}
		do
			generate_single_yaml_from_template $start_of_indexfid $klen  $vlen
			start_of_indexfid="$((start_of_indexfid+1))"
		done
	done
}
function write_csv_header() {
	echo  -e "KEY_SIZE, VALUE_SIZE, TOTAL_TIME_S, TIME_PER_OP_NS, TOTAL_OPS," \
		"TOTAL_PUT_TIME_S, TIME_PER_PUT_OP_NS, PUT_OPS_CNT, " \
		"TOTAL_GET_TIME_S, TIME_PER_GET_OP_NS, GET_OPS_CNT, " \
		"TOTAL_NEXT_TIME_S, TIME_PER_NEXT_OP_NS, NEXT_OPS_CNT, " \
		"TOTAL_DEL_TIME_S, TIME_PER_DEL_OP_NS, DEL_OPS_CNT" >> $log_csv_file
}
write_csv_header
generate_yaml_files_and_run_worklod
