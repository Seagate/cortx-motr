#!/usr/bin/env perl
#
# Copyright (c) 2017-2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script generates Motr protocol description from xcode dump files.

# For detailed description and usage information please refer to the POD
# documentation at the end of file, after the __END__ marker.

BEGIN {

# check that all required external modules are available and display a hint to
# the user about how they can be installed using default package management
# system, if they are missing

    my @required_modules = (
        {
            name       => 'File::Find::Rule',
            debian_pkg => 'libfile-find-rule-perl',
            redhat_pkg => 'perl-File-Find-Rule'
        },
        {
            name       => 'YAML::XS',
            debian_pkg => 'libyaml-libyaml-perl',
            redhat_pkg => 'perl-YAML-LibYAML'
        },
        {
            name       => 'List::MoreUtils',
            debian_pkg => 'liblist-moreutils-perl',
            redhat_pkg => 'perl-List-MoreUtils'
        },
    );
    my $some_module_is_missing = 0;

    for my $m (@required_modules) {

        my $module = $m->{name};

        $module =~ s#::#/#g;
        $module .= '.pm';

        no warnings 'uninitialized';
        if (eval { require $module; 1; } ne 1) {
            use warnings 'uninitialized';
            $some_module_is_missing = 1;
            print "$m->{name} perl module is missing\n"
                  . "   It can be installed manually or using package management system:\n"
                  . "     debian based:  apt-get install $m->{debian_pkg}\n"
                  . "     red-hat based: yum install $m->{redhat_pkg}\n"
                  . "     manually:      cpanm $m->{name}\n\n";
        }
    }

    die "Please, install all required modules\n"
        if $some_module_is_missing;
}

# enable all features of Modern Perl, almost the same as done by Modern::Perl
# module, but doesn't require it as dependency
use 5.010;
use strict;
use warnings;

# core modules
use Carp;
use Getopt::Long qw( :config no_ignore_case );
use Pod::Usage;
use Fatal qw( open close );
use English qw( -no_match_vars ); # avoids regex performance penalty
use File::Spec::Functions qw( splitpath splitdir catdir abs2rel );
use Cwd qw( realpath );
use Scalar::Util qw( looks_like_number );

# external modules (not included into base perl distribution)
use File::Find::Rule;
use YAML::XS;
use List::MoreUtils qw( any );
#use Data::Dumper;

# global variables
my %cli_option = (
    output_file  =>  '-', # STDOUT by default
    use_pager    =>  1,
    domain       =>  {},  # any domain
);

sub usage
{
    pod2usage(-verbose => 0);
}

sub help
{
    pod2usage(-verbose => 1);
}

sub man
{
    pod2usage(-verbose => 2);
}

sub process_cli_options
{
    usage() if !GetOptions(
        'o|output=s' =>  \$cli_option{output_file},
        'pager!'     =>  \$cli_option{use_pager},

        'be'         =>  sub { $cli_option{domain}{be}   = 1 },
        'conf'       =>  sub { $cli_option{domain}{conf} = 1 },
        'rpc'        =>  sub { $cli_option{domain}{rpc}  = 1 },

        'h|help'     =>  \&help,
        'usage'      =>  \&usage,
        'man'        =>  \&man
    );

    return;
}

sub parent_dir
{
    my $parent_dir = '.';
    my (undef, $script_dir, undef) = splitpath( realpath($PROGRAM_NAME) );
    my @dirs = splitdir($script_dir);

    if (@dirs) {
        splice @dirs, -2;
        $parent_dir = abs2rel( catdir(@dirs) );
    }

    return $parent_dir;
}

sub print_member
{
    my $output_fh = shift;
    my $item      = shift;
    my $index     = shift;

    say {$output_fh}
        ' 'x4 . sprintf '%4i %-20s %-20s %4u [%#lx]'
                        , $index
                        , $item->{name}
                        , lc $item->{xc_type} =~ s/(?:^&M0_XT_)|(?:_xc$)//rxms
                        # gccxml provides offset and size values in bits
                        , $item->{offset} / 8
                        , $item->{attribute}{xc_tag_num} // $item->{attribute}{xc_tag} // 0;
}

sub main
{
    process_cli_options();

    local $File::Find::dont_use_nlink = 1;

    my @items;
    my @dump_files = File::Find::Rule->or(
                        File::Find::Rule->directory->name(qw/ut ub it/)->prune->discard,
                        File::Find::Rule->file()->name('*_xc.yml')
                     )->in( parent_dir() );

    for my $file (@dump_files) {
        push @items, @{ YAML::XS::LoadFile($file) };
    }

    my $output_fh;
    if ($cli_option{output_file} eq '-' and $cli_option{use_pager}) {
        open $output_fh, "| less -SM";
    }
    else {
        open $output_fh, ">$cli_option{output_file}";
    }

    my @domains = scalar %{ $cli_option{domain} } ? sort keys %{ $cli_option{domain} } : qw(all);
    my @filterd_and_sorted_items
        = map  { $_->[0] }
          sort { $a->[1] cmp $b->[1] }
          map  { [ $_, $_->{name} ] }
          grep { # filter items by domains if requested
                 ! scalar %{ $cli_option{domain} }
                 || exists $_->{attribute}{xc_domain}
                 && any { exists $cli_option{domain}{$_} }
                        split /\|/, $_->{attribute}{xc_domain}
               }
               @items;

    say {$output_fh} 'Motr binary protocol';
    say {$output_fh} "Domains: @domains";
    say {$output_fh} 'Total structures: ' . scalar @filterd_and_sorted_items . "\n";

    for my $item (@filterd_and_sorted_items) {
        say {$output_fh} sprintf '%-30s %8.8s %6zi'
                    , $item->{name}
                    , lc($item->{attribute}{xc_atype} =~ s/^M0_XA_//rxms)
                    # gccxml provides offset and size values in bits
                    , $item->{size} / 8;

        my $index = 0;
        for my $member (@{ $item->{members} }) {
            if (defined $member->{type} && $member->{type} =~ /union/) {
                # if member type is union, then output it's members instead of
                # the union itself
                for my $union_member (@{ $member->{members} }) {
                    $union_member->{offset} = $member->{offset};
                    print_member($output_fh, $union_member, $index++)
                }
            }
            else {
                print_member($output_fh, $member, $index++)
            }
        }

        say {$output_fh} "end $item->{name}";
    }

    return;
}

main();

__END__

=head1 NAME

xcode/proto - display Motr xcode protocol based on the output of gccxml

=head1 SYNOPSIS

xcode/proto [-o|--output FILE] [--no-pager] [--be] [--conf] [-rpc]

=head1 DESCRIPTION

This utility displays Motr xcode protocol in a human-friendly format. It can
filter protocol data structures by domain they belong to. Multiple domain
options can be specified simultaneously. By default, structures from all domains
are displayed.

=head1 OPTIONS

=over 8

=item B<-o|--output=I<ofile>>

Output file name, if omitted then STDOUT is used by default.

=item B<--no-pager>

Don't use pager (C<less>) to display results.

=item B<--be|--conf|--rpc>

Display only those protocol data structures which belong to the requested
domain.

=item B<-h|--help>

Print this help summary.

=item B<--usage>

Print usage line of this summary.

=item B<--man>

Print the complete manpage.

=back

=cut
