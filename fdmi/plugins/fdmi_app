#!/usr/bin/env python3
#
# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# This is the FDMI sample application. It serves as a hub for the FDMI
# records delivered fdmi_sample_plugin C-program via stdout. To do so
# it gathers the cluster configuration with 'hctl status' command,
# forks fdmi_sample_plugin and waits for the FDMI events in JSON form.
# The reason to use it is simply because it is much easier to parse data
# and develop new features in python in compare to C.

# For now it is just a demo that prints FDMI records to console, but
# except this it can perform records de-dup and for example, replication
# coordination by means of set of the replication python programs that
# perform actual data move.

import subprocess
import signal
import shlex
import sys
import json
import codecs

# Global cluster info including information required for running
# fdmi_sample_plugin C-program.
cluster_info = dict()

# Global key-value cache used for records de-duplication. KV pairs
# are available by the kv[keystr].
# keystr = '{}{}{}'.format(op, fid[9:], cr_key)
kv_records = dict()


# Global ordered list of keystr, which is used by 'kv_records'.
# This is the LRU list. New item is always appended.
# If MAX is reached, the first element is removed.
keystr_LRU = []
#The Maximal elemets in this LRU. For testing purpose,
# this number can be set to a small number, e.g. 10.
MAX_KEYSTRS = 10240


# Global list of fdmi_sample_plugin processes that this program
# is communicating.
processes = []


def str_decode(encoded):
    if encoded is None:
        return None
    if encoded == '0':
        return encoded
    return codecs.decode(encoded, 'hex')


# Process the FDMI records in form of JSON and perform some useful actions
# such as de-dup, logging and/or sending to the replicator program for data
# move.
def process_fdmi_record(kv_record):
    kvs = json.loads(kv_record)
    fid = kvs.get('fid')
    if fid is None:
        print('Invalid fid in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    cr_key = str_decode(kvs.get('cr_key'))
    if cr_key is None:
        print('Invalid cr_key in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    cr_val = str_decode(kvs.get('cr_val'))
    if cr_val is None:
        print('Invalid cr_val in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    op = kvs.get('opcode')
    if op is None:
        print('Invalid opcode in kv_record {}'.format(kv_record), file=sys.stderr)
        return

    kv = {
        'op':     op,
        'fid':    fid,
        'cr_key': cr_key,
        'cr_val': cr_val
    }

    # This string is used to be the KEY in the `kv_records`
    # 'fid': '<5400000600012345:123450>' the most significant chars are
    # fid type and fid location. They are excluded.
    keystr = '{}{}{}'.format(op, fid[9:], cr_key)
    while (len(keystr_LRU) > MAX_KEYSTRS):
        del kv_records[keystr_LRU[0]]
        del keystr_LRU[0]

    # Check de-dup records
    kv_i = kv_records.get(keystr)
    if kv_i is not None:
        #print('dup: {}'.format(kv), file=sys.stdout, flush = True)
        return
    else:
        print('new: {}'.format(kv), file=sys.stdout, flush = True)
        kv_records[keystr] = kv
        keystr_LRU.append(keystr)
        return


# Handle SIGNT and SIGTERM. Stop the underlying processes and exit.
def signal_handler(sig, frame):
    print('CTRL + C pressed', file=sys.stderr)
    print('Stopping all fdmi_sample_plugin processes...', file=sys.stderr)
    for p in processes:
        p.send_signal(sig)
        p.wait()
    sys.exit(0)


# Fork the process and capture its output
def execute_command_and_get_output(cmd):
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True)
    stdout, stderr = proc.communicate()
    output_var = str(stdout, 'utf-8')
    return output_var


# fdmi_sample_plugin -l 192.168.52.53@tcp:12345:4:1 -h 192.168.52.53@tcp:12345:1:1
# -p 0x7000000000000001:0x37 -f 0x7200000000000001:0x19 -g 0x6c00000000000001:0x81
def get_plugin_cmd(args):
    # fdmi_sample_plugin = "/path/to/cortx-motr/fdmi/plugins/fdmi_sample_plugin"
    opts =  " -l " + cluster_info['local_endpoint']
    opts += " -h " + cluster_info['ha_endpoint']
    opts += " -p " + cluster_info['profile_fid']
    opts += " -f " + cluster_info['process_fid']
    opts += " -g " + cluster_info['fdmi_filter_fid']
    return args.plugin_path + opts


# Gather the cluster info with 'hctl status --json' command, which is
# need for running fdmi_sample_plugin. In case that --filter-id is omitted
# then parse /etc/motr/confd.xc to find the filter-id for fdmi_sample_plugin
def get_cluster_info(args):
    info = dict()
    cmd = '{} status --json'.format(args.hctl_path)
    output = execute_command_and_get_output(cmd)
    if output is None or len(output) == 0:
        print('Failed to execute `{}`. Please make sure the path to '
              '{} is correct and the Motr cluster is running'.format(cmd, args.hctl_path), file=sys.stderr)
        return None

    cluster_js = json.loads(output)
    if cluster_js is None:
        print('Failed to fetch cluster info.', file=sys.stderr)
        return None

    profiles = cluster_js.get('profiles')
    if profiles is None or len(profiles) == 0:
        print('Failed to fetch profiles from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None

    profile_fid = str(profiles[0].get('fid'))
    if profile_fid is None or len(profile_fid) == 0:
        print('Failed to fetch profiles[0]/fid from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None
    info['profile_fid'] = profile_fid

    nodes_data = cluster_js.get('nodes')
    if nodes_data is None or len(nodes_data) == 0:
        print('Failed to fetch nodes from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None
    services = nodes_data[0].get('svcs')
    if services is None or len(services) == 0:
        print('Failed to fetch nodes/svcs from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None

    for svc in services:
        if svc['name'] == 'hax':
            ha_endpoint = str(svc.get('ep'))
            if ha_endpoint is None or len(ha_endpoint) == 0:
                print('Invalid nodes/svcs/hax/ep in cluster info:\n{}'.format(cluster_js), file=sys.stderr)
                return None
            info['ha_endpoint'] = ha_endpoint

        svc_name = str(svc.get('name'))
        if svc_name is None or len(svc_name) == 0:
            print('Invalid nodes/svcs/name in cluster info:\n{}'.format(cluster_js), file=sys.stderr)
            return None

        # Always using the first m0client
        if svc_name == 'm0_client':
            local_endpoint = str(svc.get('ep'))
            if local_endpoint is None or len(local_endpoint) == 0:
                print('Invalid nodes/svcs/m0_client/ep in cluster info:\n{}'.format(cluster_js),
                      file=sys.stderr)
                return None
            info['local_endpoint'] = local_endpoint

            process_fid = str(svc.get('fid'))
            if process_fid is None or len(process_fid) == 0:
                print('Invalid nodes/svcs/m0_client/fid in cluster info:\n{}'.format(cluster_js),
                      file=sys.stderr)
                return None
            info['process_fid'] = process_fid
            break

    # Filter id is used by Motr FDMI subsystem for identifying the
    # FDMI plugins, because there are possible more than one.
    # If the --filter-id is omitted then this program is looking
    # for the correct filter id in /etc/motr/confd.xc config file.
    if args.filter_id is None:
        with open(args.config_path) as f:
            for s in f.readlines():
                # Example: ' {0x6c| ((^l|1:81), 2, ^l|1:81, "", ^n|1:3, ^v|1:66, [1: "Bucket-Name"],
                # [1: "192.168.12.2@tcp:12345:4:1"])},'
                # The fid we need is 0x6c00000000000001:0x81 in this particular example.
                if s.startswith(' {0x6c| ((^l|'):
                    s = s[15:]
                    s = s[:s.index(')')]
                    fdmi_filter_fid = f"0x6c00000000000001:{int(s):#x}"
                    info['fdmi_filter_fid'] = fdmi_filter_fid
                    break
    else:
        info['fdmi_filter_fid'] = args.filter_id

    if info.get('profile_fid') is None:
        print('Failed to get Profile FID from the cluster info.', file=sys.stderr)
        return None
    if info.get('ha_endpoint') is None:
        print('Failed to get Hare endpoint from the cluster info.', file=sys.stderr)
        return None
    if info.get('process_fid') is None:
        print('Failed to get client process fid from the cluster info.', file=sys.stderr)
        return None
    if info.get('local_endpoint') is None:
        print('Failed to get local client endpoint from the cluster info.', file=sys.stderr)
        return None
    if info.get('fdmi_filter_fid') is None:
        print('Failed to get fdmi filter id from the cluster config.', file=sys.stderr)
        return None

    return info


# For the plugin C-program and wait for data on stdout.
def listen_on_command(command):
    global processes
    p = subprocess.Popen(shlex.split(command), stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p is None:
        print('Failed to run {}'.format(command), file=sys.stderr)
        return -1
    processes.append(p)

    print('Listening for FDMI events on:\n  {}'.format(command), file=sys.stderr)
    while True:
        output = p.stdout.readline()
        if output is not None:
            fid = "fid"
            record = output.decode("utf-8")
            if fid in record:
                process_fdmi_record(record)

        rc = p.poll()
        if rc is not None:
            print('Exiting because fdmi_sample_plugin exited with:', file=sys.stderr)
            print('  error code = {}'.format(rc), file=sys.stderr)
            _, error = p.communicate()
            if error is not None:
                error = error.decode('utf-8')
            if error is not None and len(error) > 0:
                print('  error text = {}'.format(error), file=sys.stderr)
            break

    return p.poll()


def main(args):
    global cluster_info
    einval = 22

    if (args.local_endpoint is not None and
           args.ha_endpoint is not None and
           args.profile_fid is not None and
           args.process_fid is not None and
           args.filter_id   is not None    ):
	# All required info is from arguments
        cluster_info = dict()
        cluster_info['local_endpoint']  = args.local_endpoint
        cluster_info['ha_endpoint']     = args.ha_endpoint
        cluster_info['profile_fid']     = args.profile_fid
        cluster_info['process_fid']     = args.process_fid
        cluster_info['fdmi_filter_fid'] = args.filter_id

    else:
        # Otherwise, query from `hctl` and conf.xc
        if args.config_path is None and args.filter_id is None:
            print('Either --config-path or --filter-id is required.', file=sys.stderr)
            sys.exit(einval)

        config_path = args.config_path
        if config_path is None:
            config_path = 'using filter-id'

        filter_id = args.filter_id
        if filter_id is None:
            filter_id = 'using config-path'

        print('Using the following settings:', file=sys.stderr)
        print('  plugin-path = {}'.format(args.plugin_path), file=sys.stderr)
        print('  hctl-path = {}'.format(args.hctl_path), file=sys.stderr)
        print('  config-path = {}'.format(config_path), file=sys.stderr)
        print('  filter-id = {}'.format(filter_id), file=sys.stderr)

	# Now query from `hctl` and conf.xc
        cluster_info = get_cluster_info(args)

    if cluster_info is None:
        sys.exit(einval)

    print('Cluster info:', file=sys.stderr)
    print('  {}'.format(cluster_info), file=sys.stderr)

    print('Register SIGINT signal handler', file=sys.stderr)
    signal.signal(signal.SIGINT, signal_handler)

    # Execute fdmi_sample_plugin with cluster info in loop and wait for
    # the FDMI events in form of JSON metadata.
    listen_on_command(get_plugin_cmd(args))


if __name__ == '__main__':
    import argparse

    ap = argparse.ArgumentParser(description=__doc__)
    ap.add_argument('-pp', '--plugin-path', required=False,
                    help='path to fdmi_sample_plugin executable',
                    type=str, default='./fdmi_sample_plugin')
    ap.add_argument('-hp', '--hctl-path', required=False, help='path to hctl executable',
                    type=str, default='hctl')
    ap.add_argument('-cp', '--config-path', required=False, help='path to confd.xc file',
                    type=str, default='/etc/motr/confd.xc')
    ap.add_argument('-fi', '--filter-id', required=False, help='plugin filter id',
                    type=str)

    ap.add_argument('-le', '--local-endpoint', required=False, help='local endpoint',
                    type=str)
    ap.add_argument('-he', '--ha-endpoint', required=False, help='HA endpoint',
                    type=str)
    ap.add_argument('-pf', '--profile-fid', required=False, help='Profile FID',
                    type=str)
    ap.add_argument('-sf', '--process-fid', required=False, help='Process FID',
                    type=str)

    main(ap.parse_args())
