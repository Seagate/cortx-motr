#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -eu
#set -x
export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '

### XXX TODO:
### 0. Add failure tests. They are very useful in finding deficiencies
###    of Motr error-handling code.
###    - See m0t1fs/linux_kernel/st/st in git history for how they used
###      to be implemented.
###    - Add a failure test corresponding to MOTR-322.
###    - Add a scenario that will guard against MOTR-804 regressions.
### 1. Start m0d via Expect wrapper.

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-/var/motr/sandbox.conf-st}

M0_TRACE_IMMEDIATE_MASK=${M0_TRACE_IMMEDIATE_MASK:-!rpc,formation,fop,memory}
M0_TRACE_LEVEL=${M0_TRACE_LEVEL:-info+}
M0_TRACE_PRINT_CONTEXT=${M0_TRACE_PRINT_CONTEXT:-}

MAX_RPC_MSG_SIZE=163840
TM_MIN_RECV_QUEUE_LEN=2
PROFILE='<0x7000000000000001:0>'        # profile-0
PROCESS_M0D='<0x7200000000000001:1>'    # process-1
PROCESS_M0T1FS='<0x7200000000000001:4>' # process-4

error() { echo "$@" >&2; stop 1; }

M0_SRC_DIR=`readlink -f $0`
M0_SRC_DIR=${M0_SRC_DIR%/*/*}

. $M0_SRC_DIR/utils/functions # die, sandbox_init, report_and_exit

M0CONFGEN=$M0_SRC_DIR/utils/m0confgen

start() {
   _init
   services_start
}

stop() {
   services_stop
   _fini ${1:-}
   report_and_exit conf-st ${1:-$?}
}

_init() {
    lnet_up
    m0_modules_insert
    sandbox_init # changes current directory to $SANDBOX_DIR
    mkdir mnt
}

_fini() {
    rmdir mnt
    sandbox_fini ${1:-}
    m0_modules_remove
}

confdb() {
    cat <<EOF
(root-0 verno=1 rootfid=(11, 22) mdpool=pool-0 imeta_pver=(0, 0)
    mdredundancy=2 params=["pool_width=3", "nr_data_units=1",
                           "nr_parity_units=1", "unit_size=4096"]
    nodes=[node-0] sites=[site-2] pools=[pool-0]
    profiles=[profile-0] fdmi_flt_grps=[])
(profile-0 pools=[pool-0])
(node-0 memsize=16000 nr_cpu=2 last_state=3 flags=2
    processes=[process-1, process-4])
(process-1 cores=[2] mem_limit_as=0 mem_limit_rss=0 mem_limit_stack=0
    mem_limit_memlock=0 endpoint="$M0D1_ENDPOINT"
    services=[service-0, service-1, service-2, service-3, service-4,
    service-6])
(process-4 cores=[1] mem_limit_as=0 mem_limit_rss=0 mem_limit_stack=0
    mem_limit_memlock=0 endpoint="$M0T1FS_ENDPOINT" services=[service-5])
##
## *CAUTION*  Do not use symbolic form of service types here.
##            I.e., use 'type=4' format, not 'type=@M0_CST_RMS'.
##
## Rationale: spiel.confstr() returns numeric service types.
## cmp(1) command at the end of this ST will fail, unless service types
## are specified numerically in this conf string.
##
(service-0 type=3 endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-1 type=4 endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-2 type=1 endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[sdev-0])
(service-3 type=2 endpoints=["$M0D1_ENDPOINT"] params=[]
    sdevs=[sdev-1, sdev-2, sdev-3, sdev-4])
(service-4 type=6 endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-5 type=4 endpoints=["$M0T1FS_ENDPOINT"] params=[] sdevs=[])
(service-6 type=10 endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[sdev-5])
(sdev-0 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev0")
(sdev-1 dev_idx=1 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev1")
(sdev-2 dev_idx=2 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev2")
(sdev-3 dev_idx=3 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev3")
(sdev-4 dev_idx=0 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev4")
(sdev-5 dev_idx=4 iface=4 media=2 bsize=4096 size=320000000000 last_state=3
    flags=4 filename="/dev/sdev5")
(site-2 racks=[rack-0] pvers=[pver-0])
(rack-0 encls=[enclosure-0] pvers=[pver-0])
(enclosure-0 node=node-0 ctrls=[controller-0] pvers=[pver-0])
(controller-0 drives=[drive-0, drive-1, drive-2, drive-3, drive-4]
    pvers=[pver-0])
(drive-0 dev=sdev-1 pvers=[pver-0])
(drive-1 dev=sdev-2 pvers=[pver-0])
(drive-2 dev=sdev-3 pvers=[pver-0])
(drive-3 dev=sdev-4 pvers=[pver-0])
(drive-4 dev=sdev-5 pvers=[pver-0])
(pool-0 pver_policy=0 pvers=[pver-0])
(pver-0 N=1 K=1 P=3 tolerance=[0, 0, 0, 0, 1] sitevs=[objv-2:0])
(objv-2:0 real=site-2 children=[objv-0])
(objv-0 real=rack-0 children=[objv-1])
(objv-1 real=enclosure-0 children=[objv-2])
(objv-2 real=controller-0 children=[objv-3, objv-4, objv-5])
(objv-3 real=drive-0 children=[])
(objv-4 real=drive-1 children=[])
(objv-5 real=drive-2 children=[])
EOF
}

services_start() {
    local CONF_FILE=conf.xc
    local OPTS="-f $PROCESS_M0D -H $M0D1_ENDPOINT
-m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN -F -D db -T AD -S stobs
-A linuxstob:addb-stobs -e lnet:$M0D1_ENDPOINT -c $CONF_FILE -w 3"

    confdb | $M0CONFGEN >$CONF_FILE || error 'm0confgen failed'

    $M0_SRC_DIR/utils/mkfs/m0mkfs $OPTS >>mkfs.log || error 'm0mkfs failed'

    ## XXX TODO: Start m0d via Expect wrapper. You never know how long to sleep.
    $M0_SRC_DIR/motr/m0d $OPTS >>m0d.log 2>&1 &
    local PID=$!
    sleep 2
    kill -0 $PID 2>/dev/null ||
        error "Failed to start m0d. See $SANDBOX_DIR/m0d.log for details."
}

services_stop() { pkill m0d && wait || true; }

_mount() {
    mount -t m0t1fs \
          -o pfid="$PROCESS_M0T1FS",profile="$PROFILE",ha=$M0D1_ENDPOINT \
          none $SANDBOX_DIR/mnt || return $?
}

_spiel_setup() {
    local rc=0

    cd $M0_SRC_DIR/utils/spiel
    python2 setup.py "$@" || rc=$?
    cd - >/dev/null
    return $rc
}

spiel() {
    local files=$SANDBOX_DIR/installed-files
    case "$*" in
        init)
            _spiel_setup -q install --home $SANDBOX_DIR \
                         --install-lib $SANDBOX_DIR/lib64/python \
                         --record $files;;
        run)
            PYTHONPATH=$SANDBOX_DIR/lib64/python \
                      $M0_SRC_DIR/utils/spiel/m0spiel \
                      -l $M0_SRC_DIR/motr/.libs/libmotr.so \
                      -c $SPIEL_ENDPOINT -s $M0D1_ENDPOINT;;
        fini)
            ## Redirect stderr to hide these warnings:
            ## | 'build/bdist.linux-x86_64' does not exist -- can't clean it
            ## | 'build/scripts-2.7' does not exist -- can't clean it
            _spiel_setup -q clean -a 2>/dev/null

            ## If Motr is updated between two runs of this ST, Python module
            ## will become outdated.  Delete Python module so that it is
            ## rebuilt afresh.
            xargs rm -f <$files
            rm -f $files;;
        *)
            die "${FUNCNAME[0]}: Invalid usage";;
    esac
}

## Keep the audience engaged.
say() { echo "$@" | tee -a $SANDBOX_DIR/m0d.log; }

usage() {
    cat <<EOF
Usage: ${0##*/} [COMMAND]

Supported commands:
  run      run system tests (default command)
  insmod   insert Motr kernel modules: m0tr.ko, galois.ko
  rmmod    remove Motr kernel modules
  sstart   start Motr user-space services
  sstop    stop Motr user-space services
  help     display this help and exit
EOF
}

## -------------------------------------------------------------------
## main()
## -------------------------------------------------------------------

[ `id -u` -eq 0 ] || die 'Must be run by superuser'

case "${1:-}" in
    run|'') ;;
    insmod) lnet_up; m0_modules_insert; exit;;
    rmmod) m0_modules_remove; exit;;
    sstart) start; exit;;
    sstop) services_stop; sleep 3; _fini; exit;;
    help) usage; exit;;
    *) usage >&2; die;;
esac

start

echo 8 >/proc/sys/kernel/printk  # Print kernel messages to the console.

say 'Test: m0t1fs'
_mount || stop $?
umount $SANDBOX_DIR/mnt

say 'Test: spiel.confstr'
spiel init
{
    cat <<EOF
rc = spiel.cmd_profile_set('$PROFILE')
if rc != 0:
    sys.exit('Cannot set profile $PROFILE; rc=%d' % rc)

rc = spiel.rconfc_start()
if rc != 0:
    sys.exit('Cannot start rconfc; rc=%d' % rc)

try:
    print spiel.confstr()
except Exception, e:
    import traceback
    traceback.print_exc()
    raise SystemExit(e) # other exception types are caught by 'code' module
finally:
    spiel.rconfc_stop()
EOF
    echo # Python interpreter needs an empty line at the very end.
} | spiel run >conf_ask.xc || stop $?
cmp <($M0CONFGEN -f xcode -t confgen conf.xc | sort) \
    <($M0CONFGEN -f xcode -t confgen conf_ask.xc | sort) ||
    error 'Configuration data is corrupted'
spiel fini

stop
