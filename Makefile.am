################################################################################
#                              Quick start guide                            {{{1
################################################################################

#
# This is the main motr makefile. It's responsible for building all user-space
# programs and libraries.
#
# It uses non-recursive make technique which is superior in many aspects to
# "recursive make". For more information on "non-recursive vs. recursive make",
# please refer to an excellent article "Recursive Make Considered Harmful" by
# Peter Miller - http://miller.emu.id.au/pmiller/books/rmch/
#
# A task of building kernel-space modules is delegated to the top-level Kbuild
# makefile, which is automatically invoked by this makefile after user-space
# build is complete.
#
# This makefile uses 'include' directives of make program to source other
# sub-makefiles (Makefile.sub), which are located in subdirectories and
# describe what should be built in each particular subdir.
#
# Normally, sub-makefiles should contain only *_HEADERS, *_SOURCES, EXTRA_DIST,
# CLEANFILES, FF_FILES, XC_FILES, and CONFXC_FILES variables, plus targets,
# which describe some local dependencies or do some local preparations (like
# creating symlinks and so on).
#
# All other primary variables (in automake sense), like *_PROGRAMS,
# *_LTLIBRARIES, *_CFLAGS, *_LDADD, _LIBADD and global targets should be defined
# in this main makefile.
#
# Motr's public headers should be listed in *_HEADERS variables, while
# internal headers, which are not part of the public interface, should be listed
# in *_SOURCES variables.
#
# In order to allow kernel- and user- space build in the same directories, we
# force renaming of output user-space *.o files by prepending target name;
# automake automatically does this if per-target flags are used; we use
# _CPPFLAGS and define a dummy M0_TARGET macro for this purpose.


################################################################################
#                            Automake configuration                         {{{1
################################################################################

# control verbosity level of make depending on 'V' command-line argument and
# --enable-silent-rules option of configure script
make_verbose   = $(make_verbose_$(V))
make_verbose_  = $(make_verbose_$(AM_DEFAULT_VERBOSITY))
make_verbose_0 = --no-print-directory

MAKEFLAGS = $(make_verbose)

# in order to suppress annoying automake warning "CFLAGS: non-POSIX variable name"
# -Wno-portability automake option should be set for this makefile, this is
# required for xcode generation
AUTOMAKE_OPTIONS = -Wno-portability

# required to properly rebuild aclocal.m4 macros on configure.ac or Makefile.am
# updates
ACLOCAL_AMFLAGS = -I m4

# default XXXFLAGS, used for preprocessing, compiling and linking for all
# user-space targets
#
# NOTE[1]: automake doesn't use these flags if per-target XXXFLAGS are defined,
#          so if one doesn't want to replace these default AM_XXXFLAGS with
#          per-target XXXFLAGS, but just to extend them, then AM_XXXFLAGS should
#          be appended to a per-target XXXFLAGS:
#
#              my_program_CFLAGS = --some-compiler-option $(AM_CFLAGS)
#
# NOTE[2]: XXXFLAGS variables provided by a user from command-line
#          (like `make CFLAGS=-Werror`) are always used implicitly in
#          automake's build rules, so there is no need to specify them directly
#          in AM_XXXFLAGS or per-target XXXFLAGS variables.
#
AM_CPPFLAGS  = @M0_CPPFLAGS@
AM_CFLAGS    = @M0_CFLAGS@
AM_LDFLAGS   = @M0_LDFLAGS@

GALOIS_DIR   = extra-libs/galois
SUBDIRS = $(GALOIS_DIR)

################################################################################
#                               Global variables                            {{{1
################################################################################

# initialize variables, so values can be appended later with += if needed

# everything that needs to be installed/packaged goes here
bin_PROGRAMS       =
bin_SCRIPTS        =
sbin_PROGRAMS      =
sbin_SCRIPTS       =
lib_LTLIBRARIES    =

# non-installable/packageable stuff: build helpers, local tests, etc.
noinst_PROGRAMS    =
noinst_LTLIBRARIES =

# documentation
man_MANS   =

EXTRA_DIST  = autogen.sh cortx-motr.spec.in README.rst LICENCE .gdbinit
EXTRA_DIST += extra-libs/.gitignore
CLEANFILES  =
DISTCLEANFILES = @LUSTRE_CONFIG_LINK@ utils/ub.sh
MAN_PAGES  =
POD_MAN_PAGES  =

# the list of auto-generated *_ff.[hc] files
FF_FILES =

# the list of auto-generated *_xc.[hc] files
XC_FILES =

# the list of .xc files, auto-generated by m0confgen
CONFXC_FILES =

# name of autogenerated file to track which autogenerated FF files to clean
FF_CLEAN_FILE := .ff.clean

# name of autogenerated file to track dependencies between XC .h files
XC_DEPS_FILE  := .xc.dep
XC_CLEAN_FILE := .xc.clean
# name of a file, generated by m0gccxml2xcode, containing the list of all xcode types
XC_LIST_FILE  := xcode/xlist.h
XC_LOCK_FILE  := .m0gccxml2xcode.lock

# name of file to track which autogenerated .xc files to clean
CONFXC_CLEAN_FILE := .confxc.clean

# path to a directory with built linux kernel sources/headers
KDIR = @LINUX_OBJ@

# path for python C extention installs
# TODO : port m0spiel utility to python3
PYTHON      := python2
SETUP_PY    := $(PYTHON) setup.py

if MOTR_IDX_STORE_CASS
# override is needed to allow user to provide some additional options in
# RPMBUILD_FLAGS variable in command line
override RPMBUILD_FLAGS += --with cassandra
endif

################################################################################
#                     Internal programs required for build                  {{{1
################################################################################

#
# confgen --------------------------------------------- {{{2
#

CONFGEN = $(top_srcdir)/utils/m0confgen

#
# ff2c ------------------------------------------------ {{{2
#

FF2C = $(top_builddir)/xcode/ff2c/m0ff2c

bin_PROGRAMS               += xcode/ff2c/m0ff2c
xcode_ff2c_m0ff2c_CPPFLAGS  = -DM0_TARGET='m0ff2c' $(AM_CPPFLAGS)
xcode_ff2c_m0ff2c_LDADD     = xcode/ff2c/libmotr-xcode-ff2c.la

# a separate ff2c library is required in order to test it in UT
lib_LTLIBRARIES += xcode/ff2c/libmotr-xcode-ff2c.la

xcode_ff2c_libmotr_xcode_ff2c_la_CPPFLAGS = -DM0_TARGET='libmotr-xcode-ff2c' \
                                            $(AM_CPPFLAGS)

include $(top_srcdir)/xcode/ff2c/Makefile.sub

################################################################################
#                                  Libraries                                {{{1
################################################################################

#
# libmotr.so ------------------------------------------ {{{2
#

lib_LTLIBRARIES          += motr/libmotr.la
motr_libmotr_la_CPPFLAGS  = -DM0_TARGET='libmotr' $(AM_CPPFLAGS)
motr_libmotr_la_LDFLAGS   = -version-info @LT_VERSION@ -pthread $(AM_LDFLAGS)
motr_libmotr_la_LIBADD    = @MATH_LIBS@ @PTHREAD_LIBS@ @AIO_LIBS@ @RT_LIBS@ \
                            @YAML_LIBS@ @PROFILER_LIBS@ @UUID_LIBS@ @GALOIS_LIBS@ \
                            @DL_LIBS@ @CASSANDRA_LIBS@ @UV_LIBS@

# install directory for public libmotr headers
motr_includedir             = $(includedir)/motr

# these variables are populated in the Makefile.sub files of each motr module,
# which are then included into this top-level makefile
nobase_motr_include_HEADERS  = config.h
if ENABLE_LUSTRE
nobase_motr_include_HEADERS += lustre_config.h
endif
nobase_nodist_motr_include_HEADERS = $(XC_FILES)
motr_libmotr_la_SOURCES =
# for autogenerated source files
nodist_motr_libmotr_la_SOURCES =

include $(top_srcdir)/addb2/Makefile.sub
include $(top_srcdir)/addb2/st/Makefile.sub
include $(top_srcdir)/balloc/Makefile.sub
include $(top_srcdir)/be/Makefile.sub
include $(top_srcdir)/be/tool/Makefile.sub
include $(top_srcdir)/capa/Makefile.sub
include $(top_srcdir)/cas/Makefile.sub
include $(top_srcdir)/cm/Makefile.sub
include $(top_srcdir)/cm/repreb/Makefile.sub
include $(top_srcdir)/cob/Makefile.sub
include $(top_srcdir)/conf/Makefile.sub
include $(top_srcdir)/conf/objs/Makefile.sub
include $(top_srcdir)/console/Makefile.sub
include $(top_srcdir)/desim/Makefile.sub
include $(top_srcdir)/dix/Makefile.sub
include $(top_srcdir)/dix/cm/Makefile.sub
include $(top_srcdir)/dix/cm/repair/Makefile.sub
include $(top_srcdir)/dix/cm/rebalance/Makefile.sub
include $(top_srcdir)/dtm/Makefile.sub
include $(top_srcdir)/fd/Makefile.sub
include $(top_srcdir)/fdmi/Makefile.sub
include $(top_srcdir)/fid/Makefile.sub
include $(top_srcdir)/file/Makefile.sub
include $(top_srcdir)/fis/Makefile.sub
include $(top_srcdir)/fol/Makefile.sub
include $(top_srcdir)/fop/Makefile.sub
include $(top_srcdir)/format/Makefile.sub
include $(top_srcdir)/graph/Makefile.sub
include $(top_srcdir)/ha/Makefile.sub
include $(top_srcdir)/ha/halon/Makefile.sub
include $(top_srcdir)/ioservice/Makefile.sub
include $(top_srcdir)/iscservice/Makefile.sub
include $(top_srcdir)/layout/Makefile.sub
include $(top_srcdir)/lib/Makefile.sub
include $(top_srcdir)/m0t1fs/Makefile.sub
include $(top_srcdir)/mdservice/Makefile.sub
include $(top_srcdir)/mdstore/Makefile.sub
include $(top_srcdir)/motr/Makefile.sub
include $(top_srcdir)/module/Makefile.sub
include $(top_srcdir)/mw/Makefile.sub
include $(top_srcdir)/net/Makefile.sub
include $(top_srcdir)/net/bulk_emulation/Makefile.sub
include $(top_srcdir)/net/lnet/Makefile.sub
include $(top_srcdir)/net/sock/Makefile.sub
include $(top_srcdir)/pool/Makefile.sub
include $(top_srcdir)/reqh/Makefile.sub
include $(top_srcdir)/rm/Makefile.sub
include $(top_srcdir)/rpc/Makefile.sub
include $(top_srcdir)/sm/Makefile.sub
include $(top_srcdir)/sns/Makefile.sub
include $(top_srcdir)/sns/cm/Makefile.sub
include $(top_srcdir)/sns/cm/repair/Makefile.sub
include $(top_srcdir)/sns/cm/rebalance/Makefile.sub
include $(top_srcdir)/spiel/Makefile.sub
include $(top_srcdir)/sss/Makefile.sub
include $(top_srcdir)/stob/Makefile.sub
include $(top_srcdir)/stats/Makefile.sub
include $(top_srcdir)/udb/Makefile.sub
include $(top_srcdir)/xcode/Makefile.sub
include $(top_srcdir)/scripts/systemtap/kem/Makefile.sub

#
# libmotr-altogether.so ------------------------------- {{{2
#

MOTR_ALTOGETHER_USER_C   = motr/motr_altogether_user.c
MOTR_ALTOGETHER_USER_SRC = $(filter %.c, $(motr_libmotr_la_SOURCES) \
                                         $(nodist_motr_libmotr_la_SOURCES))

if ENABLE_MOTR_ALTOGETHER
lib_LTLIBRARIES += motr/libmotr-altogether.la
endif

# for autogenerated source files
nodist_motr_libmotr_altogether_la_SOURCES  = $(MOTR_ALTOGETHER_USER_C)

motr_libmotr_altogether_la_CPPFLAGS = $(AM_CPPFLAGS) \
                                      -DM0_TARGET='libmotr-altogether' \
                                      -UM0_INTERNAL \
                                      -DM0_INTERNAL=static \
                                      -UM0_EXTERN \
                                      -DM0_EXTERN=static

if ENABLE_DEBUG
motr_libmotr_altogether_la_CFLAGS   = $(AM_CFLAGS) \
                                            -Wno-unused-function
else
motr_libmotr_altogether_la_CFLAGS   = $(AM_CFLAGS) \
                                            -Wno-unused-function \
                                            -O3 -ffast-math
endif

motr_libmotr_altogether_la_LDFLAGS  = $(motr_libmotr_la_LDFLAGS)
motr_libmotr_altogether_la_LIBADD   = $(motr_libmotr_la_LIBADD)

CLEANFILES += $(MOTR_ALTOGETHER_USER_C)

#
# libmotr-net-test.so --------------------------------- {{{2
#

lib_LTLIBRARIES += net/test/libmotr-net-test.la
net_test_libmotr_net_test_la_CPPFLAGS = -DM0_TARGET='libmotr-net-test' $(AM_CPPFLAGS)

net_test_libmotr_net_test_la_SOURCES =

include $(top_srcdir)/net/test/Makefile.sub

#
# libmotr-helpers.so --------------------------------- {{{2
#

lib_LTLIBRARIES += helpers/libmotr-helpers.la
helpers_libmotr_helpers_la_CPPFLAGS = -DM0_TARGET='libmotr-helpers' $(AM_CPPFLAGS)

helpers_libmotr_helpers_la_SOURCES =

include $(top_srcdir)/helpers/Makefile.sub

#
# libmotr-ut.so --------------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
lib_LTLIBRARIES           += ut/libmotr-ut.la
endif
ut_libmotr_ut_la_CPPFLAGS  = -DM0_TARGET='libmotr-ut' $(AM_CPPFLAGS)
ut_libmotr_ut_la_LIBADD    = net/test/libmotr-net-test.la \
                             helpers/libmotr-helpers.la \
                             xcode/ff2c/libmotr-xcode-ff2c.la

ut_libmotr_ut_la_SOURCES   =
# for autogenerated source files
nodist_ut_libmotr_ut_la_SOURCES   =

#
# libtestlib.so --------------------------------------- {{{2
#
if ENABLE_UNIT_TESTS
lib_LTLIBRARIES           += ut/libtestlib.la
endif
ut_libtestlib_la_CPPFLAGS  = -DM0_TARGET='libtestlib' $(AM_CPPFLAGS)

#
# libaddb2dump-plugin-test.so --------------------------------- {{{2
#

noinst_LTLIBRARIES += addb2/st/libaddb2dump-plugin-test.la
addb2_st_libaddb2dump_plugin_test_la_CPPFLAGS = -DM0_TARGET='libaddb2dump-plugin-test' $(AM_CPPFLAGS)

include $(top_srcdir)/addb2/ut/Makefile.sub
include $(top_srcdir)/balloc/ut/Makefile.sub
include $(top_srcdir)/be/ut/Makefile.sub
include $(top_srcdir)/capa/ut/Makefile.sub
include $(top_srcdir)/cas/ut/Makefile.sub
include $(top_srcdir)/cm/ut/Makefile.sub
include $(top_srcdir)/cob/ut/Makefile.sub
include $(top_srcdir)/conf/ut/Makefile.sub
include $(top_srcdir)/console/ut/Makefile.sub
include $(top_srcdir)/dix/cm/ut/Makefile.sub
include $(top_srcdir)/dix/ut/Makefile.sub
include $(top_srcdir)/dtm/ut/Makefile.sub
include $(top_srcdir)/fd/ut/Makefile.sub
include $(top_srcdir)/fdmi/ut/Makefile.sub
include $(top_srcdir)/file/ut/Makefile.sub
include $(top_srcdir)/fis/ut/Makefile.sub
include $(top_srcdir)/fol/ut/Makefile.sub
include $(top_srcdir)/fop/ub/Makefile.sub
include $(top_srcdir)/fop/ut/Makefile.sub
include $(top_srcdir)/ha/ut/Makefile.sub
include $(top_srcdir)/ioservice/ut/Makefile.sub
include $(top_srcdir)/iscservice/ut/Makefile.sub
include $(top_srcdir)/layout/ut/Makefile.sub
include $(top_srcdir)/lib/ut/Makefile.sub
include $(top_srcdir)/mdservice/ut/Makefile.sub
include $(top_srcdir)/motr/ut/Makefile.sub
include $(top_srcdir)/module/ut/Makefile.sub
include $(top_srcdir)/net/bulk_emulation/ut/Makefile.sub
include $(top_srcdir)/net/lnet/ut/Makefile.sub
include $(top_srcdir)/net/test/ut/Makefile.sub
include $(top_srcdir)/net/ut/Makefile.sub
include $(top_srcdir)/pool/ut/Makefile.sub
include $(top_srcdir)/reqh/ut/Makefile.sub
include $(top_srcdir)/rm/ut/Makefile.sub
include $(top_srcdir)/rpc/ub/Makefile.sub
include $(top_srcdir)/rpc/ut/Makefile.sub
include $(top_srcdir)/sm/ut/Makefile.sub
include $(top_srcdir)/sns/cm/repair/ut/Makefile.sub
include $(top_srcdir)/sns/ut/Makefile.sub
include $(top_srcdir)/spiel/ut/Makefile.sub
include $(top_srcdir)/sss/ut/Makefile.sub
include $(top_srcdir)/stob/ut/Makefile.sub
include $(top_srcdir)/stats/ut/Makefile.sub
include $(top_srcdir)/udb/ut/Makefile.sub
include $(top_srcdir)/ut/Makefile.sub
include $(top_srcdir)/xcode/ut/Makefile.sub
include $(top_srcdir)/helpers/ut/Makefile.sub


################################################################################
#                          Unit tests and benchmarks                        {{{1
################################################################################

#
# desim/ut -------------------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
noinst_PROGRAMS            += desim/ut/net_test
endif
desim_ut_net_test_CPPFLAGS  = -DM0_TARGET='net_test' $(AM_CPPFLAGS)
desim_ut_net_test_LDADD     = $(top_builddir)/motr/libmotr.la \
                              $(top_builddir)/ut/libmotr-ut.la

if ENABLE_UNIT_TESTS
noinst_PROGRAMS            += desim/ut/chs_test
endif
desim_ut_chs_test_CPPFLAGS  = -DM0_TARGET='chs_test' $(AM_CPPFLAGS)
desim_ut_chs_test_LDADD     = $(top_builddir)/motr/libmotr.la \
                              $(top_builddir)/ut/libmotr-ut.la \
                              @MATH_LIBS@

if ENABLE_UNIT_TESTS
noinst_PROGRAMS               += desim/ut/m0t1fs_test
endif
desim_ut_m0t1fs_test_CPPFLAGS  = -DM0_TARGET='m0t1fs_test' $(AM_CPPFLAGS)
desim_ut_m0t1fs_test_LDADD     = $(top_builddir)/motr/libmotr.la \
                                 $(top_builddir)/ut/libmotr-ut.la

#
# m0t1fs/linux_kernel/ut ------------------------------ {{{2
#

include $(top_srcdir)/m0t1fs/linux_kernel/ut/Makefile.sub

#
# net/lnet/ut ----------------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
bin_PROGRAMS                      += net/lnet/ut/m0kut-helper
endif
net_lnet_ut_m0kut_helper_CPPFLAGS  = -DM0_TARGET='m0kut-helper' $(AM_CPPFLAGS)
net_lnet_ut_m0kut_helper_LDADD     = $(top_builddir)/motr/libmotr.la \
                                     $(top_builddir)/ut/libmotr-ut.la

#
# ut/m0ut and ut/m0ub --------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
bin_PROGRAMS     += ut/m0ut
bin_SCRIPTS      += ut/m0kut
bin_SCRIPTS      += ut/m0ut-isolated
bin_SCRIPTS      += scripts/xperior/m0gentestds
endif
ut_m0ut_CPPFLAGS  = -DM0_TARGET='m0ut' $(AM_CPPFLAGS)
ut_m0ut_LDADD     = $(top_builddir)/ut/libmotr-ut.la \
                    $(top_builddir)/motr/libmotr.la \
                    $(top_builddir)/net/test/libmotr-net-test.la \
                    $(top_builddir)/helpers/libmotr-helpers.la \
                    $(top_builddir)/xcode/ff2c/libmotr-xcode-ff2c.la

if ENABLE_UNIT_TESTS
bin_PROGRAMS     += ut/m0ub
endif
ut_m0ub_CPPFLAGS  = -DM0_TARGET='m0ub' $(AM_CPPFLAGS)
ut_m0ub_LDADD     = $(top_builddir)/motr/libmotr.la \
                    $(top_builddir)/ut/libmotr-ut.la

include $(top_srcdir)/utils/Makefile.sub


################################################################################
#                    Integration and system test utilities                  {{{1
################################################################################

#
# console/st ------------------------------------------ {{{2
#

if ENABLE_UNIT_TESTS
noinst_PROGRAMS            += console/st/server
endif
console_st_server_CPPFLAGS  = -DM0_TARGET='console-st-server' $(AM_CPPFLAGS)
console_st_server_LDADD     = $(top_builddir)/motr/libmotr.la \
                              $(top_builddir)/ut/libmotr-ut.la

#
# ha/dummy -------------------------------------------- {{{2
#

noinst_PROGRAMS += ha/dummy/hadummy
ha_dummy_hadummy_CPPFLAGS  = -DM0_TARGET='hadummy' $(AM_CPPFLAGS)
ha_dummy_hadummy_LDADD     = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/ha/dummy/Makefile.sub

#
# m0t1fs/linux_kernel/st ------------------------------ {{{2
#

# m0t1fs/linux_kernel/st/m0t1fs_f{sync,wait}_test_helper
noinst_PROGRAMS += m0t1fs/linux_kernel/st/m0t1fs_fwait_test_helper
noinst_PROGRAMS += m0t1fs/linux_kernel/st/m0t1fs_fsync_test_helper
m0t1fs_linux_kernel_st_m0t1fs_fsync_test_helper_CPPFLAGS  = \
            -DM0_TARGET='m0t1fs_fsync_test_helper' $(AM_CPPFLAGS)

m0t1fs_linux_kernel_st_m0t1fs_fwait_test_helper_CPPFLAGS  = \
            -DM0_TARGET='m0t1fs_fwait_test_helper' $(AM_CPPFLAGS)

noinst_PROGRAMS += m0t1fs/linux_kernel/st/m0t1fs_io_file_pattern
m0t1fs_linux_kernel_st_m0t1fs_io_file_pattern_CPPFLAGS  = \
            -DM0_TARGET='m0t1fs_io_file_pattern' $(AM_CPPFLAGS)

include $(top_srcdir)/m0t1fs/linux_kernel/st/Makefile.sub

#
# net/bulk_emulation/st ------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
noinst_PROGRAMS                           += net/bulk_emulation/st/m0bulkping
endif
net_bulk_emulation_st_m0bulkping_CPPFLAGS  = -DM0_TARGET='m0bulkping' $(AM_CPPFLAGS)
net_bulk_emulation_st_m0bulkping_LDADD     = $(top_builddir)/motr/libmotr.la \
                                             $(top_builddir)/ut/libmotr-ut.la

include $(top_srcdir)/net/bulk_emulation/st/Makefile.sub

#
# net/lnet/st ----------------------------------------- {{{2
#

if ENABLE_UNIT_TESTS
noinst_PROGRAMS                 += net/lnet/st/m0lnetping
endif
net_lnet_st_m0lnetping_CPPFLAGS  = -DM0_TARGET='m0lnetping' $(AM_CPPFLAGS)
net_lnet_st_m0lnetping_LDADD     = $(top_builddir)/motr/libmotr.la \
                                   $(top_builddir)/ut/libmotr-ut.la


include $(top_srcdir)/net/lnet/st/Makefile.sub

#
# net/test -------------------------------------------- {{{2
#

sbin_PROGRAMS                           += net/test/user_space/m0nettest
net_test_user_space_m0nettest_CPPFLAGS   = -DM0_TARGET='m0nettest' $(AM_CPPFLAGS)
net_test_user_space_m0nettest_LDADD      = $(top_builddir)/motr/libmotr.la \
                                           $(top_builddir)/net/test/libmotr-net-test.la

sbin_PROGRAMS                           += net/test/user_space/m0nettestd
net_test_user_space_m0nettestd_CPPFLAGS  = -DM0_TARGET='m0nettestd' $(AM_CPPFLAGS)
net_test_user_space_m0nettestd_LDADD     = $(top_builddir)/motr/libmotr.la \
                                           $(top_builddir)/net/test/libmotr-net-test.la

include $(top_srcdir)/net/test/user_space/Makefile.sub

#
# rm/st ----------------------------------------------- {{{2
#
if ENABLE_UNIT_TESTS
noinst_PROGRAMS       += rm/st/m0rwlock
endif
rm_st_m0rwlock_CPPFLAGS  = -DM0_TARGET='m0rwlock' $(AM_CPPFLAGS)
rm_st_m0rwlock_LDADD     = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/rm/st/Makefile.sub

#
# rpc/it/m0rpcping ------------------------------------ {{{2
#

if ENABLE_UNIT_TESTS
noinst_PROGRAMS           += rpc/it/m0rpcping
endif
rpc_it_m0rpcping_CPPFLAGS  = -DM0_TARGET='m0rpcping' $(AM_CPPFLAGS)
rpc_it_m0rpcping_LDADD     = $(top_builddir)/motr/libmotr.la  \
                             $(top_builddir)/ut/libmotr-ut.la

if ENABLE_UNIT_TESTS
if ENABLE_MOTR_ALTOGETHER
noinst_PROGRAMS                     += rpc/it/m0rpcping-altogether
endif
endif

rpc_it_m0rpcping_altogether_CPPFLAGS = -DM0_TARGET='m0rpcping-altogether' $(AM_CPPFLAGS)
rpc_it_m0rpcping_altogether_SOURCES  = $(rpc_it_m0rpcping_SOURCES)
# for autogenerated source files
nodist_rpc_it_m0rpcping_altogether_SOURCES  = $(nodist_rpc_it_m0rpcping_SOURCES)
rpc_it_m0rpcping_altogether_LDADD    = $(top_builddir)/motr/libmotr-altogether.la \
                                       ut/ut_libmotr_ut_la-cs_service.lo \
                                       ut/ut_libmotr_ut_la-cs_fop.lo \
                                       ut/ut_libmotr_ut_la-cs_fop_xc.lo

include $(top_srcdir)/rpc/it/Makefile.sub

#
# sns/cm/st ------------------------------------------- {{{2
#

sbin_PROGRAMS               += sns/cm/st/m0repair
sns_cm_st_m0repair_CPPFLAGS  = -DM0_TARGET='m0repair' $(AM_CPPFLAGS)
sns_cm_st_m0repair_LDADD     = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/sns/cm/st/Makefile.sub

#
# motr/st ------------------------------------------- {{{2
#

sbin_PROGRAMS += motr/st/utils/m0composite

if ENABLE_UNIT_TESTS
noinst_PROGRAMS                   += motr/st/user_space/m0st
noinst_PROGRAMS                   += motr/st/utils/m0client
noinst_PROGRAMS                   += motr/st/utils/m0cc_cp_cat
endif
bin_PROGRAMS                      += motr/st/utils/m0touch
bin_PROGRAMS                      += motr/st/utils/m0unlink
bin_PROGRAMS                      += motr/st/utils/m0cat
bin_PROGRAMS                      += motr/st/utils/m0cp
bin_PROGRAMS                      += motr/st/utils/m0trunc
bin_PROGRAMS                      += motr/st/mt/m0mt
bin_PROGRAMS                      += motr/st/utils/m0cp_mt

motr_st_user_space_m0st_CPPFLAGS = -DM0_TARGET='m0st' $(AM_CPPFLAGS)
motr_st_user_space_m0st_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_mt_m0mt_CPPFLAGS = -DM0_TARGET='m0mt' $(AM_CPPFLAGS)
motr_st_mt_m0mt_LDADD    = 	$(top_builddir)/motr/libmotr.la

motr_st_utils_m0trunc_CPPFLAGS = -DM0_TARGET='m0trunc' $(AM_CPPFLAGS)
motr_st_utils_m0trunc_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0touch_CPPFLAGS = -DM0_TARGET='m0touch' $(AM_CPPFLAGS)
motr_st_utils_m0touch_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0unlink_CPPFLAGS = -DM0_TARGET='m0unlink' $(AM_CPPFLAGS)
motr_st_utils_m0unlink_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0client_CPPFLAGS = -DM0_TARGET='m0client' $(AM_CPPFLAGS)
motr_st_utils_m0client_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0cat_CPPFLAGS =  -DM0_TARGET='m0cat' $(AM_CPPFLAGS)
motr_st_utils_m0cat_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0cp_CPPFLAGS =  -DM0_TARGET='m0cp' $(AM_CPPFLAGS)
motr_st_utils_m0cp_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0cc_cp_cat_CPPFLAGS =  -DM0_TARGET='m0cc_cp_cat' $(AM_CPPFLAGS)
motr_st_utils_m0cc_cp_cat_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0cp_mt_CPPFLAGS =  -DM0_TARGET='m0cp_mt' $(AM_CPPFLAGS)
motr_st_utils_m0cp_mt_LDADD    = $(top_builddir)/motr/libmotr.la

motr_st_utils_m0composite_CPPFLAGS =  -DM0_TARGET='m0comp' $(AM_CPPFLAGS)
motr_st_utils_m0composite_LDADD    = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/motr/st/Makefile.sub
include $(top_srcdir)/motr/st/mt/Makefile.sub

#
# motr/m0kv ----------------------------------------- {{{2
#
sbin_PROGRAMS                    += motr/m0kv/m0kv

motr_m0kv_m0kv_CPPFLAGS = -DM0_TARGET='m0kv' $(AM_CPPFLAGS)
motr_m0kv_m0kv_LDADD    = $(top_builddir)/motr/libmotr.la \
                                    @UUID_LIBS@

include $(top_srcdir)/motr/m0kv/Makefile.sub

#
# motr/examples ----------------------------------------- {{{2
#
bin_PROGRAMS                    += motr/examples/example1
motr_examples_example1_CPPFLAGS = -DM0_TARGET='example1' $(AM_CPPFLAGS)
motr_examples_example1_LDADD    = $(top_builddir)/motr/libmotr.la \
                                    @UUID_LIBS@

bin_PROGRAMS                    += motr/examples/example2
motr_examples_example2_CPPFLAGS = -DM0_TARGET='example2' $(AM_CPPFLAGS)
motr_examples_example2_LDADD    = $(top_builddir)/motr/libmotr.la \
                                    @UUID_LIBS@

include $(top_srcdir)/motr/examples/Makefile.sub

#
# motr/crate ----------------------------------------- {{{2
#
sbin_PROGRAMS                    += motr/m0crate/m0crate

motr_m0crate_m0crate_CPPFLAGS = -DM0_TARGET='m0crate' $(AM_CPPFLAGS)
motr_m0crate_m0crate_LDADD    = $(top_builddir)/motr/libmotr.la \
                                  @AIO_LIBS@ @RT_LIBS@ @YAML_LIBS@

include $(top_srcdir)/motr/m0crate/Makefile.sub

#
# dix/m0dixinit --------------------------------------- {{{2
#
sbin_PROGRAMS                    += dix/utils/m0dixinit

dix_utils_m0dixinit_CPPFLAGS = -DM0_TARGET='m0dixinit' $(AM_CPPFLAGS)
dix_utils_m0dixinit_LDADD    = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/dix/utils/Makefile.sub

#
# utils/trace ----------------------------------------- {{{2
#

bin_SCRIPTS                   += utils/trace/m0trace \
                                 utils/trace/m0kdump2trace

sbin_SCRIPTS                  += utils/trace/m0tracepurge \
                                 utils/m0provision

bin_PROGRAMS                  += utils/trace/m0tracedump
utils_trace_m0tracedump_LDADD  = $(top_builddir)/motr/libmotr.la

bin_PROGRAMS                  += utils/trace/m0traced
utils_trace_m0traced_LDADD     = $(top_builddir)/motr/libmotr.la

include $(top_srcdir)/utils/trace/Makefile.sub

#
# utils/m0spiel --------------------------------------- {{{2
#

bin_SCRIPTS                  += utils/spiel/m0spiel
bin_SCRIPTS                  += utils/spiel/m0_filesystem_stats

#
# utils/mkfs ------------------------------------------ {{{2
#

sbin_PROGRAMS                 += utils/mkfs/m0mkfs
utils_mkfs_m0mkfs_LDADD        = $(top_builddir)/motr/libmotr.la

utils/mkfs/m0mkfs.o: xcode/protocol_checksum.h

#
# utils/layout ---------------------------------------- {{{2
#

sbin_PROGRAMS                  += utils/layout/m0layout
utils_layout_m0layout_CPPFLAGS  = -DM0_TARGET='m0layout' $(AM_CPPFLAGS)
utils_layout_m0layout_LDADD     = $(top_builddir)/motr/libmotr.la \
                                  @MATH_LIBS@

#
# utils ----------------------------------------------- {{{2
#

bin_SCRIPTS   += utils/m0confgen \
                 utils/m0hagen

sbin_SCRIPTS  += utils/m0gendisks \
                 utils/m0genfacts \
                 utils/m0reportbug \
                 utils/m0run \
                 utils/m0setup \
                 utils/m0iscorrupt \
                 utils/m0singlenode

#
# fdmi/st/echo_plugin
#
include $(top_srcdir)/fdmi/st/Makefile.sub

if ENABLE_UNIT_TESTS
noinst_PROGRAMS           += fdmi/st/echo/m0fdmiecho
endif
fdmi_st_echo_m0fdmiecho_CPPFLAGS  = -DM0_TARGET='echo_plugin' $(AM_CPPFLAGS)
fdmi_st_echo_m0fdmiecho_LDADD     = $(top_builddir)/motr/libmotr.la \
                                    $(top_builddir)/ut/libmotr-ut.la

include $(top_srcdir)/fdmi/st/echo/Makefile.sub

################################################################################
#                               Public utilities                            {{{1
################################################################################

#
# motr/m0d -------------------------------------------- {{{2
#

bin_PROGRAMS      += motr/m0d
motr_m0d_CPPFLAGS  = -DM0_TARGET='m0d' $(AM_CPPFLAGS)
if HAVE_SYSTEMD
motr_m0d_LDFLAGS   = @SYSTEMD_LIBS@
endif
motr_m0d_LDADD     = $(top_builddir)/motr/libmotr.la

#
# motr/m0d-altogether --------------------------------- {{{2
#

if ENABLE_MOTR_ALTOGETHER
bin_PROGRAMS  += motr/m0d-altogether
endif

motr_m0d_altogether_CPPFLAGS = -DM0_TARGET='m0d-altogether' $(AM_CPPFLAGS)
if HAVE_SYSTEMD
motr_m0d_altogether_LDFLAGS  = @SYSTEMD_LIBS@
endif
motr_m0d_altogether_SOURCES  = $(motr_m0d_SOURCES)
motr_m0d_altogether_LDADD    = $(top_builddir)/motr/libmotr-altogether.la

#
# console/m0console ----------------------------------- {{{2
#

sbin_PROGRAMS              += console/m0console
console_m0console_CPPFLAGS  = -DM0_TARGET='m0console' $(AM_CPPFLAGS)
console_m0console_LDADD     = $(top_builddir)/motr/libmotr.la

#
# ha/m0ham -------------------------------------------- {{{2
#

sbin_PROGRAMS     += ha/m0ham
ha_m0ham_CPPFLAGS  = -DM0_TARGET='m0ham' $(AM_CPPFLAGS)
ha_m0ham_LDADD     = $(top_builddir)/motr/libmotr.la

#
# pool/m0poolmach ------------------------------------- {{{2
#

sbin_PROGRAMS            += pool/m0poolmach
pool_m0poolmach_CPPFLAGS  = -DM0_TARGET='m0poolmach' $(AM_CPPFLAGS)
pool_m0poolmach_LDADD     = $(top_builddir)/motr/libmotr.la

#
# addb2/m0addb2dump ----------------------------------- {{{2
#

sbin_PROGRAMS              += addb2/m0addb2dump
addb2_m0addb2dump_CPPFLAGS  = -DM0_TARGET='m0addb2dump' $(AM_CPPFLAGS)
addb2_m0addb2dump_LDADD     = $(top_builddir)/motr/libmotr.la -lbfd -ldl

#
# xcode/m0protocol ------------------------------------ {{{2
#

bin_SCRIPTS               += xcode/m0gccxml2xcode
sbin_PROGRAMS             += xcode/m0protocol
xcode_m0protocol_CPPFLAGS  = -DM0_TARGET='m0protocol' $(AM_CPPFLAGS)
xcode_m0protocol_LDADD     = $(top_builddir)/motr/libmotr.la

#
# be/tool/m0betool ------------------------------------ {{{2
#

sbin_PROGRAMS             += be/tool/m0betool
be_tool_m0betool_CPPFLAGS  = -DM0_TARGET='m0betool' $(AM_CPPFLAGS)
be_tool_m0betool_LDADD     = $(top_builddir)/motr/libmotr.la

#
# be/tool/m0beck -------------------------------------- {{{2
#

sbin_PROGRAMS               += be/tool/m0beck
be_tool_m0beck_CPPFLAGS      = -DM0_TARGET='m0beck' $(AM_CPPFLAGS)
be_tool_m0beck_LDADD         = $(top_builddir)/motr/libmotr.la

#
# scripts/systemtap/kem/m0kemc ----------------------------------- {{{2
#

sbin_PROGRAMS              += scripts/systemtap/kem/m0kemc
scripts_systemtap_kem_m0kemc_CPPFLAGS  = -DM0_TARGET='m0kemc' $(AM_CPPFLAGS)
scripts_systemtap_kem_m0kemc_LDADD     = $(top_builddir)/motr/libmotr.la -lbfd -ldl

#
# hsm/m0hsm ------------------------------------------- {{{2
#

bin_PROGRAMS          += hsm/m0hsm
hsm_m0hsm_CPPFLAGS     = -DM0_TARGET='m0hsm' $(AM_CPPFLAGS)
hsm_m0hsm_LDADD        = $(top_builddir)/motr/libmotr.la @LIBEDIT_LIBS@

include $(top_srcdir)/hsm/Makefile.sub

################################################################################
#                        Init scripts and config files                      {{{1
################################################################################

usr_lib_systemddir    = $(prefix)/lib/systemd/system
usr_lib_systemd_DATA  = scripts/install/usr/lib/systemd/system/motr-client.service \
                        scripts/install/usr/lib/systemd/system/motr-cleanup.service \
                        scripts/install/usr/lib/systemd/system/motr-kernel.service \
                        scripts/install/usr/lib/systemd/system/motr-mkfs.service \
                        scripts/install/usr/lib/systemd/system/motr-mkfs@.service \
                        scripts/install/usr/lib/systemd/system/motr-server-confd.service \
                        scripts/install/usr/lib/systemd/system/motr-server-ha.service \
                        scripts/install/usr/lib/systemd/system/motr-server@.service \
                        scripts/install/usr/lib/systemd/system/m0d@.service \
                        scripts/install/usr/lib/systemd/system/m0t1fs@.service \
                        scripts/install/usr/lib/systemd/system/motr.service \
                        scripts/install/usr/lib/systemd/system/motr-singlenode.service \
                        scripts/install/usr/lib/systemd/system/motr-trace@.service \
                        scripts/install/usr/lib/systemd/system/motr-free-space-monitor.service
EXTRA_DIST           += $(usr_lib_systemd_DATA)

usr_lib_udevrulesdir    = $(prefix)/lib/udev/rules.d
usr_lib_udevrules_DATA  = scripts/install/usr/lib/udev/rules.d/99-motr.rules
EXTRA_DIST             += $(usr_lib_udevrules_DATA)

etc_sysconfigdir    = $(sysconfdir)/sysconfig
etc_sysconfig_DATA  = scripts/install/etc/sysconfig/motr
EXTRA_DIST         += $(etc_sysconfig_DATA)

etc_sysconfig_freespacedir    = $(sysconfdir)/sysconfig
etc_sysconfig_freespace_DATA  = scripts/install/etc/sysconfig/motr-free-space-monitor
EXTRA_DIST                   += $(etc_sysconfig_freespace_DATA)

etc_limitsdir    = $(sysconfdir)/security/limits.d
etc_limits_DATA  = scripts/install/etc/security/limits.d/90-motr.conf
EXTRA_DIST      += $(etc_limits_DATA)

motrdir = /opt/seagate/cortx/motr

motr_libexecdir = $(motrdir)/libexec
motr_libexec_SCRIPTS = \
    scripts/install$(motrdir)/libexec/m0reportbug-bundler \
    scripts/install$(motrdir)/libexec/m0_ha_sim \
    scripts/install$(motrdir)/libexec/motr_data_recovery.sh \
    scripts/install$(motrdir)/libexec/m0trace_logrotate.sh \
    scripts/install$(motrdir)/libexec/motr_cfg.sh \
    scripts/install$(motrdir)/libexec/m0addb_logrotate.sh
EXTRA_DIST += $(motr_libexec_SCRIPTS)

motr_crondir = $(sysconfdir)/cron.hourly
motr_cron_SCRIPTS = \
    scripts/install$(motrdir)/libexec/m0trace_logrotate.sh \
    scripts/install$(motrdir)/libexec/m0addb_logrotate.sh
EXTRA_DIST += $(motr_cron_SCRIPTS)
    
motr_confdir = $(motrdir)/conf
motr_conf_DATA = scripts/install$(motr_confdir)/motr.conf \
                    scripts/install$(motr_confdir)/setup.yaml
EXTRA_DIST += $(motr_conf_DATA)

motr_sanitydir = $(motrdir)/sanity
motr_sanity_SCRIPTS = \
    scripts/install$(motr_sanitydir)/cortx_srvc_sanity.sh \
    scripts/install$(motr_sanitydir)/cortx_lnet_sanity.sh \
    scripts/install$(motr_sanitydir)/motr_sanity.sh
EXTRA_DIST += $(motr_sanity_SCRIPTS)

motr_commondir = $(motrdir)/common
motr_common_SCRIPTS = \
    scripts/install$(motr_commondir)/cortx_error_codes.sh \
    scripts/install$(motr_commondir)/cortx_util_funcs.sh \
    scripts/install$(motr_commondir)/core-traces \
    scripts/install$(motr_commondir)/m0_sns_utils_common.sh
EXTRA_DIST += $(motr_common_SCRIPTS)

# After genders => Halon transition, Motr doesn't have any configuration files
# under /etc/motr/ directory. But there might be some in future.
#etc_motrdir    = $(sysconfdir)/motr
#etc_motr_DATA  =
#EXTRA_DIST    += $(etc_motr_DATA)

ETC_SYSTEMD_DIR := $(DESTDIR)$(sysconfdir)/systemd/system

install-exec-hook:
	$(MKDIR_P) $(ETC_SYSTEMD_DIR)
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-client.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-mkfs.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-server-confd.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-server-ha.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-server@.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr-singlenode.service
	$(LN_S) /dev/null $(ETC_SYSTEMD_DIR)/motr.service

dist_pkglibexec_SCRIPTS  = scripts/install/usr/libexec/cortx-motr/motr-service.functions \
                           scripts/install/usr/libexec/cortx-motr/motr \
                           scripts/install/usr/libexec/cortx-motr/motr-client \
                           scripts/install/usr/libexec/cortx-motr/motr-cleanup \
                           scripts/install/usr/libexec/cortx-motr/motr-kernel \
                           scripts/install/usr/libexec/cortx-motr/motr-mkfs \
                           scripts/install/usr/libexec/cortx-motr/motr-server \
                           scripts/install/usr/libexec/cortx-motr/motr-dixinit \
                           scripts/install/usr/libexec/cortx-motr/motr-trace \
                           scripts/install/usr/libexec/cortx-motr/motr-free-space-monitor

################################################################################
#                             Auxiliary data files                          {{{1
################################################################################

motrdatadir    = $(datadir)/motr
motrdata_DATA  = xcode/protocol.txt \
                 xcode/protocol-be.txt \
                 xcode/protocol-conf.txt \
                 xcode/protocol-rpc.txt \
                 xcode/protocol.md5 \
                 xcode/protocol-be.md5 \
                 xcode/protocol-conf.md5 \
                 xcode/protocol-rpc.md5

usr_lib_pkgconfigdir    = $(libdir)/pkgconfig
usr_lib_pkgconfig_DATA  = scripts/install/usr/lib/pkgconfig/motr.pc
EXTRA_DIST             += $(usr_lib_pkgconfig_DATA)

templatesdir    = $(datadir)/motr/templates
templates_DATA  = scripts/install/usr/share/motr/templates/halon_facts.yaml.erb
EXTRA_DIST     += $(templates_DATA)

################################################################################
#                                 Distribution                              {{{1
################################################################################

include $(top_srcdir)/scripts/Makefile.sub
include $(top_srcdir)/patches/Makefile.sub
include $(top_srcdir)/doc/Makefile.sub

EXTRA_DIST += $(CONFXC_FILES:.xc=.cg)

EXTRA_DIST += \
              addb2/Kbuild.sub \
              addb2/ut/Kbuild.sub \
              balloc/Kbuild.sub \
              be/Kbuild.sub \
              be/ut/Kbuild.sub \
              cas/Kbuild.sub \
              cob/Kbuild.sub \
              motr/Kbuild.sub\
              motr/st/Kbuild.sub\
              conf/Kbuild.sub \
              conf/ut/Kbuild.sub \
              cm/Kbuild.sub \
              cm/repreb/Kbuild.sub \
              dix/Kbuild.sub \
              dix/cm/Kbuild.sub \
              dtm/Kbuild.sub \
              dtm/ut/Kbuild.sub \
              fd/Kbuild.sub \
              fd/ut/Kbuild.sub \
              fdmi/Kbuild.sub \
              fid/Kbuild.sub \
              fis/Kbuild.sub \
              fol/Kbuild.sub \
              fop/Kbuild.sub \
              fop/ut/Kbuild.sub \
              format/Kbuild.sub \
              file/Kbuild.sub \
              file/ut/Kbuild.sub \
              graph/Kbuild.sub \
              ha/Kbuild.sub \
              ha/ut/Kbuild.sub \
              ioservice/Kbuild.sub \
              ioservice/ut/Kbuild.sub \
              iscservice/Kbuild.sub \
              iscservice/ut/Kbuild.sub \
              layout/Kbuild.sub \
              layout/ut/Kbuild.sub \
              lib/Kbuild.sub \
              lib/ut/Kbuild.sub \
              m0t1fs/Kbuild.sub \
              m0t1fs/linux_kernel/ut/Kbuild.sub \
              mdservice/Kbuild.sub \
              motr/Kbuild.sub \
              module/Kbuild.sub \
              net/Kbuild.sub \
              net/bulk_emulation/Kbuild.sub \
              net/bulk_emulation/ut/Kbuild.sub \
              net/lnet/Kbuild.sub \
              net/lnet/st/Kbuild.sub \
              net/lnet/ut/Kbuild.sub \
              net/sock/Kbuild.sub \
              net/test/Kbuild.sub \
              net/test/ut/Kbuild.sub \
              net/ut/Kbuild.sub \
              pool/Kbuild.sub \
              reqh/Kbuild.sub \
              reqh/ut/Kbuild.sub \
              rm/Kbuild.sub \
              rm/ut/Kbuild.sub \
              rpc/Kbuild.sub \
              rpc/it/Kbuild.sub \
              rpc/ut/Kbuild.sub \
              sm/Kbuild.sub \
              sm/ut/Kbuild.sub \
              sns/Kbuild.sub \
              sns/ut/Kbuild.sub \
              spiel/Kbuild.sub \
              sss/Kbuild.sub \
              stats/Kbuild.sub \
              stob/Kbuild.sub \
              stob/ut/Kbuild.sub \
              ut/Kbuild.sub \
              utils/Kbuild.sub \
              xcode/Kbuild.sub \
              xcode/ut/Kbuild.sub \
              helpers/Kbuild.sub


################################################################################
#                                 Build rules                               {{{1
################################################################################

#
# ff files -------------------------------------------- {{{2
#

# rules for *_ff.[ch] files, which are automatically generated from
# corresponding *.ff files by ff2c compiler.

# hide actual ff2c build command in silent make mode (V=0) and display it
# otherwise (V=1); take into account default verbosity level in configure
# (controlled by --enable-silent-rules option)
ff2c_verbose   = $(ff2c_verbose_$(V))
ff2c_verbose_  = $(ff2c_verbose_$(AM_DEFAULT_VERBOSITY))
ff2c_verbose_0 = @echo "  FF2C  " $<;

%_ff.h %_ff.c: %.ff config.h $(FF2C)
	$(ff2c_verbose)$(FF2C) $<

#
# xc files -------------------------------------------- {{{2
#

# rules for *_xc.[hc] files, which are automatically generated from
# corresponding *.h files.

# *_xc.[ch] files contain generated xcode data structures for the given C
# structures from *.h files. For more information about xcode please refer to
# xcode/xcode.h and xcode/m0gccxml2xcode documentation.

# set specific flags for particular CXXXML program
if ENABLE_CASTXML
cxxxml_tag = "CASTXML"
cxxxml2xc_tag = "CASTXML2XC"
# generate gccxml-like output with castxml
CXXXML_FLAGS := --castxml-gccxml
CXXXML_OUTPUT := -o # keep trailing blank-space after -o
CXXXML2XC_FLAGS := --castxml
else
cxxxml_tag = "GCCXML"
cxxxml2xc_tag = "GCCXML2XC"
# set maximum supported gcc version by gccxml, currently it's 4.2
CXXXML_FLAGS := -DGCC_VERSION=4002
CXXXML_OUTPUT := -fxml=
CXXXML2XC_FLAGS :=
endif

# hide actual gccxml/m0gccxml2xcode build commands in silent make mode (V=0) and
# display them otherwise (V=1); take into account default verbosity level in
# configure (controlled by --enable-silent-rules option)
cxxxml_verbose   = $(cxxxml_verbose_$(V))
cxxxml_verbose_  = $(cxxxml_verbose_$(AM_DEFAULT_VERBOSITY))
cxxxml_verbose_0 = @echo " ${cxxxml_tag}    " $@;

cxxxml2xcode_verbose   = $(cxxxml2xcode_verbose_$(V))
cxxxml2xcode_verbose_  = $(cxxxml2xcode_verbose_$(AM_DEFAULT_VERBOSITY))
cxxxml2xcode_verbose_0 = @echo " ${cxxxml2xc_tag} " $@;

# gccxml doesn't like -Werror and --coverage options so we need to remove them
# from CFLAGS
CXXXML_UNSUPPORTED_CFLAGS := -Werror -Wno-trampolines --coverage -pipe -Wp,-D_FORTIFY_SOURCE=2 --param=ssp-buffer-size=4 -grecord-gcc-switches -fstack-protector-strong
CXXXML_CFLAGS := $(filter-out $(CXXXML_UNSUPPORTED_CFLAGS), $(CPPFLAGS) $(CFLAGS) $(AM_CPPFLAGS) $(AM_CFLAGS))

%_xc.h %_xc.c: %.h config.h
	$(cxxxml_verbose)$(CXXXML) $(CXXXML_FLAGS) $(CXXXML_CFLAGS) $(CXXXML_OUTPUT)$(<:.h=.gccxml) $<
	$(cxxxml2xcode_verbose)$(top_srcdir)/xcode/m0gccxml2xcode $(CXXXML2XC_FLAGS) -i $(<:.h=.gccxml) -l $(XC_LIST_FILE)

#
# cg files -------------------------------------------- {{{2
#

# Conversion of conf strings from "confgen" format (*.cg files)
# to "xcode" format (*.xc files)

confgen_verbose   = $(confgen_verbose_$(V))
confgen_verbose_  = $(confgen_verbose_$(AM_DEFAULT_VERBOSITY))
confgen_verbose_0 = @echo " CONFGEN   " $@;

%.xc: %.cg $(CONFGEN)
	@grep '^#\+=' $< > $@ || true # preserve '#=' comments, they are special
	$(confgen_verbose)$(CONFGEN) $< >> $@

#
# Pre-build targets ----------------------------------- {{{2
#

# BUILT_SOURCES automake variable is a standard way to execute commands
# before the main build commands (`make all`), for more information please
# refer to section "Built Sources" in automake documentation
BUILT_SOURCES = pre-all

# this is executed just before 'all' target
.PHONY: pre-all
pre-all: check-make-prebuild check-sources-prebuild
	$(MAKE) generate-files

# checks ---------------------------------------------- {{{3

.PHONY: check-make-prebuild
check-make-prebuild:
	@echo -n 'Checking make files... '
	@XC=`echo "$(motr_libmotr_la_SOURCES)" | grep -Po '\S+_xc\.[ch]'` ; \
		if [[ -n $$XC ]] ; then \
			echo FAIL; \
			echo "ERROR: xcode files in motr_libmotr_la_SOURCES makefile variable:"; \
			echo "$$XC"; \
			echo "Please, move them into nodist_motr_libmotr_la_SOURCES var instead."; \
			exit 1; \
		fi
	@XC=`echo "$(EXTRA_DIST)" | grep -Po '\S+_xc\.[ch]'` ; \
		if [[ -n $$XC ]] ; then \
			echo FAIL; \
			echo "ERROR: xcode files found in EXTRA_DIST makefile variable:"; \
			echo "$$XC"; \
			echo "Please, remove them from EXTRA_DIST."; \
			exit 1; \
		fi
	@echo 'OK'

.PHONY: check-sources-prebuild
check-sources-prebuild:
	@echo -n 'Checking source files... '
	@$(top_srcdir)/scripts/build/check-sources --noisy $(top_srcdir)
	@echo 'OK'

# generate-xc ----------------------------------------- {{{3

.PHONY: generate-xc-files
generate-xc-files: $(XC_FILES)
	@rm -f $(XC_LOCK_FILE)

-include $(XC_DEPS_FILE)

$(XC_DEPS_FILE): $(XC_FILES:_xc.h=.h)
	@rm -f $(XC_DEPS_FILE)
	@for f in $(XC_FILES:_xc.h=.h); do \
		deps=$$( \
			$(CPP) -MM -MG $(AM_CPPFLAGS) $$f \
			| tr ' ' \\n \
			| grep _xc \
			| grep -v $${f/%.h/_xc.h} \
			| sed -e 's#^$(abs_top_srcdir)/##' \
			| xargs echo \
		       ); \
		if [ -n "$$deps" ]; then \
			echo "$${f/%.h/_xc.h}: $$deps" >> $(XC_DEPS_FILE); \
			echo >> $(XC_DEPS_FILE); \
		fi \
	 done

.PHONY: generate-xc-deps
generate-xc-deps: $(XC_DEPS_FILE)

-include $(XC_CLEAN_FILE)

$(XC_CLEAN_FILE):
	@rm -f $(XC_CLEAN_FILE)
	@for f in $(XC_FILES); do \
		echo "CLEANFILES += $${f} $${f/%.h/.c} $${f/%.h/.yml} $${f/%_xc.h/.gccxml}" \
		     >> $(XC_CLEAN_FILE); \
	 done

.PHONY: generate-xc-clean
generate-xc-clean: $(XC_CLEAN_FILE)

# generate-ff ----------------------------------------- {{{3

.PHONY: generate-ff-files
generate-ff-files: $(FF_FILES)

-include $(FF_CLEAN_FILE)

$(FF_CLEAN_FILE):
	@rm -f $(FF_CLEAN_FILE)
	@for f in $(FF_FILES); do \
		echo "CLEANFILES += $${f} $${f/%.h/.c}" >> $(FF_CLEAN_FILE); \
	 done

.PHONY: generate-ff-clean
generate-ff-clean: $(FF_CLEAN_FILE)

# generate-cg ----------------------------------------- {{{3

.PHONY: generate-confxc-files
generate-confxc-files: $(CONFXC_FILES)

-include $(CONFXC_CLEAN_FILE)

$(CONFXC_CLEAN_FILE):
	@rm -f $(CONFXC_CLEAN_FILE)
	@for f in $(CONFXC_FILES); do \
		echo "CLEANFILES += $${f}" >> $(CONFXC_CLEAN_FILE); \
	 done

.PHONY: generate-confxc-clean
generate-confxc-clean: $(CONFXC_CLEAN_FILE)

# generate-protocol ----------------------------------- {{{3

.PHONY: generate-protocol-files
generate-protocol-files: xcode/protocol_checksum.h

xcode/protocol.txt: $(XC_FILES)
	@./xcode/proto -o $@

xcode/protocol.md5:  xcode/protocol.txt
	@md5sum $< | awk '{print $$1}' > $@

xcode/protocol-%.txt: $(XC_FILES)
	@./xcode/proto --$* -o $@

xcode/protocol-%.md5: xcode/protocol-%.txt
	@md5sum $< | awk '{print $$1}' > $@

PROTOCOL_CHECKSUM_HEADER_TEMPLATE := xcode/protocol_checksum.h.template

xcode/protocol_checksum.h: xcode/protocol.md5 \
                           xcode/protocol-be.md5 \
                           xcode/protocol-conf.md5 \
                           xcode/protocol-rpc.md5 \
                           $(PROTOCOL_CHECKSUM_HEADER_TEMPLATE)
	@sed -e "s/@CHECKSUM@/$$(cat xcode/protocol.md5)/" $(PROTOCOL_CHECKSUM_HEADER_TEMPLATE) > $@
	@sed -i -e "s/@BE_CHECKSUM@/$$(cat xcode/protocol-be.md5)/" $@
	@sed -i -e "s/@CONF_CHECKSUM@/$$(cat xcode/protocol-conf.md5)/" $@
	@sed -i -e "s/@RPC_CHECKSUM@/$$(cat xcode/protocol-rpc.md5)/" $@

XC_PROTO_FILES := xcode/protocol.txt \
                  xcode/protocol-be.txt \
                  xcode/protocol-conf.txt \
                  xcode/protocol-rpc.txt \
                  xcode/protocol.md5 \
                  xcode/protocol-be.md5 \
                  xcode/protocol-conf.md5 \
                  xcode/protocol-rpc.md5 \
                  xcode/protocol_checksum.h


.PHONY: generate-files
generate-files: generate-xc-files generate-ff-files generate-confxc-files \
                generate-protocol-files

#
# Post-build targets ---------------------------------- {{{2
#

if ENABLE_LUSTRE
KERNEL_MODULES_BUILD = build-kernel-modules
else
KERNEL_MODULES_BUILD =
endif

# this is executed just after 'all' target
all-local: $(KERNEL_MODULES_BUILD) $(LTLIBRARIES) $(PROGRAMS)
	@$(top_srcdir)/scripts/build/check-sources $(top_srcdir)
	@$(top_srcdir)/scripts/build/check-public-api
	@$(top_srcdir)/scripts/build/check-protocol
	@$(top_srcdir)/scripts/build/print-elf-sizes
	@cd utils/spiel; $(SETUP_PY) install --root=${DESTDIR} --record=INSTALLED_FILES
	@$(LN_S) -f $(PROGRAMS:%=../%) $(filter /trace/, $(bin_SCRIPTS:%=../%)) utils/

# checks ---------------------------------------------- {{{3

.PHONY: check-sources-postbuild
check-sources-postbuild:
	@$(top_srcdir)/scripts/build/check-sources $(top_srcdir)

.PHONY: check-public-api
check-public-api:
	@$(top_srcdir)/scripts/build/check-public-api

.PHONY: check-protocol
check-protocol:
	@$(top_srcdir)/scripts/build/check-protocol

.PHONY: print-elf-sizes
print-elf-sizes:
	@$(top_srcdir)/scripts/build/print-elf-sizes

.PHONY: install-m0spiel-cext
install-m0spiel-cext:
	@cd utils/spiel; $(SETUP_PY) install --root=${DESTDIR} --record=INSTALLED_FILES

# kernel ---------------------------------------------- {{{3

# kbuild system will complain about dupicate exported symbols in m0tr-ut.ko,
# because it uses the same .o files as m0tr.ko, so we're filtering such kbuild
# warnings out from make output with `grep -v` to avoid extra noise;
# we're using special feature of bash shell called "Process  substitution", to
# redirect STDERR output of make command to a filter command, this is required
# in order to preserve exit code of make command, which would be lost in case of
# plain piping with "|", and as a bonus it keeps STDOUT and STDERR separate.
.PHONY: build-kernel-modules
build-kernel-modules:
	@echo "$(MAKE) -C $(KDIR) M=$(abs_top_builddir) $(AM_MAKEFLAGS)"
	@$(BASH) -c "$(MAKE) -C $(KDIR) M=$(abs_top_builddir) $(AM_MAKEFLAGS) \
	 2> >( grep -v '^WARNING:.*exported twice\. Previous export was in' )"

#
# Component targets ----------------------------------- {{{2
#

# all-user -------------------------------------------- {{{3

.PHONY: all-user
all-user: pre-all
	@$(MAKE) $(AM_MAKEFLAGS) __all-user

.PHONY: __all-user
__all-user: config.h Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)

# all-kernel ------------------------------------------ {{{3

.PHONY: all-kernel
all-kernel: pre-all
	@$(MAKE) $(AM_MAKEFLAGS) build-kernel-modules

# libmotr --------------------------------------------- {{{3

.PHONY: libmotr
libmotr: pre-all
	@$(MAKE) $(AM_MAKEFLAGS) __libmotr

.PHONY: __libmotr
__libmotr: config.h Makefile motr/libmotr.la $(HEADERS)

# libmotr-altogether ---------------------------------- {{{3

$(MOTR_ALTOGETHER_USER_C): $(MOTR_ALTOGETHER_USER_SRC)
	@echo "/* This file is autogenerated, don't edit. */" > $(MOTR_ALTOGETHER_USER_C)
	@for f in $^; do \
		echo "#include \"$$f\"" >> $(MOTR_ALTOGETHER_USER_C); \
	done

.PHONY: libmotr-altogether
libmotr-altogether: pre-all
	@$(MAKE) $(AM_MAKEFLAGS) __libmotr-altogether

.PHONY: __libmotr-altogether
__libmotr-altogether: config.h Makefile motr/libmotr-altogether.la $(HEADERS)

# libmotr-ut ------------------------------------------ {{{3

.PHONY: libmotr-ut
libmotr-ut: pre-all
	@$(MAKE) $(AM_MAKEFLAGS) __libmotr-ut

.PHONY: __libmotr-ut
__libmotr-ut: config.h Makefile ut/libmotr-ut.la $(HEADERS)

# galois ---------------------------------------------- {{{3

.PHONY: galois
galois:
	@echo 'Building galois'
	@cd $(GALOIS_DIR) && $(MAKE) $(AM_MAKEFLAGS)

# quick ----------------------------------------------- {{{3

.PHONY: quick
quick: generate-files galois
	@echo 'Building user-space Unit Tests'
	@$(MAKE) $(AM_MAKEFLAGS) __quick

.PHONY: __quick
__quick: __libmotr __libmotr-ut ut/m0ut
	@$(MAKE) $(AM_MAKEFLAGS) build-kernel-modules M0_BUILD_KERNEL_M0TR_ONLY=yes

# kuick ----------------------------------------------- {{{3

.PHONY: kuick
kuick: generate-files galois
	@echo 'Building kernel-space Unit Tests'
	@$(MAKE) $(AM_MAKEFLAGS) build-kernel-modules M0_BUILD_KERNEL_UT_ONLY=yes

.PHONY: motr_st
motr_st: generate-files galois
	@echo 'Building motr for motr system test.'
	@$(MAKE) $(AM_MAKEFLAGS) build-kernel-modules M0_BUILD_ST=yes

#
# Clean targets --------------------------------------- {{{2
#

# local ----------------------------------------------- {{{3

if ENABLE_LUSTRE
KERNEL_MODULES_CLEAN = clean-kernel-modules
else
KERNEL_MODULES_CLEAN =
endif

clean-local: $(KERNEL_MODULES_CLEAN) clean-doc
	@rm -vf $(XC_DEPS_FILE)
	@rm -vf $(XC_CLEAN_FILE)
	@rm -vf $(XC_LIST_FILE)
	@rm -vf $(XC_LOCK_FILE)
	@rm -vf $(XC_PROTO_FILES)
	@rm -vf $(FF_CLEAN_FILE)
	@rm -vf $(CONFXC_CLEAN_FILE)
	@rm -vf m0.trace.*
	@for p in $(PROGRAMS) ; do \
		rm -fv utils/$$(basename $$p); \
	done
	@if test x@ENABLE_COVERAGE@ = xyes; then \
		find . -name "*.gcno" | xargs rm -vf; \
	fi

# kernel ---------------------------------------------- {{{3

# we don't want to use the default kernel clean command, i.e.:
#   $(MAKE) -C $(KDIR) M=$(PWD) $(AM_MAKEFLAGS) clean
# because it's a bit dummy - it uses `find` to recursively delete all *.o, *.a
# and *.ko files, which will mess up our user-space build in .libs/ directories
# and delete library files under extra-libs/ and galois.ko module;
# instead we use our own `find` command, which excludes some paths we need to
# keep, to clean up kernel build
.PHONY: clean-kernel-modules
clean-kernel-modules:
	@rm -vrf $(top_builddir)/.tmp_versions/
	@rm -vf $(top_builddir)/Module.symvers
	@rm -vf $(top_builddir)/Module.markers
	@rm -vf $(top_builddir)/modules.order
	@find $(top_builddir) \
		\( -name .git -o -name .libs -o -name extra-libs \) -prune \
		-o \( -name '*.o' -o -name '*.ko' -o -name '.*.cmd' \
		      -o -name '*.ko.*' -o -name '.*.d' -o -name '.*.tmp' \
		      -o -name '*.mod.c' \
		   \) -type f -print | xargs rm -vf

# doc ------------------------------------------------- {{{3

.PHONY: clean-doc
clean-doc:
	rm -fr doc/html
	rm -f  doc/man/*.[1-8].xml
	rm -f  doc/man/*.[1-8]
	rm -f  $(POD_MAN_PAGES_RAW)

#
# Install targets ------------------------------------- {{{2
#

# we want to install motr kernel modules in kernel/fs/motr directory under
# base kernel modules dir, and since our "installable" kernel modules already
# built in motr/ directory, Kbuild will append it to install path, so we use
# INSTALL_MOD_DIR=kernel/fs to avoid duplication of motr/ part in our module's
# installation path

install-kernel-modules:
	@test -n "$$DESTDIR"
	@$(MAKE) INSTALL_MOD_PATH=$(DESTDIR) \
		 INSTALL_MOD_DIR=$${INSTALL_MOD_DIR:-kernel/fs/motr} \
		 -C $(KDIR) M=$(abs_top_builddir) modules_install

if ENABLE_LUSTRE
KERNEL_MODULES_INSTALL = install-kernel-modules
else
KERNEL_MODULES_INSTALL =
endif

install-exec-local: $(KERNEL_MODULES_INSTALL)

install-tests:
	@$(MAKE) -C extra-libs/galois install
	@$(MAKE) INSTALL_MOD_DIR=kernel/fs/motr/tests $(KERNEL_MODULES_INSTALL) \
		 install-binPROGRAMS install-sbinPROGRAMS install-binSCRIPTS \
		 install-sbinSCRIPTS

#
# RPM targets ----------------------------------------- {{{2
#

DIST_FILE    = $(distdir).tar.gz
RPMBUILD_DIR = $(HOME)/rpmbuild
RPM_SRC_DIR  = $(RPMBUILD_DIR)/SOURCES
RPM_SPEC_DIR = $(RPMBUILD_DIR)/SPECS
RPM_MOCK_DIR = $(RPMBUILD_DIR)/MOCK-RPMS

# Some developers keep Motr sources on a vmhgfs partition (VMware sharing).
# In this case $(DIST_FILE) and motr.spec will be owned by host OS' user,
# and rpmbuild will fail with "Bad owner/group" message. Since vmhgfs does
# not permit changing owner/group of a file, we move the files out of vmhgfs
# as a workaround.
.PHONY: __rpm_pre
__rpm_pre:
	$(MAKE) dist

	[ -d $(RPM_SRC_DIR) ] || $(MKDIR_P) $(RPM_SRC_DIR)
	mv $(DIST_FILE) $(RPM_SRC_DIR)
	chown $$(id -u):$$(id -g) $(RPM_SRC_DIR)/$(DIST_FILE)

	[ -d $(RPM_SPEC_DIR) ] || $(MKDIR_P) $(RPM_SPEC_DIR)
	cp cortx-motr.spec $(RPM_SPEC_DIR)/
	chown $$(id -u):$$(id -g) $(RPM_SPEC_DIR)/cortx-motr.spec

.PHONY: __rpm_post
__rpm_post:
	rm -f $(RPM_SRC_DIR)/$(DIST_FILE) $(RPM_SPEC_DIR)/cortx-motr.spec

.PHONY: __rpm
__rpm:
	rpmbuild -ba $(RPM_SPEC_DIR)/cortx-motr.spec \
		 --define "_topdir $(RPMBUILD_DIR)" \
		 $(RPMBUILD_FLAGS)

.PHONY: __rpm_srpm
__rpm_srpm:
	rpmbuild -bs $(RPM_SPEC_DIR)/cortx-motr.spec \
		 --define "_topdir $(RPMBUILD_DIR)" \
		 $(RPMBUILD_FLAGS)

.PHONY: __rpm_tests
__rpm_tests:
	rpmbuild -bb $(RPM_SPEC_DIR)/cortx-motr.spec \
		 --define "_topdir $(RPMBUILD_DIR)" \
		 --with ut \
		 $(RPMBUILD_FLAGS)

.PHONY: __rpm_mock
__rpm_mock:
	mock -r motr-mock.cfg --resultdir $(RPM_MOCK_DIR) --init
	mock -r motr-mock.cfg --resultdir $(RPM_MOCK_DIR) --buildsrpm \
		--spec $(RPM_SPEC_DIR)/cortx-motr.spec \
		--sources $(RPM_SRC_DIR) \
		--no-clean --no-cleanup-after
	mock -r motr-mock.cfg --resultdir $(RPM_MOCK_DIR) --rebuild \
		$(RPM_MOCK_DIR)/motr-*.src.rpm \
		--no-clean --no-cleanup-after

# __rpm_tests should be built before __rpm, because __rpm_tests creates a dummy
# motr.rpm package, which would otherwise overwrite normal motr.rpm, created by
# __rpm
.PHONY: rpms
rpms:
	$(MAKE) __rpm_pre
	$(MAKE) __rpm_tests
	$(MAKE) __rpm
	$(MAKE) __rpm_srpm
	$(MAKE) __rpm_post

.PHONY: rpms-notests
rpms-notests:
	$(MAKE) __rpm_pre
	$(MAKE) __rpm
	$(MAKE) __rpm_post

.PHONY: rpms-tests
rpms-tests:
	$(MAKE) __rpm_pre
	$(MAKE) __rpm_tests
	$(MAKE) __rpm_post

.PHONY: rpms-mock
rpms-mock:
	$(MAKE) __rpm_pre
	$(MAKE) __rpm_mock
	$(MAKE) __rpm_post

.PHONY: srpm
srpm:
	$(MAKE) __rpm_pre
	$(MAKE) __rpm_srpm
	$(MAKE) __rpm_post

#
# Docker ---------------------------------------------- {{{2
#

# delegate all targets to the scripts/docker/Makefile
.PHONY: docker
docker:
	$(MAKE) -C scripts/docker/

docker-%:
	$(MAKE) -C scripts/docker/ $*

#
# Documentation --------------------------------------- {{{2
#

# doxygen --------------------------------------------- {{{3

.PHONY: doc-doxygen
doc-doxygen:
	@$(DOXYGEN) doc/Doxyfile

# man ------------------------------------------------- {{{3

MAN_PAGES_DIR = doc/man
MAN_PAGES_RAW = $(MAN_PAGES:.txt=)
POD_MAN_PAGES_RAW = $(POD_MAN_PAGES:=.1) #$(patsubst %,$(MAN_PAGES_DIR)/%.1, $(notdir $(POD_MAN_PAGES)))

man_MANS += $(MAN_PAGES_RAW) $(POD_MAN_PAGES_RAW)

# hide actual a2x build command in silent make mode (V=0) and display it
# otherwise (V=1); this takes into account default verbosity level in configure
# (controlled by --enable-silent-rules option)
a2x_verbose   = $(a2x_verbose_$(V))
a2x_verbose_  = $(a2x_verbose_$(AM_DEFAULT_VERBOSITY))
a2x_verbose_0 = @echo "  A2X   " $@;

$(MAN_PAGES_RAW):
	$(a2x_verbose)$(A2X) --format=manpage $@.txt

# hide actual pod2man build command in silent make mode (V=0) and display it
# otherwise (V=1); this takes into account default verbosity level in configure
# (controlled by --enable-silent-rules option)
pod2man_verbose   = $(pod2man_verbose_$(V))
pod2man_verbose_  = $(pod2man_verbose_$(AM_DEFAULT_VERBOSITY))
pod2man_verbose_0 = @echo " POD2MAN" $@;

$(POD_MAN_PAGES_RAW):
	$(pod2man_verbose)$(POD2MAN) --section=1 --center='Motr User Manual' \
	--release=@PACKAGE_VERSION@ --utf8 $(@:.1=) $@

.PHONY: doc-manpages
doc-manpages: $(MAN_PAGES_RAW) $(POD_MAN_PAGES_RAW)


.PHONY: doc
doc: doc-doxygen doc-manpages

#
# Help targets ---------------------------------------- {{{2
#

.PHONY: etags
etags:
	find . -name '*.[ch]' | xargs etags

.PHONY: list-programs
list-programs:
	@for p in $(PROGRAMS); do \
		echo "$$p"; \
	done | sort

.PHONY: list-libs
list-libs:
	@for l in $(LTLIBRARIES); do \
		echo "$$l"; \
	done | sort

.PHONY: list-modules
list-modules:
	@find . -name '*.ko' | sort | cut -c 1-2 --complement

.PHONY: help
help:
	@echo 'Build targets:'
	@echo '  all             - build programs, libraries, kernel modules, etc.,'
	@echo '                    this is a default, same as just `make`'
	@echo '  all-user        - build only user-space libraries and programs'
	@echo '  all-kernel      - build only kernel modules'
	@echo ''
	@echo '  quick           - build only user-space UT'
	@echo '  kuick           - build only kernel-space UT'
	@echo ''
	@echo '  galois          - build only libgalois.so and galois.ko'
	@echo '  libmotr         - build only libmotr library'
	@echo '  libmotr-ut      - build only libmotr-ut library'
	@echo '  libmotr-altogether - build only libmotr library'
	@echo ''
	@echo '  dir/file[.o]    - build specified target only'
	@echo ''
	@echo 'Cleaning targets:'
	@echo '  clean           - delete from the build tree files created by `make all`'
	@echo '  distclean       - same as clean, but additionally delete anything,'
	@echo '                    created by ./configure'
	@echo ''
	@echo 'Documentation:'
	@echo '  doc             - generate all documentation'
	@echo '  doc-doxygen     - generate doxygen documentation'
	@echo '  doc-manpages    - generate Motr manpages'
	@echo ''
	@echo 'Distribution targets:'
	@echo '  install         - install what needs to be installed, copying the'
	@echo '                    files from the build tree to system-wide directories'
	@echo '  uninstall       - the opposite of `make install` - erase installed files'
	@echo '                    (this needs to be run from the same build tree that'
	@echo '                     was installed)'
	@echo '  dist            - recreate package-version.tar.gz from all source files'
	@echo '  srpm            - build source rpm package'
	@echo '  rpms            - build Motr rpm packages'
	@echo '  rpms-notests    - build Motr rpm packages, excluding tests'
	@echo '  rpms-tests      - build Motr tests rpm package only'
	@echo '  rpms-mock       - build Motr rpm packages using "mock" environment (ensures clean rpm deps)'
	@echo ''
	@echo 'Infrastructure targets:'
	@echo '  docker          - build docker images'
	@echo '  docker-TARGET   - make a TARGET found in scripts/docker/Makefile'
	@echo '  docker-help     - display docker related help'
	@echo ''
	@echo 'Information:'
	@echo '  list-programs   - list all executables built in motr'
	@echo '  list-libs       - list all libraries built in motr'
	@echo '  list-modules    - list all kernel modules built in motr'
	@echo '  print-elf-sizes - show ELF sizes of the main binaries'

# vim: textwidth=80 nowrap foldmethod=marker
