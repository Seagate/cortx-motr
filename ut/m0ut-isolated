#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


### run each UT suite in a separate process

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly SELF=$(readlink -f $0)
readonly BASE_DIR=$(dirname $SELF)
readonly TOP_SRCDIR=$(echo $(dirname $SELF) \
                      | sed -r -e 's#/?utils/?$##' -e 's#/?ut/?$##' -e 's#^/usr/s?bin##')

# colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput bold ; tput setaf 7)
NC=$(tput sgr0)

# variables
cli_args=()
verbose=false
colorize='auto'
tests_list=
exclude_list=

#
# Logging
#

log()
{
    echo "${WHITE}--->  $*${NC}" >&2
}

logn()
{
    echo -n "${WHITE}--->  $*" >&2
}

logr()
{
    echo -n $'\r' >&2
    log "$*"
}

debug()
{
    ! $verbose || echo -e "${CYAN}--->  DEBUG:  $*${NC}" >&2
}

warn()
{
    echo "${YELLOW}--->  WARNING: $*${NC}" >&2
}

die()
{
    echo "$PROG_NAME:  ${RED}ERROR${NC}:  $*" >&2
    exit 1
}

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [options] [-- options-for-m0ut]

    Run m0ut test suites in isolation from each other. It iterates over the list
    of test suites and runs 'm0ut -t suite' for each of them.

    Any unhandled options and arguments are passed to every 'm0ut' command
    execution.

  Options are:

    -t|--tests suite1[,suite2]

                    A comma-separated list of test suits to run.

    -x|--exclude suite1[,suite2]

                    A comma-separated list of test suits to exclude.

    -c|--color=always
    -C|--color=never
       --color=auto
                    Control output colorization.

    -v|--verbose    Enable verbose output.

    -h|--help       Print this help screen.
USAGE_END
}

#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt --options hvt:x:cC \
                   --longoptions help,verbose,tests:,exclude:,color: \
                   --name "$PROG_NAME" -- "$@" )

    [[ $? -ne 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -t|--tests)         tests_list=$(echo $2 | sed -e 's/,/\n/g') ; shift 2 ;;
            -x|--exclude)       exclude_list=$(echo $2 | sed -e 's/,/\n/g') ; shift 2 ;;
            --color)            colorize=$2  ; shift 2
                                case $colorize in
                                    auto|always|never) ;;
                                    *) die "incorrect value for --color option: '$colorize'" \
                                           ", should be one of 'auto|always|never'"
                                        ;;
                                esac
                ;;
            -c)                 colorize='always' ; shift ;;
            -C)                 colorize='never'  ; shift ;;
            -h|--help)          help stdout ;;
            -v)                 verbose=true ; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...' >&2 ; exit 1 ;;
        esac
    done

    # remaining command line arguments
    cli_args=("$@")
}

#
# Utility functions
#

srcdir_path_of()
{
    local binary=$TOP_SRCDIR/utils/$1

    if [[ -z "$TOP_SRCDIR" ]] ; then
        echo $1
    elif [[ -L $binary ]] ; then
        echo "$TOP_SRCDIR/$(readlink $binary | sed -e 's#^../##')"
    fi
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e -o pipefail

parse_cli_options "$@"
set -- "${cli_args[@]}"

# disable colored output if colorize=never
# or colorize=auto and STDOUT isn't a terminal
if [[ $colorize == never || $colorize == auto && ! -t 1 ]] ; then
    RED=
    GREEN=
    YELLOW=
    BLUE=
    MAGENTA=
    CYAN=
    WHITE=
fi

# sanity checks
#

if [[ -n "$TOP_SRCDIR" &&
      ! (-f $(srcdir_path_of m0ut) && -x $(srcdir_path_of m0ut)) ]] ||
   [[ -z "$TOP_SRCDIR" ]] && ! which m0ut &>/dev/null
then
    die "'m0ut' is not found or missing executable permissions."
fi

# do work
#
m0ut=$(srcdir_path_of m0ut)
debug "path to m0ut: $m0ut"

tests=${tests_list:-$($m0ut -l)}
debug "excluding $(echo $exclude_list | wc -w) test suite(s)"

for t in $exclude_list ; do
    tests=$(echo "$tests" | grep -v $t)
done

tests_count=$(echo $tests | wc -w)
failed_tests=
log "$tests_count test suite(s) to run"

time for t in $tests ; do
    log "$t"
    [[ -d $t ]] || mkdir $t
    cd $t

    set +e
    $m0ut -t $t "$@"
    rc=$?
    set -e

    cd ..
    [[ $rc -eq 0 ]] && rm -rf $t || {
        warn "$t test suite failed with status $rc"
        failed_tests+="$t  "
    }
    echo
done
echo

if [[ -n "$failed_tests" ]] ; then
    warn "$(echo $failed_tests | wc -w) of $tests_count test suite(s) failed:"
    warn "  $failed_tests"
    exit 1
fi

log "all of the $tests_count test suite(s) passed successfully"

exit 0
