#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# set -x
# export PS4='+ [${FUNCNAME[0]:+${FUNCNAME[0]}:}${LINENO}] '
set -eu

## CAUTION: This path will be removed by superuser.
SANDBOX_DIR=${SANDBOX_DIR:-/var/motr/sandbox.m0mount-fail-test}

M0_TRACE_IMMEDIATE_MASK=${M0_TRACE_IMMEDIATE_MASK:-all}
M0_TRACE_LEVEL=${M0_TRACE_LEVEL:-warn+}
M0_TRACE_PRINT_CONTEXT=${M0_TRACE_PRINT_CONTEXT:-}

MAX_RPC_MSG_SIZE=163840
TM_MIN_RECV_QUEUE_LEN=2
PROFILE='<0x7000000000000001:0>'        # profile-0
PROFILE_BAD='<0x7000000000000000:999>'  # profile not existing in conf
PROCESS_M0D='<0x7200000000000001:0>'    # process-0
PROCESS_M0T1FS='<0x7200000000000001:4>' # process-4

FINJECT=/sys/kernel/debug/motr/finject/ctl

error() { echo "$@" >&2; stop 1; }

M0_SRC_DIR=`readlink -f $0`
M0_SRC_DIR=${M0_SRC_DIR%/*/*}

. $M0_SRC_DIR/utils/functions # die, sandbox_init, report_and_exit

start() {
    set +e
    mount | grep debugfs > /dev/null
    debugfs_mounted=$?
    set -e
    _init

    echo "Mount debugfs so as to use fault injection"
    if [ $debugfs_mounted -ne 0 ]; then
	mount -t debugfs none /sys/kernel/debug
	mount | grep debugfs
	if [ $? -ne 0 ]
	then
	    echo "Failed to mount debugfs"
	    return 1
	fi
    fi
}

stop() {
    local rc=${1:-$?}

    trap - EXIT
    _fini $rc
    report_and_exit mount-fail $rc
}

_init() {
    lnet_up
    m0_modules_insert
    sandbox_init # changes current directory to $SANDBOX_DIR
    mkdir mnt
}

_fini() {
    umount /sys/kernel/debug

    rmdir mnt
    sandbox_fini ${1:-}
    m0_modules_remove
}

# The generated configuration does not include RMS. This is a to cause
# m0t1fs' rconfc to fail while starting, and as the result, prevent m0t1fs
# from successful mounting.
conf_without_rms() {
    cat <<EOF
(root-0 verno=1 rootfid=(11, 22) mdpool=pool-0 imeta_pver=pver-0
    mdredundancy=2 params=["pool_width=3", "nr_data_units=1",
                           "nr_parity_units=1", "unit_size=4096"]
    nodes=[node-0] sites=[site-2] pools=[pool-0]
    profiles=[profile-0] fdmi_flt_grps=[])
(profile-0 pools=[pool-0])
(node-0 memsize=16000 nr_cpu=2 last_state=3 flags=2 processes=[process-0])
(process-0 cores=[3] mem_limit_as=0 mem_limit_rss=0 mem_limit_stack=0
    mem_limit_memlock=0 endpoint="$M0D1_ENDPOINT"
    services=[service-1, service-2, service-3, service-4, service-5])
(service-1 type=@M0_CST_HA endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-2 type=@M0_CST_IOS endpoints=["$M0D1_ENDPOINT"] params=[]
    sdevs=[sdev-1, sdev-2, sdev-3, sdev-4])
(service-3 type=@M0_CST_MDS endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[sdev-0])
(service-4 type=@M0_CST_CONFD endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-5 type=@M0_CST_SSS endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(pool-0 pver_policy=0 pvers=[pver-0])
(pver-0 N=2 K=1 P=4 tolerance=[0, 0, 0, 0, 1] sitevs=[objv-2:0])
(objv-2:0 real=site-2 children=[objv-0])
(objv-0 real=rack-0 children=[objv-1])
(objv-1 real=enclosure-0 children=[objv-2])
(objv-2 real=controller-0 children=[objv-3, objv-4, objv-5, objv-6])
(objv-3 real=drive-0 children=[])
(objv-4 real=drive-1 children=[])
(objv-5 real=drive-2 children=[])
(objv-6 real=drive-3 children=[])
(site-2 racks=[rack-0] pvers=[pver-0])
(rack-0 encls=[enclosure-0] pvers=[pver-0])
(enclosure-0 ctrls=[controller-0] pvers=[pver-0])
(controller-0 node=node-0 drives=[drive-0, drive-1, drive-2, drive-3] pvers=[pver-0])
(drive-0 dev=sdev-1 pvers=[pver-0])
(drive-1 dev=sdev-2 pvers=[pver-0])
(drive-2 dev=sdev-3 pvers=[pver-0])
(drive-3 dev=sdev-4 pvers=[pver-0])
(sdev-0 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev0")
(sdev-1 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev1")
(sdev-2 dev_idx=1 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev2")
(sdev-3 dev_idx=2 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev3")
(sdev-4 dev_idx=3 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev4")
EOF
}

# The generated configuration does include RMS to let rconfc start normal way.
conf_normal() {
    cat <<EOF
(root-0 verno=1 rootfid=(11, 22) mdpool=pool-0 imeta_pver=pver-0
    mdredundancy=2 params=["pool_width=3", "nr_data_units=1",
                           "nr_parity_units=1", "unit_size=4096"]
    nodes=[node-0] sites=[site-2] pools=[pool-0]
    profiles=[profile-0] fdmi_flt_grps=[])
(profile-0 pools=[pool-0])
(node-0 memsize=16000 nr_cpu=2 last_state=3 flags=2 processes=[process-0])
(process-0 cores=[3] mem_limit_as=0 mem_limit_rss=0 mem_limit_stack=0
    mem_limit_memlock=0 endpoint="$M0D1_ENDPOINT"
    services=[service-1, service-2, service-3, service-4, service-5, service-6])
(service-1 type=@M0_CST_HA endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-2 type=@M0_CST_IOS endpoints=["$M0D1_ENDPOINT"] params=[]
    sdevs=[sdev-1, sdev-2, sdev-3, sdev-4])
(service-3 type=@M0_CST_MDS endpoints=["$M0D1_ENDPOINT"] params=[]
    sdevs=[sdev-0])
(service-4 type=@M0_CST_CONFD endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-5 type=@M0_CST_SSS endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(service-6 type=@M0_CST_RMS endpoints=["$M0D1_ENDPOINT"] params=[] sdevs=[])
(pool-0 pver_policy=0 pvers=[pver-0])
(pver-0 N=2 K=1 P=4 tolerance=[0, 0, 0, 0, 1] sitevs=[objv-2:0])
(objv-2:0 real=site-2 children=[objv-0])
(objv-0 real=rack-0 children=[objv-1])
(objv-1 real=enclosure-0 children=[objv-2])
(objv-2 real=controller-0 children=[objv-3, objv-4, objv-5, objv-6])
(objv-3 real=drive-0 children=[])
(objv-4 real=drive-1 children=[])
(objv-5 real=drive-2 children=[])
(objv-6 real=drive-3 children=[])
(site-2 racks=[rack-0] pvers=[pver-0])
(rack-0 encls=[enclosure-0] pvers=[pver-0])
(enclosure-0 ctrls=[controller-0] pvers=[pver-0])
(controller-0 node=node-0 drives=[drive-0, drive-1, drive-2, drive-3] pvers=[pver-0])
(drive-0 dev=sdev-1 pvers=[pver-0])
(drive-1 dev=sdev-2 pvers=[pver-0])
(drive-2 dev=sdev-3 pvers=[pver-0])
(drive-3 dev=sdev-4 pvers=[pver-0])
(sdev-0 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev0")
(sdev-1 dev_idx=0 iface=4 media=1 bsize=4096 size=596000000000 last_state=3
    flags=4 filename="/dev/sdev1")
(sdev-2 dev_idx=1 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev2")
(sdev-3 dev_idx=2 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev3")
(sdev-4 dev_idx=3 iface=7 media=2 bsize=8192 size=320000000000 last_state=2
    flags=4 filename="/dev/sdev4")
EOF
}

m0d_start() {
    local conf_generator=$1
    local conf_file=conf.xc
    local opts="-f $PROCESS_M0D
-m $MAX_RPC_MSG_SIZE -q $TM_MIN_RECV_QUEUE_LEN -F -D db -T AD -S stobs
-A linuxstob:addb-stobs -e lnet:$M0D1_ENDPOINT -c $conf_file -w 3"

    $conf_generator | $M0_SRC_DIR/utils/m0confgen >$conf_file ||
        error 'm0confgen failed'

    $M0_SRC_DIR/utils/mkfs/m0mkfs $opts &>mkfs.log || error 'm0mkfs failed'

    echo $M0_SRC_DIR/motr/m0d $opts >m0d.log
    $M0_SRC_DIR/motr/m0d $opts &>>m0d.log &
    local pid=$!
    sleep 2
    kill -0 $pid 2>/dev/null ||
        error "Failed to start m0d. See $SANDBOX_DIR/m0d.log for details."
}

m0d_stop() { pkill m0d && wait || true; }

mount_fail() {
    local profile=$1
    local opts='-t m0t1fs'
    opts+=" -o pfid=$PROCESS_M0T1FS,profile=$profile,ha=$M0D1_ENDPOINT"
    opts+=" none $SANDBOX_DIR/mnt"

    echo mount $opts >mount.log
    if mount $opts &>>mount.log; then
        echo 'mount failed to fail' | tee -a mount.log >&2
        umount $SANDBOX_DIR/mnt
        return 1
    else
        echo "mount failed as expected" &>>mount.log
    fi
}

## -------------------------------------------------------------------
## test suite data
## -------------------------------------------------------------------

TEST_CASES=(
    [0]="no RMS in conf"
    [1]="a profile not in conf"
    [2]="m0_pools_common_init() to fail"
    [3]="m0_pools_setup() to fail"
    [4]="m0_pools_service_ctx_create() to fail"
    [5]="m0_pool_versions_setup() to fail"
    [6]="m0_flset_build() to fail"
    [7]="m0_pool_version_get() to fail"
    [8]="m0t1fs_rm_service_start() to fail"
)

FINJECT_WHERE=(
    [2]='m0_conf_ios_devices_count'
    [3]='m0_pools_setup'
    [4]='service_ctxs_create'
    [5]='m0_pool_versions_setup'
    [6]='flset_diter_init'
    [7]='m0_conf_pver_get'
    [8]='m0_conf_process2service_get'
)

# no entry implies conf_normal
CONF_GENERATOR=(
    [0]=conf_without_rms
)

# no entry implies $PROFILE
CONF_PROFILE=(
    [1]=$PROFILE_BAD
)

# no need to restart m0d while running conf_normal
M0D_START=( [0]=1 [1]=1 )
M0D_STOP=(  [0]=1 [8]=1 )

run_test() {
    local conf_generator=${CONF_GENERATOR[$1]:-conf_normal}
    local conf_profile=${CONF_PROFILE[$1]:-$PROFILE}
    local fi_where=${FINJECT_WHERE[$1]:-''}
    local verbose=${MF_VERBOSE:-0} # 0 - mute; 1 - title only; 2 - detailed
    local m0d_start=${M0D_START[$1]:-0}
    local m0d_stop=${M0D_STOP[$1]:-0}

    if [ $verbose -ne 0 ]; then
	local title="$idx > mounting with ${TEST_CASES[$1]}..."
	[ $verbose -lt 2 ] || title+=" generator=$conf_generator, profile=$conf_profile"
	echo $title
    fi
    [ $m0d_start -eq 0 ] || m0d_start $conf_generator
    if [ -n "$fi_where" ]; then
	fi_command="enable $fi_where diter_fail oneshot"
	echo $fi_command > $FINJECT
	[ $verbose -lt 2 ] || echo $fi_command
    fi
    mount_fail $conf_profile
    [ $m0d_stop -eq 0 ] || m0d_stop
    [ $verbose -lt 2 ] || echo "  < OK, mount failed"
}

## -------------------------------------------------------------------
## main()
## -------------------------------------------------------------------


echo "*********************************************************"
echo "This test is disabled, because debugfs is not available  "
echo " in m0ctl.ko, which is not GPL-licensed.                 "
echo "*********************************************************"
report_and_exit mount-fail 0


[ `id -u` -eq 0 ] || die 'Must be run by superuser'

trap stop EXIT
start

echo 8 >/proc/sys/kernel/printk  # Print kernel messages to the console.

for (( idx = 0; idx < ${#TEST_CASES[*]}; idx++ ))
do
    run_test $idx
done

stop
