#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


#
# m0t1fs system test
#

# exit immediately if one the commands exits with a non-zero status
set -e -o pipefail

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly verbose_level_debug=2
readonly verbose_level_info=1
readonly verbose_level_none=0

M0_SRC_DIR=$(readlink -f $0)
M0_SRC_DIR=${M0_SRC_DIR%/*/*}

# variables
verbose_level=$verbose_level_none
update_rpm=false
do_cleanup=true
rpm_pkg=''
m0setup=m0setup
needs_cleanup=true


#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [-h|--help] [-v] [-u] [-r rpm_pkg]

    -r rpm_pkg      Motr rpm package to test. By default, currently installed
                    motr package is tested. If provided, the specified 'rpm_pkg'
                    is installed in the system and then removed after testing is
                    finished.

    -u              Update rpm instead of a full re-install, don't remove
                    exising metadata before the tests.

    --no-cleanup    Don't remove existing motr metadata after the tests.

    -v              Verbose output. Prints additional information to STDERR.
                    Can be specified more than once (-vv) to get more
                    verbose output.

    -h|--help       Print this help screen.
USAGE_END
}


#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt --options hvur: \
                   --longoptions help,no-cleanup \
                   --name "$PROG_NAME" -- "$@" )

    [[ $? -ne 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -v)                 verbose_level=$((verbose_level + 1)); shift ;;
            -r)                 rpm_pkg=$2; shift 2 ;;
            -u)                 update_rpm=true; shift ;;
            --no-cleanup)       do_cleanup=false; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}


#
# Utility functions
#

echo_err()
{
    echo -e "$*" >&2
}

debug()
{
    if [[ $verbose_level -ge $verbose_level_debug ]] ; then
        echo_err "$PROG_NAME:  DEBUG:  $*"
    fi
}

info()
{
    if [[ $verbose_level -ge $verbose_level_info ]] ; then
        echo_err "$PROG_NAME:  INFO:   $*"
    fi
}

warn()
{
    echo_err "$PROG_NAME: WARNING: $*"
}

die()
{
    echo_err "$PROG_NAME:  ERROR:  $*"
    exit 1
}

is_motr_installed()
{
    if [[ -e /etc/sysconfig/motr ]] ; then
        return 0
    else
        return 1
    fi
}

install_motr_rpm()
{
    local pkg=$1

    if $update_rpm ; then
        info "Updating rpm: $pkg"
        rpm -Uhv $pkg
    else
        # check if an older version is installed and remove it first
        if rpm --quiet -q motr ; then
            warn "Old motr rpm detected in the system, removing it first"
            remove_motr_rpm $pkg
        fi

        info "Installing rpm: $pkg"
        rpm -ihv $pkg
    fi

    info 'Activating singlenode services'
    m0singlenode activate
}

remove_motr_rpm()
{
    local pkg=$1

    local pkg_name=$(echo $pkg | grep -Po '(?:^|(?<=/))[_[:alnum:]]+(?=-\d+\.\d+\.\d+)')

    info "Removing rpm: $pkg_name"
    rpm --nodeps -e $pkg_name
}

test_file_path='/mnt/m0t1fs/0:4200000'
test_file_md5_path='/var/motr/m0t1fs.md5'

do_m0t1fs_write_test()
{
    debug "do_m0t1fs_system_test: start dd"

    #wait for mount complete.
    sleep 5

    touch $test_file_path
    # set unit_size to 1MB (see layout/layout_pver.c:m0_lid_to_unit_map)
    setfattr -n lid -v 9 $test_file_path

    local src_file_path=/dev/zero

    for device in /dev/{s,v,h}da ; do
        if [[ -e $device ]] ; then
            src_file_path=$device
            break
        fi
    done

    debug "using $device as a source file"
    dd if=$src_file_path of=$test_file_path bs=4M count=240 &
    local dd_pid=$!

    while true ; do
        sleep 1
        if ps -p $dd_pid &> /dev/null ; then
            kill -USR1 $dd_pid
        else
            break
        fi
    done

    wait $dd_pid
    rc=$?
    [[ $rc -eq 0 ]] ||
        die "dd command finished with error code $rc"

    debug "do_m0t1fs_system_test: sleep 30 sec"
    sleep 10 # FIXME: w/a for 'umount: /mnt/m0t1fs: device is busy'

    debug "do_m0t1fs_system_test: syncing data"
    sync

    md5sum $test_file_path > $test_file_md5_path
}

do_m0t1fs_read_test()
{
    md5sum --check --strict --warn $test_file_md5_path
}

do_m0t1fs_system_test()
{
    if [[ -e $test_file_path ]] ; then
        info 'm0t1fs read test'
        do_m0t1fs_read_test
        test_file_path+='1'
    fi

    info 'm0t1fs write test'
    do_m0t1fs_write_test
}

#
# Cleanup
#

cleanup()
{
    $needs_cleanup || exit 0

    warn 'not clean exit detected, performing a clean-up'
    set +e
    info 'stopping motr-kernel'
    systemctl stop motr-kernel
    info 'm0setup cleanup'
    $m0setup -c
    info 'rpm cleanup'
    remove_motr_rpm $rpm_pkg
}

trap cleanup EXIT

#
# Main
#

parse_cli_options "$@"

if ! is_motr_installed && [[ -z "$rpm_pkg" ]] ; then
    die 'Motr rpm is not installed, either install desired Motr rpm package' \
        'manually or provide it with -r option for automatic installation' \
        'and removal'
fi

if [[ -n "$rpm_pkg" ]] ; then
    install_motr_rpm $rpm_pkg
else
    m0setup="$M0_SRC_DIR/utils/m0setup"
fi

# this is required, because other test scripts might leave some
# loopback devices attached
if ! $update_rpm ; then
    info 'Running m0setup cleanup'
    $m0setup -c
fi

for ios_num in 1 ; do
    info "--------------- m0t1fs test with $ios_num ioservice(s)  ---------------"

    if ! $update_rpm ; then
        info '/var/motr cleanup'
        rm -rf /var/motr/{confd,ha,mds,ios*}/

        info 'Running m0setup cleanup'
        $m0setup -c

        info 'Running m0setup'
        $m0setup -i $ios_num

        info 'Running motr-mkfs'
        systemctl start motr-mkfs
    fi

    info 'Starting Motr'
    systemctl start motr-singlenode

    info 'Performing m0t1fs test'
    do_m0t1fs_system_test

    info  'Stopping Motr'
    debug "  stopping motr-singlenode.. ($(date -u))"
    systemctl stop motr-singlenode
    debug "  [done] ($(date -u))"
    sleep 5
    debug "  stopping motr-kernel.. ($(date -u))"
    systemctl stop motr-kernel
    debug "  [done] ($(date -u))"

    if $do_cleanup ; then
        info 'Running m0setup cleanup'
        $m0setup -c

        info '/var/motr cleanup'
        rm -rf /var/motr/{confd,ha,mds,ios*}/
        rm -f $test_file_md5_path
    fi

    info 'Performing sanity checks'
    if lsmod | grep -q m0 ; then
        die 'failed to unload motr kernel modules'
    else
        debug 'looks OK, no motr kernel modules are loaded'
    fi
done

if $do_cleanup && [[ -n "$rpm_pkg" ]] ; then
    # this ugly 'sleep sync' required to workaround situation when motr-kernel
    # doesn't have enough time to unload modules, due to buggy systemd
    # behaviour, before rpm will remove them
    debug 'ugly "sync" to make sure that systemd has *really* stopped all' \
          'motr services'
    sleep 30
    remove_motr_rpm $rpm_pkg
fi

needs_cleanup=false
