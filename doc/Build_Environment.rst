=================
Build Environment
=================

Motr project requires sophisticated build system with many features. It also requires logical directory structure, so that modifications are done quickly and painlessly. This document aims to describes such a build environment.

***************
Definitions
***************

- build system - Autotools, Cmake, Scons, etc., that is, set of software packages, which may work together to provide the means of building complex software packages;\

- build env - build system plus project policies, such as directory structures, practices used for adding new targets, etc.

- autotools - GNU Build system, that is: GNU Automake and GNU Autoconf.

- automake - GNU Automake is a package, containing set of utilities for generating make files templates from special make target definitions, called Makefile.am. It is closely tied to autoconf (see below) and usually used along with it as part of bigger processing pipeline. As a result of automake work, Makefile.in files are generated.

- autoconf - GNU Autoconf is a package, containing set of utilities for configuring projects and generating make files from special templates, generated by automake (see above) and called Makefile.in. As a result of its work, special configure script is created and used for checking system environment. When checking is done, make files are generated, taking into account site environment, build tools and build options specifics, found in configure time.

- libtool - GNU Libtool is a package, providing portable way for building static or dynamically linked libraries by hiding platform specifics and linker/compiler options, required for building a library, in a huge, presumably portable shell script. It is usually used along with automake and autoconf.

- scons - modern, portable build system, alternative to autoconf/automake, though having all the features of them and even more. It is implemented in python and suggests, that build scripts are also written in python. This provides big deal of flexibility and potential as one can use power of python and whole bunch of existing libraries.

- cmake - one more alternative build system used for big projects. Its main difference from others is that, it generates build scripts/files, native to each platform it is used on from some very simple script, describing project checks, targets, etc. Native scripts for each platform is: makefiles for unices, MS VisualStudio project for Windows and Eclipse project for java applications.

***************
Requirements
***************

- [req.build-env.traditional] - All the traditional features of build systems, such as using timestamps optimization, build correctness, should be supported.

- [req.build-env.portability] - The same build system and source tree should be used for building Colibri on all supported platforms.

- [req.build-env.user-kernel] - The source code tree contains user space code and targets (libraries, binaries) as well as kernel space code (kernel modules).

- [req.build-env.configure-stage] - Configure stage should be present to check various system specifics, libraries, functions, headers.

- [req.build-env.configure-options] - Configure stage should support passing various configure options, such paths to other software packages to use, debug on/off, etc.

- [req.build-env.build-stage] - Build stage should be powerful enough to be able to do non-traditional build tasks, such as generating code from templates, execute shell commands, etc.

- [req.build-env.simultaneous-builds] - Simultaneous builds from the same or different nodes should be supported. Different architectures may be built simultaneously.

- [req.build-env.build-dir] - All object files, binaries and libraries, should be placed out of the source tree.

- [req.build-env.debug] - Debug on/off targets are supported and placed in different directories.

- [req.build-env.performance] - Complex project structure is supported and handled in a sophisticated way to provide as fast builds as possible.

- [req.build-env.testing] - Testing framework is built along with the project software.

- [req.build-env.git-repo] - Git repository is used for storing the project source code and build system files.

- [req.build-env.git-hooks] - Git commit hooks are set in the repository to mail code changes to the peers.
