* Collecting test coverage data
================================
- Make sure lcov is installed.

  [root@xyralab_02 core]# rpm -qa | grep lcov
  lcov-1.9-1

- Edit /usr/bin/geninfo perl script to comment following line.
  push(@gcov_options, "-a") if ($gcov_caps->{'all-blocks'});

  Commenting the line prevents lcov from passing "-a" option to gcov.
  Due to some bug in gcc, gcov with -a option hangs for some .gcda files.

* Collecting test coverage data of user-space motr:
======================================================

[root@xyralab_02 core]# pwd
/laptop/motr/coverage/motr/core
[root@xyralab_02 core]# sh autogen.sh
[root@xyralab_02 core]# ./configure  --with-linux=/root/kernel/cov/linux-2.6.34.7 --enable-coverage

Make sure in the output of configure script, that CFLAGS has --coverage option
and LDFLAGS has '-lgcov' option present.

LIBS   :  ""
CFLAGS :  "-Wall -Werror -D_REENTRANT -D_GNU_SOURCE -fno-strict-aliasing -I/laptop/motr/coverage/motr/extra-libs/yaml/include -I. -I/laptop/motr/coverage/motr/core --coverage -g -O0"
KCFLAGS:  "-Wall -Werror -g -O0"
LDFLAGS:  "-rdynamic -lgcov"

[root@xyralab_02 core]# make

When build completes, you can confirm presence of gcov hooks in motr binaries as

[root@xyralab_02 core]# nm motr/.libs/libmotr.so | grep gcov | head
0000000000259c20 t __gcov_close
000000000025ab10 t __gcov_flush
00000000004bbda0 b __gcov_indirect_call_callee
00000000004bc400 b __gcov_indirect_call_callee
00000000004bc460 b __gcov_indirect_call_callee
00000000004bc610 b __gcov_indirect_call_callee
00000000004bc640 b __gcov_indirect_call_callee
00000000004bc850 b __gcov_indirect_call_callee
00000000004bca60 b __gcov_indirect_call_callee
00000000004bdbe0 b __gcov_indirect_call_callee

Run utils/ut or any other binary, that causes binaries from this build directory
to be executed.

[root@xyralab_02 core]# cd utils/
[root@xyralab_02 utils]# ./ut

This will cause .gcda file getting created for each source file.
Here is a snippet from gcc.gnu.org online documentation
<SNIP>
The .gcda file is generated when a program containing object files built with
the GCC -fprofile-arcs option is executed. A separate .gcda file is created
for each object file compiled with this option. It contains arc transition
counts, and some summary information.
</SNIP>

[root@xyralab_02 core]# find . -name "*.gcda" | wc -l
161
[root@xyralab_02 core]# cd fop/.libs/
[root@xyralab_02 .libs]# ls
fom.gcda  fop_base.gcda  fop_format_c.gcda  fop_format.gcda  fop.gcda           fop_iterator.gcno  libmotr-fop.a
fom.gcno  fop_base.gcno  fop_format_c.gcno  fop_format.gcno  fop.gcno           fop_iterator.o     libmotr-fop.la
fom.o     fop_base.o     fop_format_c.o     fop_format.o     fop_iterator.gcda  fop.o

Run gcov-gen-html script from scripts/coverage/

[root@xyralab_02 scripts]# pwd
/laptop/motr/coverage/motr/scripts
[root@xyralab_02 coverage]# ./gcov-gen-html user /laptop/motr/coverage/motr/ ~/lcov/user/

The script will run lcov with correct options so that html output of lcov is
stored in ~/lcov/user/ directory.

[root@xyralab_02 scripts]# ls ~/lcov/user/
addb       capa     desim        fol        index.html         ioservice  nrs   ruby.png  stob        utils
amber.png  cob      dtm          fop        index-sort-b.html  layout     pool  sm        udb         xcode
app.info   motr  emerald.png  gcov.css   index-sort-f.html  lib        reqh  snow.png  updown.png  xdr
balloc     db       fid          glass.png  index-sort-l.html  net        rpc   sns       usr

Use lcov-process script from scripts/coverage directory, to process index.html
generated by lcov and generate plain text table of coverage data.

[root@xyralab_02 coverage]# ./lcov-process -i ~/lcov/user/index.html
Module line_cov% lines_hit lines_total function_cov% functions_hit functions_total branch_cov% branches_hit branches_total

motr 86.7%   13 15   100.0%  3 3     75.0%   6 8
db      90.0%   548 609 91.2%   83 91   55.6%   188 338
lib     83.8%   887 1058        85.2%   173 203 56.8%   362 637
..
lib/user_space  77.4%   448 579 85.3%   58 68   51.0%   157 308
lib/ut  90.1%   1197 1328       66.9%   93 139  82.9%   335 404
net     86.5%   507 586 92.7%   51 55   59.8%   266 445
net/bulk_emulation      91.2%   1533 1681       90.9%   130 143 62.4%   640 1025
net/bulk_emulation/st   83.2%   607 730 81.8%   27 33   57.1%   234 410
net/bulk_emulation/ut   98.5%   1144 1161       93.3%   28 30   72.2%   26 36
net/ut  99.1%   531 536 97.3%   36 37   68.4%   78 114
...
xdr     51.1%   135 264 64.7%   11 17   28.8%   36 125
xdr/ut  47.8%   64 134  21.7%   5 23    20.6%   75 364
[root@xyralab_02 scripts]#


* Collecting test coverage data for motr kernel modules:
===========================================================

- Compile linux kernel with CONFIG_GCOV_KERNEL=y option.
- You might want to set CONFIG_LOCALVERSION="-gcov", so that "-gcov"
  will be appended to kernel version suffix e.g. 2.6.34.7-gcov
  This will make it easy to identify kernel built with CONFIG_GCOV_KERNEL option set.

- Install and boot with the vmlinuz-2.6.*.*-gcov kernel.
[root@xyralab_02 linux_kernel]# uname -r
2.6.34.7-gcov

- Mount debugfs and clear gcov counters.

[root@xyralab_02 scripts]# mount -t debugfs none /sys/kernel/debug/
[root@xyralab_02 scripts]# echo 1 > /sys/kernel/debug/gcov/reset

- Configure and compile motr/core in same way as given in above section.
  Make sure that --with-linux= argument of ./configure script, points to
  linux kernel tree compiled with CONFIG_GCOV_KERNEL option set to y.

Run utils/linux_kernel/ut.sh or execute code from m0tr.ko by any
other means.

[root@xyralab_02 linux_kernel]# pwd
/laptop/motr/coverage/motr/utils/linux_kernel
[root@xyralab_02 linux_kernel]# ./ut.sh

Run scripts/coverage/gcov-gen-html to collect stats, as specified in above section.

[root@xyralab_02 coverage]# ./gcov-gen-html kernel /laptop/motr/coverage/motr/ ~/lcov/kernel

[root@xyralab_02 scripts]# ls ~/lcov/kernel/
addb       dtm          fop        index.html         ioservice  pool      snow.png    xcode
amber.png  m0t1fs                emerald.png  index-sort-b.html  layout     rpc       sns
app1.info  cob                   fid          gcov.css   index-sort-f.html  lib        ruby.png  stob
app.info   db                    fol          glass.png  index-sort-l.html  net        sm        updown.png

