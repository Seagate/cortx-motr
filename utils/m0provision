#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


source "/opt/seagate/cortx/motr/common/cortx_error_codes.sh"
source "/opt/seagate/cortx/motr/common/cortx_util_funcs.sh"

SCRIPT_ACTION=""

workflow()
{
cat << EOF

    The m0provision script will be called by the provisioner after the
    installation of Motr RPM, for setting configurations and testing
    sanity of the setup.

EOF
}

help()
{
cat << EOF
    *** CAUTION ***

    The $0 script should be invoked only by the provisioner.
    Should be invoked with sudo.

    Usage:
    sudo $0 [ACTION] ARGS
        ACTION: post_install | init | config | test | reset
            ARGS (post_install) : TOBE implemented.
            ARGS (init)         : TOBE implemented.
            ARGS (config)       : config
            ARGS (test)         : test
            ARGS (reset)        : TOBE implemented.
EOF
}

do_post_install()
{
    msg "TOBE implemented."
    die 0
}

do_init()
{
    msg "TOBE implemented."
    die $ERR_NOT_IMPLEMENTED
}

do_config()
{
    msg "Update config"
    /opt/seagate/cortx/motr/libexec/motr_cfg.sh
    RESULT=$?
    die $RESULT
}

do_test()
{
    local RESULT=0
    msg "The motr installation will be tested for sanity."
    msg "The following tests will be done."
    msg "\t/opt/seagate/cortx/motr/sanity/cortx_lnet_sanity.sh"
    msg "\t/opt/seagate/cortx/motr/sanity/cortx_srvc_sanity.sh"
    msg "\t/opt/seagate/cortx/motr/sanity/motr_sanity.sh"

    msg "Executing cortx_lnet_sanity.sh"
    /opt/seagate/cortx/motr/sanity/cortx_lnet_sanity.sh
    die_if_failed $? "Script [cortx_lnet_sanity.sh] failed."

    msg "Executing cortx_srvc_sanity.sh"
    /opt/seagate/cortx/motr/sanity/cortx_srvc_sanity.sh
    die_if_failed $? "Script [cortx_srvc_sanity.sh] failed."

    /opt/seagate/cortx/motr/libexec/motr_cfg.sh -d MOTR_M0D_IOS_BESEG_SIZE /etc/sysconfig/motr
    /opt/seagate/cortx/motr/libexec/motr_cfg.sh -d MOTR_M0D_BELOG_SIZE /etc/sysconfig/motr
    msg "Executing motr_sanity.sh"
    /opt/seagate/cortx/motr/sanity/motr_sanity.sh
    rc=$?
    /opt/seagate/cortx/motr/libexec/motr_cfg.sh -e MOTR_M0D_IOS_BESEG_SIZE /etc/sysconfig/motr
    /opt/seagate/cortx/motr/libexec/motr_cfg.sh -e MOTR_M0D_BELOG_SIZE /etc/sysconfig/motr
    die_if_failed $rc "Script [motr_sanity.sh] failed."

    die $ERR_SUCCESS
}

do_reset()
{
    msg "TOBE implemented."
    die $ERR_NOT_IMPLEMENTED

}

# Write all the functions and set all variables above this line.
# main()

is_sudoed
msg "\n\nWELCOME TO THE m0 setup for the provisioner.\n\n"
workflow

if [ "$1" == "" ]; then
    help
    die $ERR_INVALID_ARGS
fi
SCRIPT_ACTION=$1

case $SCRIPT_ACTION in

    post_install)
        do_post_install
        ;;

    init)
        do_init
        ;;

    config)
        do_config
        ;;

    test)
        do_test
        ;;

    reset)
        do_reset
        ;;

    *)
        msg "Invalid action."
        help
        die $ERR_INVALID_ARGS
        ;;
esac

## We donot return here, because all the cases will terminate the script
