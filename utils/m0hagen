#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

"""m0hagen utility converts YAML description of a m0_ha_msg into xcode string.
`m0hagen --decode' does backward conversion (from xcode to YAML).

Examples
========

1. YAML description of a m0_ha_msg containing m0_ha_msg_nvec
   of M0_HA_NVEC_GET type as its payload:
# ------------------------ >8 ------------------------
!ha_msg
fid:     !fid [0,0]
process: ^r|0.0
service: ^s|0.0
time: 0
epoch: 0
tag:  0
data: !ha_nvec_get
  get_id: 77
  fids:
    - ^j|1.1
    - ^j|1.2
    - ^j|1.3
    - ^j|1.4
# ------------------------ >8 ------------------------

2. m0_ha_msg containing m0_ha_msg_nvec of M0_HA_NVEC_SET type:
# ------------------------ >8 ------------------------
!ha_msg
fid:     !fid [0,0]
process: ^r|0.0
service: ^s|0.0
time: 0
epoch: 0
tag:  0
data: !ha_nvec_set
  notes:
    - {fid: ^c|1.1, state: failed}
    - {fid: ^c|1.2, state: transient}
  get_id: 5 # optional, defaults to 0
# ------------------------ >8 ------------------------

Fid specification
=================

These YAML values represent the same fid:

^d|1.5
!fid '^d|1:5'
!fid [0x6400000000000001, 5]

Note that we cannot use xcode custom format in the first line, because
':' is not allowed in unquoted YAML values. So either `^d|1.5` (without
backticks) or `!fid '^d|1:5'` should be used.

Pipeline
========

data      | | encode        | ^ decode          | examples     |
          | v               | |                 |              |
----------+-----------------+-------------------+--------------|
yaml_str  |                 |                   |              |
          | yaml.load       | yaml.dump         |              |
XCodeable | - - - - - - - - + - - - - - - - - - | HAMsg, Fid   |
          | XCodeable.to_xc | XCodeable.from_xc |              |
XC        | - - - - - - - - + - - - - - - - - - | XCUnion, Fid |
          | XC.to_xcode_str | XC.from_xcode_str |              |
xcode_str |                 |                   |              |
---------------------------------------------------------------'
"""

# TODO:
#   - gracefully handle errors
#   - enforce correctness of values defined in Motr (e.g., `ha_states'
#     should be in sync with `m0_ha_obj_state')
#   - ? support "smart fids" a-la m0confgen: objv-94, controller-4:2

from __future__ import print_function

import yaml
import re
from ply import lex, yacc
import argparse
import sys
import unittest
import inspect


__copyright__ = """

  Copyright (c) 2016-2020 Seagate Technology LLC and/or its Affiliates

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 
  For any questions about this software or licensing,
  please email opensource@seagate.com or cortx-questions@seagate.com.

"""
__author__ = 'opensource@seagate.com'
__version__ = '2.0'
__all__ = ['encode', 'decode']


def debug_print(s=None, show_file=False):
    assert s is None or type(s) is str
    upper_frame = inspect.getouterframes(inspect.currentframe())[1]
    print('DEBUG [{}{}]{}'.format(upper_frame[1] + ':' if show_file else '',
                                  upper_frame[2],  # lineno
                                  ' ' + s if s else ''), file=sys.stderr)


def encode(yaml_str):
    """Convert YAML description of a m0_ha_msg to xcode string.
    """
    data = yaml.safe_load(yaml_str)
    if data is not None:
        assert type(data) is HAMsg
        return data.to_xc().to_xcode_str()


def decode(xcode_str):
    """Convert xcode string representation of a m0_ha_msg to YAML.
    """
    xc = XCParser().parse(xcode_str)
    if xc is not None:
        ham = HAMsg.from_xc(xc)
        return yaml.safe_dump(ham)


def add_yaml_representer(data_type, representer):
    for dumper in yaml.Dumper, yaml.SafeDumper:
        yaml.add_representer(data_type, representer, dumper)


def add_yaml_constructor(tag, constructor):
    for loader in yaml.Loader, yaml.SafeLoader:
        yaml.add_constructor(tag, constructor, loader)


class XCodeable(object):

    def to_xc(self):
        """Convert self into XC object.
        """
        raise NotImplementedError(self.__class__.__name__ + '.to_xc')

    @classmethod
    def from_xc(cls, xc):
        """Convert XC object into an instance of cls.
        """
        raise NotImplementedError(cls.__name__ + '.from_xc')


class XC(object):
    """Internal representation of xcode object."""

    def to_xcode_str(self):
        """Convert self into xcode string.
        """
        raise NotImplementedError(self.__class__.__name__ + '.to_xcode_str')

    @classmethod
    def from_xcode_str(cls, xcode_str):
        """Convert xcode string into an instance of cls.
        """
        return XCParser().parse(xcode_str)

# --------------------------------------------------------------------
# m0_fid


class Fid(XC, XCodeable):
    yaml_tag = u'!fid'

    # m0_fid_type::ft_id of conf objects; see `utils/m0confgen --types`
    ftypes_conf = 'acdegjklnoprsStvv'

    # We cannot use raw custom xcode format (XCParser.p_custom) in unquoted
    # YAML values, because ':' is not allowed in those;
    # see http://pyyaml.org/wiki/YAMLColonInFlowContext for details.
    re_conf = re.compile(r'^\^[%s]\|(\d+)[:.](\d+)$' % ftypes_conf)

    def __init__(self, container, key, ftype=None):
        assert type(container) is int
        assert type(key) is int
        self.container, self.key = container, key
        if ftype is not None:
            assert ftype in Fid.ftypes_conf, \
                "Invalid `ftype' argument: {!r}".format(ftype)
            assert container >> 56 == 0
            self.container |= ord(ftype) << 56

    def ftype(self):
        ft = self.container >> 56
        if ft != 0 and ft in map(ord, Fid.ftypes_conf):
            return chr(ft)

    def conf_p(self):
        return bool(self.ftype())

    def __repr__(self):
        ft = self.ftype()
        if ft is None:
            return '{}({}, {})'.format(self.__class__.__name__,
                                       self.container, self.key)
        return '{}({}, {}, {!r})'.format(
            self.__class__.__name__,
            self.container & 0xffffffffffffff, self.key, ft)

    def __eq__(self, other):
        # yaml.dump() will pass None and () as `other'
        return isinstance(other, self.__class__) and \
            self.__dict__ == other.__dict__

    def to_note(self):
        return HANote(self, 'unknown')

    def to_xcode_str(self):
        ft = self.ftype()
        if ft is None:
            if self.container == self.key == 0:
                return '(0,0)'
            return '(%#x, %#x)' % (self.container, self.key)
        return '^%s|%u:%u' % (ft, self.container & 0xffffffffffffff, self.key)

    def to_xc(self):
        return self

    @classmethod
    def from_xc(cls, xc):
        if type(xc) is cls:
            return xc
        assert type(xc) is XCRecord and list(map(type, xc.items)) == [int]*2
        return cls(*xc.items)

    def _to_yaml(self):
        return self.to_xcode_str().replace(':', '.', 1)

    @classmethod
    def _from_yaml(cls, yaml_val):
        m = re.match(cls.re_conf, yaml_val)
        return Fid(int(m.group(1)), int(m.group(2)), yaml_val[1])

    @classmethod
    def yaml_representer(cls, dumper, fid):
        if fid.ftype():
            return dumper.represent_scalar(cls.yaml_tag, fid._to_yaml())
        return dumper.represent_sequence(cls.yaml_tag,
                                         (fid.container, fid.key))

    @classmethod
    def yaml_constructor(cls, loader, node):
        if isinstance(node, yaml.SequenceNode):
            return cls(*loader.construct_sequence(node))
        return cls._from_yaml(node.value)


add_yaml_representer(Fid, Fid.yaml_representer)
add_yaml_constructor(Fid.yaml_tag, Fid.yaml_constructor)
yaml.add_implicit_resolver(Fid.yaml_tag, Fid.re_conf)
yaml.add_implicit_resolver(Fid.yaml_tag, Fid.re_conf,
                           Loader=yaml.SafeLoader, Dumper=yaml.SafeDumper)

# --------------------------------------------------------------------
# m0_ha_msg_nvec

# enum m0_ha_obj_state
ha_states = ['unknown', 'online', 'failed', 'transient', 'repair', 'repaired',
             'rebalance', 'dtm-recovering']


class HAMsgNVec(XCodeable):
    """struct m0_ha_msg_nvec"""

    size = 1024  # = M0_HA_STATE_UPDATE_LIMIT

    def __init__(self, get_p, get_id, ignore_same_state, items):
        assert list(map(type, [get_p, get_id, ignore_same_state, items])) == \
            [bool, int, bool, list]  # XXX mypy
        assert get_id > 0 if get_p else get_id >= 0
        assert items and len(items) <= self.size
        if get_p:
            # M0_HA_NVEC_GET
            assert all(map(Fid.conf_p, items)), \
                """Invalid `items' argument: {!r}
Non-empty list of conf fids expected.""".format(items)
        else:
            # M0_HA_NVEC_SET
            for x in items:
                assert type(x) is dict and \
                    set(x.keys()) == set(['fid', 'state']), \
                    'Invalid item: ' + repr(x)
                assert Fid.conf_p(x['fid'])
                assert x['state'] in ha_states
        self.get_p, self.get_id, self.items = get_p, get_id, items
        self.ignore_same_state = ignore_same_state

    def __repr__(self):
        args = ', '.join(repr(x) for x in [
            self.get_p, self.get_id, self.ignore_same_state, self.items])
        return '{}({})'.format(self.__class__.__name__, args)

    def __eq__(self, other):
        # yaml.dump() will pass None and () as `other'
        return isinstance(other, self.__class__) and \
            self.__dict__ == other.__dict__

    def to_xc(self):
        if self.get_p:
            notes = [Fid.to_note(x) for x in self.items]
        else:
            notes = [HANote(x['fid'], x['state']) for x in self.items]
        notes += [Fid(0, 0).to_note()]*(HAMsgNVec.size - len(self.items))
        return XCUnion(HAMsg.tag_of(self.__class__),
                       XCRecord(int(self.get_p), self.get_id,
                                int(self.ignore_same_state), len(self.items),
                                XCArray(*map(HANote.to_xc, notes))))

    @classmethod
    def from_xc(cls, xc):
        assert type(xc) is XCUnion
        assert xc.tag == HAMsg.tag_of(cls)
        assert len(xc.items) == 1
        rec = xc.items[0]
        assert type(rec) is XCRecord
        assert list(map(type, rec.items)) == [int]*4 + [XCArray]
        get_p, get_id, ignore_same_state, nr_elems, arr = rec.items
        assert get_id > 0 if get_p else get_id >= 0
        assert ignore_same_state in (0, 1)
        assert 0 < nr_elems <= cls.size
        assert list(map(type, arr.items)) == [XCRecord]*HAMsgNVec.size
        assert arr.items[nr_elems:] == \
            tuple([Fid(0, 0).to_note().to_xc()]*(HAMsgNVec.size - nr_elems))
        notes = [HANote.from_xc(x) for x in arr.items[:nr_elems]]
        if get_p:
            assert all([note.state == 'unknown' for note in notes])
            return cls(True, get_id, bool(ignore_same_state),
                       [note.fid for note in notes])
        return cls(False, get_id, bool(ignore_same_state),
                   [dict(fid=note.fid, state=note.state) for note in notes])

    @classmethod
    def yaml_representer(cls, dumper, x):
        if x.get_p:
            return dumper.represent_mapping(
                u'!ha_nvec_get', {'get_id': x.get_id,
                                  'ignore_same_state': x.ignore_same_state,
                                  'fids': x.items})
        d = {'ignore_same_state': x.ignore_same_state, 'notes': x.items}
        if x.get_id != 0:
            d['get_id'] = x.get_id
        return dumper.represent_mapping(u'!ha_nvec_set', d)

    @classmethod
    def yaml_constructor(cls, get_p):
        assert type(get_p) is bool

        def ctor(loader, node):
            d = loader.construct_mapping(node, deep=True)
            if get_p:
                assert set(d.keys()) == set([
                    'get_id', 'ignore_same_state', 'fids'])
            else:
                assert set(d.keys()) in (
                    set(['notes', 'ignore_same_state']),
                    set(['notes', 'ignore_same_state', 'get_id']))
            return cls(get_p,
                       d['get_id'] if get_p else d.get('get_id', 0),
                       d['ignore_same_state'],
                       d['fids' if get_p else 'notes'])
        return ctor


add_yaml_representer(HAMsgNVec, HAMsgNVec.yaml_representer)
add_yaml_constructor(u'!ha_nvec_get', HAMsgNVec.yaml_constructor(True))
add_yaml_constructor(u'!ha_nvec_set', HAMsgNVec.yaml_constructor(False))


class HANote(XCodeable):
    """struct m0_ha_note"""

    def __init__(self, fid, state):
        assert type(fid) is Fid and state in ha_states
        self.fid, self.state = fid, state

    def __eq__(self, other):
        return self.__dict__ == other.__dict__

    def __repr__(self):
        return '{}({!r}, {!r})'.format(self.__class__.__name__,
                                       self.fid, self.state)

    def to_xc(self):
        return XCRecord(self.fid, ha_states.index(self.state))

    @classmethod
    def from_xc(cls, xc):
        assert type(xc) is XCRecord
        fid, state = xc.items
        if type(fid) is XCRecord:
            assert list(map(type, fid.items)) == [int]*2
            fid = Fid(*fid.items)
        return cls(fid, ha_states[state])

# --------------------------------------------------------------------
# m0_ha_msg


class HAMsg(XCodeable):
    """struct m0_ha_msg"""

    yaml_tag = u'!ha_msg'

    # enum m0_ha_msg_type
    types = (
        None,  # M0_HA_MSG_INVALID
        None,  # M0_HA_MSG_STOB_IOQ
        HAMsgNVec,  # M0_HA_MSG_NVEC
        None,  # M0_HA_MSG_FAILURE_VEC_REQ
        None,  # M0_HA_MSG_FAILURE_VEC_REP
        None,  # M0_HA_MSG_KEEPALIVE_REQ
        None,  # M0_HA_MSG_KEEPALIVE_REP
        None,  # M0_HA_MSG_EVENT_PROCESS
        None,  # M0_HA_MSG_EVENT_SERVICE
        None,  # M0_HA_MSG_EVENT_RPC
        None,  # M0_HA_MSG_BE_IO_ERR
	None   # M0_HA_MSG_SNS_ERR
    )

    def __init__(self, data, fid, process, service, time=0, epoch=0, tag=0):
        assert type(data) in self.types  # NB: type(None) is not None
        fid, process, service = map(Fid.from_xc, [fid, process, service])
        assert all(type(x) is int for x in [time, epoch, tag])
        self.data = data
        self.fid, self.process, self.service = fid, process, service
        self.time, self.epoch, self.tag = time, epoch, tag

    def __eq__(self, other):
        # yaml.dump() will pass None and () as `other'
        return isinstance(other, self.__class__) and \
            self.__dict__ == other.__dict__

    def __repr__(self):
        return '{}({!r}, {!r}, {!r}, {!r}, time={!r}, epoch={!r}, tag={!r})'.\
            format(self.__class__.__name__, self.data, self.fid, self.process,
                   self.service, self.time, self.epoch, self.tag)

    @classmethod
    def tag_of(cls, data_type):
        assert issubclass(data_type, XCodeable)
        return cls.types.index(data_type)

    def to_xc(self):
        return XCRecord(self.fid, self.process, self.service, self.time,
                        self.epoch, self.data.to_xc(), self.tag)

    @classmethod
    def from_xc(cls, xc):
        assert type(xc) is XCRecord
        fid, process, service = xc.items[:3]
        time, epoch, data, tag = xc.items[3:]
        assert type(data) is XCUnion
        assert cls.types[data.tag] is not None
        return cls(cls.types[data.tag].from_xc(data), fid, process, service,
                   time, epoch, tag)

    @classmethod
    def yaml_representer(cls, dumper, x):
        return dumper.represent_mapping(
            cls.yaml_tag,
            dict(fid=x.fid, process=x.process, service=x.service,
                 time=x.time, epoch=x.epoch, tag=x.tag, data=x.data))

    @classmethod
    def yaml_constructor(cls, loader, node):
        return cls(**loader.construct_mapping(node, deep=True))


add_yaml_representer(HAMsg, HAMsg.yaml_representer)
add_yaml_constructor(HAMsg.yaml_tag, HAMsg.yaml_constructor)

# --------------------------------------------------------------------
# XC objects


class _XCSeq(XC):

    def __init__(self, *args):
        self.items = args

    def __repr__(self):
        assert type(self.items) is tuple
        return '{}({})'.format(self.__class__.__name__,
                               ', '.join(map(repr, self.items)))

    def __eq__(self, other):
        return self.__dict__ == other.__dict__

    def _items_to_xcode_str(self):
        def conv(x):
            if isinstance(x, XC):
                return x.to_xcode_str()
            if type(x) is str:
                return '"%s"' % x
            return repr(x)
        return ', '.join(map(conv, self.items))


class XCUnion(_XCSeq):

    def __init__(self, tag, *args):
        assert type(tag) is int
        self.tag, self.items = tag, args

    def __repr__(self):
        return '{}({})'.format(self.__class__.__name__,
                               ', '.join(map(repr, (self.tag,) + self.items)))

    def __eq__(self, other):
        return self.items == other.items

    def to_xcode_str(self):
        return '{%u|%s%s}' % (self.tag, ' ' if self.items else '',
                              self._items_to_xcode_str())


class XCSequence(_XCSeq):

    def to_xcode_str(self):
        if self.items:
            return '[%u: %s]' % (len(self.items), self._items_to_xcode_str())
        return '[0]'


class XCRecord(_XCSeq):

    def to_xcode_str(self):
        return '(%s)' % self._items_to_xcode_str()

    def __eq__(self, other):
        if type(other) is Fid:  # XXX FIXME: leaky abstraction
            return self.items == other.container, other.key
        return self.items == other.items


class XCArray(_XCSeq):

    def to_xcode_str(self):
        return '<%s>' % self._items_to_xcode_str()

# --------------------------------------------------------------------
# xcode parsing


class XCLexer(object):
    tokens = ('HEXNUM', 'OCTNUM', 'DECNUM', 'STRING', 'LETTER')
    literals = '()[]{}<>,:.^|'
    t_ignore = ' \t\r\v'

    def __init__(self, **kwargs):
        self.lexer = lex.lex(module=self, **kwargs)
        self.input = self.lexer.input
        self.token = self.lexer.token
        self.lineno = self.lexer.lineno
        self.lexpos = self.lexer.lexpos

    def t_HEXNUM(self, t):
        r'\b0[xX][0-9a-fA-F]+\b'
        t.value = int(t.value, 16)
        return t

    def t_OCTNUM(self, t):
        r'\b0[0-7]+\b'
        t.value = int(t.value, 8)
        return t

    def t_DECNUM(self, t):
        r'\b\d+\b'
        t.value = int(t.value)
        return t

    def t_STRING(self, t):
        r'"[^"]*"'
        t.value = t.value[1:-1]
        return t

    def t_LETTER(self, t):
        r'\b[A-Za-z]\b'
        return t

    def t_comment(self, t):
        r'\#.*'

    def t_newline(self, t):
        r'\n+'
        t.lexer.lineno += len(t.value)

    def t_error(self, t):
        raise SyntaxError("Illegal character '%s' at byte %u" % (t.value[0],
                                                                 t.lexpos + 1))

    # def test(self, data):
    #     self.input(data)
    #     while True:
    #         t = self.token()
    #         if t is None:
    #             break
    #         print(t, file=sys.stderr)


class XCParser(object):
    """Parses xcode string. See m0_xcode_read() in xcode/xcode.h."""

    debug = False  # create `parser.out'?
    write_tables = False  # create `parsetab.py'?
    tracking = True  # track positions of all grammar symbols, not only tokens?

    def __init__(self, **kwargs):
        self.lexer = XCLexer()
        self.tokens = XCLexer.tokens
        self.start = 's'
        kwargs.setdefault('debug', self.debug)
        kwargs.setdefault('write_tables', self.write_tables)
        self.parser = yacc.yacc(module=self, **kwargs)

    def parse(self, *args, **kwargs):
        kwargs.setdefault('lexer', self.lexer)
        kwargs.setdefault('tracking', self.tracking)
        return self.parser.parse(*args, **kwargs)

    def position(self, p, n):
        return ' at byte %u' % (p.lexpos(n) + 1) if self.tracking else ''

    # Note that the argument is a token, not a parser.
    def p_error(self, t):
        if t is None:
            raise SyntaxError('Unexpected EOF')
        raise SyntaxError('Syntax error at byte %u' % (t.lexpos + 1))

    def p_empty(self, p):
        """empty :"""

    def p_number(self, p):
        """number : DECNUM
                  | HEXNUM
                  | OCTNUM
        """
        p[0] = p[1]

    def p_s(self, p):
        """s : record
             | union
             | sequence
             | array
             | atom
             | custom
        """
        p[0] = p[1]

    def p_slist(self, p):
        """slist : s
                 | slist ',' s
        """
        if len(p) == 2:
            p[0] = [] if p[1] is None else [p[1]]
        else:
            p[0] = p[1] + [p[3]]

    def p_record(self, p):
        """record : '(' slist ')'
        """
        p[0] = XCRecord(*p[2])

    def p_union(self, p):
        """union : '{' number '|' s '}'
        """
        if p[4] is None:
            p[0] = XCUnion(p[2])
        else:
            p[0] = XCUnion(p[2], p[4])

    def p_sequence(self, p):
        """sequence : STRING
                    | '[' number ']'
                    | '[' number ':' slist ']'
        """
        if len(p) == 2:
            p[0] = p[1]
        elif p[3] == ']':
            if p[2] != 0:
                raise SyntaxError("""Bad list%s
The length is non-zero, but there are no elements""" % self.position(p, 1))
            p[0] = XCSequence()
        else:
            if p[2] != len(p[4]):
                raise SyntaxError("""Bad list{}
Length ({}) != number of elements ({})""".format(self.position(p, 1),
                                                 p[2], len(p[4])))
            p[0] = XCSequence(*p[4])

    def p_array(self, p):
        """array : '<' slist '>'
        """
        p[0] = XCArray(*p[2])

    def p_atom(self, p):
        """atom : number
                | empty
        """
        p[0] = p[1]

    def p_custom(self, p):
        """custom : '^' LETTER '|' number ':' number
        """
        p[0] = Fid(p[4], p[6], ftype=p[2])  # XCRecord would be less precise

# ------------------------------------------------------------------
# Tests


class TestXCObjects(unittest.TestCase):

    def test_repr(self):
        for cls in XCRecord, XCSequence, XCArray:
            self.assertEqual(repr(cls()), cls.__name__ + '()')
            self.assertEqual(repr(cls(1)), cls.__name__ + '(1)')
            self.assertEqual(repr(cls(1, 2)), cls.__name__ + '(1, 2)')
        self.assertEqual(repr(XCUnion(4)), 'XCUnion(4)')
        self.assertEqual(repr(XCUnion(4, 1)), 'XCUnion(4, 1)')
        self.assertEqual(repr(XCUnion(4, 1, 2)), 'XCUnion(4, 1, 2)')

    def test_to_from_xcode_str(self):
        for xc, s in [(XCRecord(0, '1', 2), '(0, "1", 2)'),
                      (XCRecord(0), '(0)'),
                      (XCRecord(), '()'),
                      (XCSequence(0, '1', 2), '[3: 0, "1", 2]'),
                      (XCSequence(0), '[1: 0]'),
                      (XCSequence(), '[0]'),
                      (XCArray(0, '1', 2), '<0, "1", 2>'),
                      (XCArray(0), '<0>'),
                      (XCUnion(0, '1'), '{0| "1"}'),
                      (XCUnion(0), '{0|}'),
                      (XCUnion(0, XCRecord(1, 2)), '{0| (1, 2)}'),
                      (XCRecord(0, XCSequence(1, 2)), '(0, [2: 1, 2])'),
                      (XCSequence(0, XCUnion(1, XCRecord(2, XCRecord(3))), 4),
                       '[3: 0, {1| (2, (3))}, 4]')]:
            self.assertEqual(xc.to_xcode_str(), s)
            self.assertEqual(XC.from_xcode_str(s), xc)


class TestFid(unittest.TestCase):

    def test_repr(self):
        self.assertEqual(repr(Fid(1, 23)), 'Fid(1, 23)')
        self.assertEqual(repr(Fid(1, 23, 's')), "Fid(1, 23, 's')")

    def test_ftype(self):
        self.assertIsNone(Fid(1, 23).ftype())
        self.assertEqual(Fid(1, 23, 's').ftype(), 's')
        self.assertTrue(Fid(1, 23, 's').conf_p())
        self.assertEqual(Fid(0x6a00000000000001, 91).ftype(), 'j')
        self.assertTrue(Fid(0x6a00000000000001, 91).conf_p())
        self.assertIsNone(Fid(0x5a00000000000001, 91).ftype())

    def test_to_note(self):
        for fid in Fid(1, 1, 'e'), Fid(0, 0):
            self.assertEqual(fid.to_note(), HANote(fid, 'unknown'))

    def test_to_from_xcode_str(self):
        for fid, s in [(Fid(1, 23), '(0x1, 0x17)'),
                       (Fid(1, 23, 's'), '^s|1:23'),
                       (Fid(0, 0), '(0,0)')]:
            self.assertEqual(fid.to_xcode_str(), s)
            self.assertEqual(XC.from_xcode_str(s), fid)

    def test_to_from_xc(self):
        for fid in [Fid(1, 2), Fid(3, 4, 'o')]:
            self.assertEqual(fid.to_xc(), fid)
            self.assertEqual(Fid.from_xc(fid), fid)
        self.assertEqual(Fid.from_xc(XCRecord(4, 5)), Fid(4, 5))
        self.assertEqual(Fid.from_xc(XCRecord(0x6e00000000000006, 7)),
                         Fid(6, 7, 'n'))

    def test_to_from_yaml(self):
        self.assertEqual(Fid(1, 23)._to_yaml(), '(0x1, 0x17)')
        self.assertEqual(Fid(1, 23, 's')._to_yaml(), '^s|1.23')
        self.assertEqual(Fid(0x6a00000000000001, 91)._to_yaml(), '^j|1.91')
        self.assertEqual(Fid(0x5a00000000000001, 91)._to_yaml(),
                         '(0x5a00000000000001, 0x5b)')
        self.assertEqual(Fid(0, 0)._to_yaml(), '(0,0)')
        self.assertEqual(Fid._from_yaml('^s|1.23'), Fid(1, 23, 's'))
        self.assertEqual(Fid._from_yaml('^j|1.91'), Fid(1, 91, 'j'))

    def test_yaml_dump_load(self):
        samples = [(Fid(1, 23), '!fid [1, 23]\n'),
                   (Fid(1, 23, ftype='s'), '^s|1.23\n...\n')]
        for x, yml in samples:
            self.assertEqual(yaml.safe_dump(x), yml)
            self.assertEqual(yaml.dump(x), yml)
            self.assertEqual(yaml.safe_load(yml), x)
            self.assertEqual(yaml.load(yml), x)
        self.assertEqual(yaml.load("!fid '^j|1:2'"), Fid(1, 2, ftype='j'))
        self.assertEqual(yaml.load("!fid '^j|1.2'"), Fid(1, 2, ftype='j'))


class TestXCParser(unittest.TestCase):

    def test_parse(self):
        def t(s, result):
            return self.assertEqual(XCParser().parse(s), result)

        t('10', 10)
        t('0xa', 10)
        t('012', 10)
        t('"abc"', 'abc')
        t('(0, 1)', XCRecord(0, 1))
        t('(0, (1, 2))', XCRecord(0, XCRecord(1, 2)))
        t('(0)', XCRecord(0))
        t('()', XCRecord())
        self.assertRaises(SyntaxError, XCParser().parse, '{1| 1, 2}')
        t('{1| (1, 2)}', XCUnion(1, XCRecord(1, 2)))
        t('{3|}', XCUnion(3))
        t('[0]', XCSequence())
        t('[3: 6, 5, 4]', XCSequence(6, 5, 4))
        t('<7, 12, 0>', XCArray(7, 12, 0))
        t('^s|1:23', Fid(1, 23, ftype='s'))  # xcode custom (fid)
        t('(^s|1:23)', XCRecord(Fid(1, 23, 's')))
        t('(0, "one", {42| [3: ("x"), ("y"), ("z")]}, "two three")',
          XCRecord(0, 'one', XCUnion(42, XCSequence(*map(XCRecord, 'xyz'))),
                   'two three'))
        t("""\
((0,1), (2, 3, 4), 5, # comment
{2| (1, "abc", <
  ((0x6a00000000000001,0x5e),0),
  ((0,0),0)>)},
0)""",
          XCRecord(XCRecord(0, 1), XCRecord(2, 3, 4), 5,
                   XCUnion(2, XCRecord(1, 'abc', XCArray(
                       XCRecord(XCRecord(0x6a00000000000001, 0x5e), 0),
                       XCRecord(XCRecord(0, 0), 0)))),
                   0))
        t('{0x74| ((^t|1:0), 1, [1: ^p|1:0])}',
          XCUnion(0x74, XCRecord(XCRecord(Fid(1, 0, 't')), 1,
                                 XCSequence(Fid(1, 0, 'p')))))
        t("""\
[2:
 {0x74| ((^t|1:0), 1, (0xb, 0x16), ^o|1:4, ^v|1:5, 0,
         [3: "param-0", "param-1", "param-2"],
         [2: ^n|1:2, ^n|1:48], [1: ^S|1:3],
         [2: ^o|1:4, ^o|1:56], [1: ^p|1:0], [1: ^g|1:0])},
 {0x70| ((^p|1:0), [1: ^o|1:4])}]
""",
          XCSequence(
              XCUnion(0x74, XCRecord(
                  XCRecord(Fid(1, 0, 't')), 1, XCRecord(0xb, 0x16),
                  Fid(1, 4, 'o'), Fid(1, 5, 'v'), 0,
                  XCSequence('param-0', 'param-1', 'param-2'),
                  XCSequence(Fid(1, 2, 'n'), Fid(1, 48, 'n')),
                  XCSequence(Fid(1, 3, 'S')),
                  XCSequence(Fid(1, 4, 'o'), Fid(1, 56, 'o')),
                  XCSequence(Fid(1, 0, 'p')),
                  XCSequence(Fid(1, 0, 'g')))),
              XCUnion(0x70, XCRecord(
                  XCRecord(Fid(1, 0, 'p')), XCSequence(Fid(1, 4, 'o'))))))


class TestHANote(unittest.TestCase):

    def test_to_from_xc(self):
        note = HANote(Fid(1, 2, 't'), 'unknown')
        self.assertEqual(repr(note), "HANote(Fid(1, 2, 't'), 'unknown')")
        xc = note.to_xc()
        self.assertIsInstance(xc, XCRecord)
        self.assertEqual(HANote.from_xc(xc), note)
        self.assertEqual(
            HANote.from_xc(XCRecord(XCRecord(0x7400000000000001, 2), 0)),
            note)


class TestHAMsgNVec(unittest.TestCase):

    def test_repr(self):
        self.assertEqual(repr(HAMsgNVec(True, 100, False,
                                        [Fid(1, 2, 'r'), Fid(3, 4, 's')])),
                         'HAMsgNVec(True, 100, False,'
                         " [Fid(1, 2, 'r'), Fid(3, 4, 's')])")

    def test_yaml_dump(self):
        samples = [
            (HAMsgNVec(True, 100, False, [Fid(1, 2, 'r'), Fid(3, 4, 's')]),
             """!ha_nvec_get
fids: [^r|1.2, ^s|3.4]
get_id: 100
ignore_same_state: false
"""),
            (HAMsgNVec(False, 0, True,
                       [{'fid': Fid(1, 2, 'r'), 'state': 'online'},
                        {'fid': Fid(3, 4, 's'), 'state': 'failed'}]),
             """!ha_nvec_set
ignore_same_state: true
notes:
- {fid: ^r|1.2, state: online}
- {fid: ^s|3.4, state: failed}
"""),
            (HAMsgNVec(False, 3, False,
                       [{'fid': Fid(1, 2, 'r'), 'state': 'online'}]),
             """!ha_nvec_set
get_id: 3
ignore_same_state: false
notes:
- {fid: ^r|1.2, state: online}
""")]
        for x, yml in samples:
            self.assertEqual(yaml.safe_dump(x), yml)
            self.assertEqual(yaml.dump(x), yml)
        self.assertRaises(AssertionError, HAMsgNVec,
                          True, 0,  # get_id=0 is not allowed for "get" nvec
                          True, [Fid(1, 2, 'r'), Fid(3, 4, 's')])

    def test_yaml_load(self):
        samples = [
            ("""!ha_nvec_get
get_id: 100
fids:
  - !fid [0x6a00000000000001, 91]
  - !fid '^j|1:92'
  - ^j|1.93
ignore_same_state: false
""", HAMsgNVec(True, 100, False,
               [Fid(1, 91, 'j'), Fid(1, 92, 'j'), Fid(1, 93, 'j')])),
            ("""!ha_nvec_set
ignore_same_state: true
notes:
- {fid: ^c|1.1, state: failed}
""", HAMsgNVec(False, 0, True, [{'fid': Fid(1, 1, 'c'), 'state': 'failed'}])),
            ("""!ha_nvec_set
notes:
- {fid: ^c|1.1, state: failed}
get_id: 19
ignore_same_state: true
""", HAMsgNVec(False, 19, True, [{'fid': Fid(1, 1, 'c'), 'state': 'failed'}]))]
        for yml, x in samples:
            self.assertEqual(yaml.safe_load(yml), x)
            self.assertEqual(yaml.load(yml), x)

    def test_to_from_xc(self):
        for nvec in [
                HAMsgNVec(True, 10, False, [Fid(1, 94, 'j'), Fid(1, 93, 'j')]),
                HAMsgNVec(False, 0, True,
                          [{'fid': Fid(1, 2, 'k'), 'state': 'unknown'},
                           {'fid': Fid(1, 2, 'o'), 'state': 'online'},
                           {'fid': Fid(1, 3, 'o'), 'state': 'failed'}]),
                HAMsgNVec(False, 5, True,
                          [{'fid': Fid(1, 1, 'e'), 'state': 'online'}])]:
            xc = nvec.to_xc()
            self.assertIsInstance(xc, XCUnion)
            self.assertEqual(xc.tag, HAMsg.tag_of(HAMsgNVec))
            self.assertEqual(list(map(type, xc.items)), [XCRecord])
            self.assertEqual(HAMsgNVec.from_xc(xc), nvec)


class TestHAMsg(unittest.TestCase):

    def test_tag_of(self):
        self.assertEqual(HAMsg.tag_of(HAMsgNVec), 2)

    def test_to_from_xc(self):
        nvec = HAMsgNVec(True, 3, False, [Fid(1, 7, 'r')])
        msg = HAMsg(nvec, Fid(0, 0), Fid(1, 1, 'r'), Fid(1, 1, 's'))
        xc = msg.to_xc()
        self.assertIsInstance(xc, XCRecord)
        self.assertEqual(xc.items[5], nvec.to_xc())
        self.assertEqual(HAMsg.from_xc(xc), msg)

    def test_yaml_dump_load(self):
        samples = [
            (HAMsg(HAMsgNVec(True, 3, False, [Fid(1, 7, 'r')]),
                   Fid(0, 0), Fid(1, 1, 'r'), Fid(1, 1, 's')),
             """!ha_msg
data: !ha_nvec_get
  fids: [^r|1.7]
  get_id: 3
  ignore_same_state: false
epoch: 0
fid: !fid [0, 0]
process: ^r|1.1
service: ^s|1.1
tag: 0
time: 0
"""),
            (HAMsg(HAMsgNVec(False, 0, True,
                             [{'fid': Fid(1, 2, 'o'), 'state': 'online'},
                              {'fid': Fid(1, 3, 'o'), 'state': 'failed'}]),
                   Fid(1, 2), Fid(3, 4, 'r'), Fid(5, 6, 's'),
                   time=7, epoch=41, tag=8),
             """!ha_msg
data: !ha_nvec_set
  ignore_same_state: true
  notes:
  - {fid: ^o|1.2, state: online}
  - {fid: ^o|1.3, state: failed}
epoch: 41
fid: !fid [1, 2]
process: ^r|3.4
service: ^s|5.6
tag: 8
time: 7
""")]
        for x, yml in samples:
            self.assertEqual(yaml.safe_dump(x), yml)
            self.assertEqual(yaml.dump(x), yml)
            self.assertEqual(yaml.safe_load(yml), x)
            self.assertEqual(yaml.load(yml), x)

    def test_encode_decode(self):
        self.assertIsNone(encode(''))
        self.assertIsNone(decode(''))
        samples = [
            """!ha_msg
data: !ha_nvec_set
  ignore_same_state: false
  notes:
  - {fid: ^c|0.2, state: failed}
epoch: 0
fid: ^s|1.1
process: ^r|1.1
service: ^s|2.0
tag: 0
time: 0
""",
            """!ha_msg
data: !ha_nvec_get
  fids: [^n|1.7, ^o|1.15]
  get_id: 5
  ignore_same_state: true
epoch: 0
fid: !fid [0, 0]
process: ^r|0.0
service: ^s|0.0
tag: 0
time: 0
""",
            """!ha_msg
data: !ha_nvec_set
  get_id: 5
  ignore_same_state: true
  notes:
  - {fid: ^n|1.7, state: transient}
  - {fid: ^o|1.15, state: online}
epoch: 41
fid: !fid [1, 2]
process: ^r|1.3
service: ^s|2.4
tag: 1
time: 15
""",
            decode(encode("""--- !ha_msg
data: !ha_nvec_get
  get_id: 100 # m0_ha_msg_nvec::hmnv_id_of_get
  fids:
    - !fid [0x6a00000000000001, 94]
    - !fid '^j|1:93'
    - !fid '^j|1.92'
    - ^j|1.91
  ignore_same_state: false
# --------------
fid: !fid [0, 0]
process: ^r|1.1
service: ^s|1.1
time: 0
epoch: 112
tag: 0
"""))]
        for yml in samples:
            enc = encode(yml)
            self.assertTrue(enc.startswith('('), 'Unexpected result: ' + enc)
            self.assertEqual(decode(enc), yml)

# --------------------------------------------------------------------
# main


def main():
    p = argparse.ArgumentParser(
        usage='%(prog)s [OPTION]... [FILE]',
        description='Generates xcode representation of m0_ha_msg from its'
        ' description in YAML format.')
    p._optionals.title = 'Options'
    p.add_argument('-d', '--decode', help='convert xcode to yaml',
                   action='store_true')
    p.add_argument('--version', action='version',
                   version='%(prog)s ' + __version__)
    p.add_argument('--self-check', help='run unit tests and exit',
                   action='store_true')
    g = p.add_argument_group('Positional arguments')
    g.add_argument('file', metavar='FILE', nargs='?', default='-',
                   help='Input file. With no FILE, or when FILE is -,'
                   ' read standard input.')
    args = p.parse_args()

    if args.self_check:
        unittest.main(argv=sys.argv[:1])
    try:
        f = sys.stdin if args.file == '-' else open(args.file)
        conv = decode if args.decode else encode
        s = conv(f.read())
        if s is not None:
            print(s)
    except IOError as e:
        print(p.prog + ': ' + str(e), file=sys.stderr)
        return e.errno
    finally:
        # Workaround for https://bugs.python.org/issue11380
        # Steps to reproduce:
        #     $ ./m0hagen | :
        try:
            sys.stdout.flush()
        except IOError as e:
            return e.errno


if __name__ == '__main__':
    sys.exit(main())
