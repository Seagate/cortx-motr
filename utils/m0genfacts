#!/usr/bin/env ruby
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


require 'optparse'
require 'English'
require 'net/ssh'
require 'socket'
require 'facter'
require 'yaml'
require 'json'
require 'erb'
require 'pp'

#
# Constants
#

SELF       = File.expand_path(__FILE__)
PROG_NAME  = File.basename(SELF)
TOP_SRCDIR = File.dirname(SELF).gsub(%r{/(usr/)?s?bin|/?utils/?$}, '')

DEFAULT_TEMPLATE_FILE_PATH = '/usr/share/motr/templates/halon_facts.yaml.erb'.freeze

TEMPLATE_FILE_PATH = TOP_SRCDIR.empty? \
                        ? DEFAULT_TEMPLATE_FILE_PATH
                        : TOP_SRCDIR + '/scripts/install' + DEFAULT_TEMPLATE_FILE_PATH

DATA_UNITS                 = 8
PARITY_UNITS               = 2
BLOCK_SIZE                 = 4096
MD_REDUNDANCY              = 1
MIN_RPC_RECVQ_LEN          = 2048
BE_SEGMENT_SIZE            = 128 * 1024 * 1024  # 128MiB
BE_IOS_SEG_SIZE            = 512 * 1024 * 1024  # 512MiB
BE_LOG_SIZE                = 128 * 1024 * 1024  # 128MiB
BE_TX_PAYLOAD_SIZE_MAX     = 2   * 1024 * 1204  # 2MiB
BE_TX_REG_NR_MAX           = 256 * 1024
BE_TX_REG_SIZE_MAX         = 32  * 1024 * 1024  # 32MiB
BE_TXGR_FREEZE_TIMEOUT_MAX = 300                # 5min
BE_TXGR_FREEZE_TIMEOUT_MIN = 300                # 5min
BE_TXGR_PAYLOAD_SIZE_MAX   = 128 * 1024 * 1024  # 128MiB
BE_TXGR_REG_NR_MAX         = 2   * 1024 * 1204
BE_TXGR_REG_SIZE_MAX       = 512 * 1024 * 1024  # 512MiB
BE_TXGR_TX_NR_MAX          = 82

#
# Logging
#

def log(*messages)
    STDERR.puts('--->  ' + messages.join('') )
end

def debug(*messages)
    STDERR.puts('--->  ' + messages.join('') ) if $options[:verbose]
end

def die(*messages)
    abort "#{PROG_NAME}: ERROR: " + messages.join('')
end

#
# Command line options
#

$options = {
    config:                 STDIN,
    output:                 STDOUT,
    template:               TEMPLATE_FILE_PATH,
    remote_user:            Facter.value(:id),
    client_apps:            false,
    s3servers:              false,
    skip_fake_drives:       false,
    lnet_transport:         'tcp',
    dataunits:              DATA_UNITS,
    parityunits:            PARITY_UNITS,
    blocksize:              BLOCK_SIZE,
    mdredundancy:           MD_REDUNDANCY,
    minrpcrecvqlen:         MIN_RPC_RECVQ_LEN,
    besegsize:              BE_SEGMENT_SIZE,
    beiossegsize:           BE_IOS_SEG_SIZE,
    belogsize:              BE_LOG_SIZE,
    betxpayloadsizemax:     BE_TX_PAYLOAD_SIZE_MAX,
    betxregnrmax:           BE_TX_REG_NR_MAX,
    betxregsizemax:         BE_TX_REG_SIZE_MAX,
    betxgrfreezetimeoutmax: BE_TXGR_FREEZE_TIMEOUT_MAX,
    betxgrfreezetimeoutmin: BE_TXGR_FREEZE_TIMEOUT_MIN,
    betxgrpayloadsizemax:   BE_TXGR_PAYLOAD_SIZE_MAX,
    betxgrregnrmax:         BE_TXGR_REG_NR_MAX,
    betxgrregsizemax:       BE_TXGR_REG_SIZE_MAX,
    betxgrtxnrmax:          BE_TXGR_TX_NR_MAX,
}

OptionParser.new do |opts|
    opts.banner = <<END_USAGE
usage: #{PROG_NAME} [$options] disk1 disk2 ...
       #{PROG_NAME} [$options] < cluster.yaml

  Arguments:

    #{PROG_NAME} can operate in two modes: singlenode and cluster.

    In a singlenode mode, halon_facts.yaml configuration is created only for
    the current host, which is assigned 'confd', 'storage' and 'm0t1fs' roles.
    In this mode a list of storage devices should be passed as command-line
    arguments. Size of block devices can be provided via -S|--dev-size option,
    otherwise it will be queried automatically using `blockdev` command.

    In a cluster mode, a simplified cluster configuration should be passed via
    -c|--config option or it will be read from STDIN:

        clients:     [ hostA1, ... ]
        client-apps: [ hostB1, ... ]
        s3servers:   [ hostS1, ... ]
        confds:      [ hostC1, ... ]
        ssus:        [ { host: 'hostD1', disks: 'sh-glob-pattern' }, ... ]
        pools:
          - name: pool1
            disks: [ { host: 'hostD1', filter: 'regex' }, ... ]
            data_units: 8
            parity_units: 2
            allowed_failures: { site: 0, rack: 0, encl: 0, ctrl: 0, disk: 1 }

    'clients', 'client-apps' and 's3servers' sections can be omitted, but not
    all at the same time.

    'pools' section allows to group disks of corresponding SSU hosts
    into storage pools.  This section is optional, by default all
    disks from all SSUs form a single pool.  The 'filter' field in a
    disk specification is optional; by default all disks of given host
    are added to the pool.

    'allowed_failures' attribute is optional.  If it is missing, the
    corresponding pool will not tolerate any failures (i.e., the pool
    will become dud if any of its devices fails).  When 'allowed_failures'
    is provided, at least one of its values must be positive.

    'data_units' is the number of data units in a parity group.
    Default value is #{DATA_UNITS}.

    'parity_units' is the number of parity units in a parity group.
    This is also the number of spare units in a group.  Default value
    is #{PARITY_UNITS}.

  Options:

END_USAGE

    opts.on('-c', '--config FILE',
            "Input configuration. By default, it's read from STDIN") do |val|
        $options[:config] = val
    end

    opts.on('-o', '--output FILE',
            'Output file. By default, generated config is printed on STDOUT') do |val|
        $options[:output] = val
    end

    opts.on('-t', '--template FILE',
            "Input template file. Default is '#{TEMPLATE_FILE_PATH}'") do |val|
        $options[:template] = val
    end

    opts.on('-u', '--user NAME',
            "Remote user name. Default is same as the current user") do |val|
        $options[:remote_user] = val
    end

    opts.on('-e', '--netif IFNAME',
            'LNet interface. By default, a first network interface is used') do |val|
        $options[:iface] = val
    end

    opts.on('-E', '--management-netif IFNAME',
            'Management interface. By default same as LNet interface') do |val|
        $options[:iface_mgmt] = val
    end

    opts.on('-C', '--client-apps',
            'Enable client apps. client-app role is enabled for client nodes in' \
            ' halon_facts config') do
        $options[:client_apps] = true
    end

    opts.on('--s3-servers',
            'Enable s3 servers. s3server role is enabled for client nodes in' \
            ' halon_facts config') do
        $options[:s3_servers] = true
    end

    opts.on('--skip-fake-drives',
            "Skip drives that don't have serial number") do
        $options[:skip_fake_drives] = true
    end

    opts.on('--lnet-transport tcp|o2ib',
            'LNet transport layer. Either tcp (default) or o2ib') do |val|
        die "invalid --lnet-transport value '#{val}', use either 'tcp' or 'o2ib'" \
            if !val.match(/^(tcp|o2ib)$/)
        $options[:lnet_transport] = val
    end

    opts.on('-N', '--data-units NUM',
            "Number of data units in parity group, default is #{DATA_UNITS}") do |val|
        $options[:dataunits] = val
    end

    opts.on('-K', '--parity-units NUM',
            "Number of parity units in parity group, default is #{PARITY_UNITS}") do |val|
        $options[:parityunits] = val
    end

    opts.on('-b', '--block-size BYTES',
            "Motr block size in bytes, default is #{BLOCK_SIZE}") do |val|
        $options[:blocksize] = val
    end

    opts.on('-m', '--md-redundancy NUM',
            "Meta-data redundancy level, default is #{MD_REDUNDANCY}") do |val|
        $options[:mdredundancy] = val
    end

    opts.on('-S', '--dev-size BYTES', 'Blockdevice size in bytes') do |val|
        $options[:devsize] = val
    end

    opts.on('--min-rpc-recvq-len NUM', "default #{MIN_RPC_RECVQ_LEN}") do |val|
        $options[:minrpcrecvqlen] = val
    end

    opts.on('-s', '--be-segment-size BYTES',
            "Motr BE segment size in bytes, default is #{BE_SEGMENT_SIZE}") do |val|
        $options[:besegsize] = val
    end

    opts.on('--be-ios-seg-size BYTES', "default #{BE_IOS_SEG_SIZE}") do |val|
        $options[:beiossegsize] = val
    end

    opts.on('--be-log-size BYTES', "default #{BE_LOG_SIZE}") do |val|
        $options[:belogsize] = val
    end

    opts.on('--be-tx-payload-size-max BYTES', "default #{BE_TX_PAYLOAD_SIZE_MAX}") do |val|
        $options[:betxpayloadsizemax] = val
    end

    opts.on('--be-tx-reg-nr-max NUM', "default #{BE_TX_REG_NR_MAX}") do |val|
        $options[:betxregnrmax] = val
    end

    opts.on('--be-tx-reg-size-max BYTES', "default #{BE_TX_REG_SIZE_MAX}") do |val|
        $options[:betxregsizemax] = val
    end

    opts.on('--be-txgr-freeze-timeout-max SEC', "default #{BE_TXGR_FREEZE_TIMEOUT_MAX}") do |val|
        $options[:betxgrfreezetimeoutmax] = val
    end

    opts.on('--be-txgr-freeze-timeout-min SEC', "default #{BE_TXGR_FREEZE_TIMEOUT_MIN}") do |val|
        $options[:betxgrfreezetimeoutmin] = val
    end

    opts.on('--be-txgr-payload-size-max BYTES', "default #{BE_TXGR_PAYLOAD_SIZE_MAX}") do |val|
        $options[:betxgrpayloadsizemax] = val
    end

    opts.on('--be-txgr-reg-nr-max NUM', "default #{BE_TXGR_REG_NR_MAX}") do |val|
        $options[:betxgrregnrmax] = val
    end

    opts.on('--be-txgr-reg-size-max BYTES', "default #{BE_TXGR_REG_SIZE_MAX}") do |val|
        $options[:betxgrregsizemax] = val
    end

    opts.on('--be-txgr-tx-nr-max NUM', "default #{BE_TXGR_TX_NR_MAX}") do |val|
        $options[:betxgrtxnrmax] = val
    end

    opts.on('-v', '--[no-]verbose',
            'Run verbosely, print messages into STDERR') do |val|
        $options[:verbose] = val
    end

    opts.on_tail('-h', '--help', 'Print help message and exit') do
        puts opts
        exit
    end
end.parse!

#
# Helpers
#

Role_of = {
    'clients'     => 'datamover',
    'client-apps' => 'client-app',
    's3servers'   => 's3server',
    'confds'      => 'confd',
    'ssus'        => 'storage',
}.freeze

def build_nodes_from(config)
    rack_idx  = 1
    host_idx  = 0
    uniq_host = {}

    config.each_key.select { |k| k != 'pools' }.each do |host_type|
        config[host_type].each do |element|
            if element.is_a?(Hash)
                host  = element['host']
                disks = element['disks']
            else
                host  = element
            end

            if uniq_host.has_key?(host)
                uniq_host[host]['roles'].push(Role_of[host_type])
                uniq_host[host]['disks'] = disks unless disks.nil?
            else
                uniq_host[host] = {
                    'address' =>  host,
                    'roles'   =>  [ Role_of[host_type] ],
                    'rack'    =>  rack_idx,
                    'pos'     =>  host_idx,
                }
                uniq_host[host]['disks'] = disks unless disks.nil?
                host_idx += 1
            end

            uniq_host[host]['roles'].push('station') \
                if uniq_host[host]['roles'].include? 'confd'
        end
    end

    return uniq_host.values.sort { |x, y| x['pos'] <=> y['pos'] }
end

def run(cmd, host: Facter.value(:hostname))
    current_host = IPSocket.getaddress(Facter.value(:hostname))
    target_host  = IPSocket.getaddress(host)

    debug "run [#{host}]: #{cmd}"

    if current_host == target_host
        # local command
        output = `#{cmd}`.chomp

        die "local command failed with code #{$CHILD_STATUS.exitstatus}: [#{host}]: #{cmd}" \
            if !$options[:devsize] && $CHILD_STATUS.exitstatus.nonzero?
    else
        # remote command
        Net::SSH.start(target_host, $options[:remote_user]) do |ssh|
            output = ssh.exec!(cmd)
            output.chomp! unless output.nil?
        end
    end

    return output
end

def collect_facts_for(node)
    current_host = IPSocket.getaddress( Facter.value(:hostname) )
    target_host  = IPSocket.getaddress( node['address'] )

    if current_host == target_host # get local facts
        # use `hostname` directly instead of Facter interface because the latter
        # con return a different result if there is a 'search domainname'
        # present in /etc/resolv.conf, but Halon expects it to identical to
        # what's returned by `hostname`
        fqdn            = Facter.value(:hostname)
        iface           = $options[:iface] || Facter.value(:interfaces).split(',')[0]
        iface_mgmt      = $options[:iface_mgmt] || iface
        mac_addr        = Facter.value("macaddress_#{iface}")
        ip_addr         = Facter.value("ipaddress_#{iface}")
        mac_addr_mgmt   = Facter.value("macaddress_#{iface_mgmt}")
        ip_addr_mgmt    = Facter.value("ipaddress_#{iface_mgmt}")
        processorcount  = Facter.value(:processors)['count']
        memorysize_mb   = Facter.value(:memorysize_mb).to_i
    else # get remote facts
        Net::SSH.start(target_host, $options[:remote_user]) do |ssh|
            facter = ssh.exec!('which facter 2>/dev/null')

            die "`facter` is not found on host '#{target_host}', try to install" \
                + ' it with `yum install facter`' if facter.nil?

            fqdn            = ssh.exec!('facter hostname').chomp
            iface           = $options[:iface] ||
                              ssh.exec!('facter interfaces').split(',')[0].chomp
            iface_mgmt      = $options[:iface_mgmt] || iface
            mac_addr        = ssh.exec!("facter macaddress_#{iface}").chomp
            ip_addr         = ssh.exec!("facter ipaddress_#{iface}").chomp
            mac_addr_mgmt   = ssh.exec!("facter macaddress_#{iface_mgmt}").chomp
            ip_addr_mgmt    = ssh.exec!("facter ipaddress_#{iface_mgmt}").chomp
            processors      = ssh.exec!('facter --json processors')
            processorcount  = JSON.parse(processors)['processors']['count']
            memorysize_mb   = ssh.exec!('facter memorysize_mb').to_i
        end
    end

    return {
        'rack'                   => node['rack'],
        'vpos'                   => node['pos'],
        'serial_no'              => "ENC##{node['pos']}",
        'role'                   => node['roles'],
        'hostname'               => node['address'],
        'fqdn'                   => fqdn,
        'bmc_ip'                 => '0.0.0.0',
        'bmc2_ip'                => '0.0.0.0',
        'vlan_data_macaddress'   => mac_addr,
        'vlan_data_ip'           => ip_addr,
        'vlan_manage_macaddress' => mac_addr_mgmt,
        'vlan_manage_ip'         => ip_addr_mgmt,
        'processorcount'         => processorcount,
        'memorysize_mb'          => memorysize_mb,
    }
end

def build_disk_info(host, disk_path, index)
    debug "processing disk '#{disk_path}'"

    # block devices that don't represent a real drive (e.g. file-backed loop
    # devices) will have this field set to 'true'
    is_fake = false

    size = $options[:devsize] ||
           run("sudo blockdev --getsize64 #{disk_path} 2>/dev/null", host: host)

    die "[#{host}]: failed to obtain device size for '#{disk_path}' disk" \
        if size.nil?

    serial = run("sudo lsblk -ndo SERIAL #{disk_path} 2>/dev/null", host: host)
    if serial.to_s.strip.empty?
        is_fake = true
        stob    = size.to_i.zero? ? 'STOBLNX' : 'STOBAD'
        serial  = stob + format('%03d', index)
    end

    wwn = run("sudo lsblk -ndo WWN #{disk_path} 2>/dev/null", host: host)
    if wwn.to_s.strip.empty?
        is_fake = true
        wwn = '0x0000000' + format('%04d', index)
    end

    slot = run("ls /sys/block/$(basename $(readlink -f #{disk_path}))/device/ 2>/dev/null" +
               " | grep enclosure | cut -f2 -d':'", host: host)
    if slot.to_s.strip.empty?
        slot = index
    end

    return {
        'bay'     => slot,
        'path'    => disk_path,
        'size'    => size,
        'serial'  => serial,
        'wwn'     => wwn,
        'is_fake' => is_fake,
    }
end

# FIXME: ugly global variable
$disk_index = 1

def collect_disks_for(node)
    if node['disks'].is_a?(Array)
        disks = node['disks']
    elsif node['disks'].is_a?(String)
        disk_string = run("ls #{node['disks']} 2>/dev/null", host: node['address'])

        die "[#{node['address']}]: failed to find disks matching pattern '#{node['disks']}'" \
            if (disk_string.nil? || disk_string.strip.empty?)

        disks = disk_string.split(' ')
    else
        die "unsupported format of 'disks' list for host '#{node['address']}'," \
            + ' should be either a string or an array'
    end

    disks_info = []

    disks.each do |disk_path|
        di = build_disk_info(node['address'], disk_path, $disk_index)
        if di['is_fake'] && $options[:skip_fake_drives]
            debug "skipping fake drive '#{disk_path}' as requested (option --skip-fake-drives)"
        else
            disks_info.push(di)
        end
        $disk_index += 1
    end

    return disks_info
end

#
# Template substitution variables
#

m0_lnet_transport              = $options[:lnet_transport]
m0_data_units                  = $options[:dataunits]
m0_parity_units                = $options[:parityunits]
m0_block_size                  = $options[:blocksize]
m0_be_seg_size                 = $options[:besegsize]
m0_md_redundancy               = $options[:mdredundancy]
m0_min_rpc_recvq_len           = $options[:minrpcrecvqlen]
m0_be_ios_seg_size             = $options[:beiossegsize]
m0_be_log_size                 = $options[:belogsize]
m0_be_tx_payload_size_max      = $options[:betxpayloadsizemax]
m0_be_tx_reg_nr_max            = $options[:betxregnrmax]
m0_be_tx_reg_size_max          = $options[:betxregsizemax]
m0_be_txgr_freeze_timeout_max  = $options[:betxgrfreezetimeoutmax]
m0_be_txgr_freeze_timeout_min  = $options[:betxgrfreezetimeoutmin]
m0_be_txgr_payload_size_max    = $options[:betxgrpayloadsizemax]
m0_be_txgr_reg_nr_max          = $options[:betxgrregnrmax]
m0_be_txgr_reg_size_max        = $options[:betxgrregsizemax]
m0_be_txgr_tx_nr_max           = $options[:betxgrtxnrmax]

halon_port      = 9070
q_dbfacts       = {}
ios_hash        = {}
extra_clients   = []
pools           = []

def gen_allowances(allowed_failures)
    return (0..allowed_failures['site']).to_a.product(
               (0..allowed_failures['rack']).to_a,
               (0..allowed_failures['encl']).to_a,
               (0..allowed_failures['ctrl']).to_a,
               (0..allowed_failures['disk']).to_a
           ).select { |xs| xs.any? { |x| x > 0 } }
end

#
# Read configuration
#

cluster_config = {}

if ARGV.empty?
    log 'Generating Halon facts for a cluster'
    input = $options[:config] == STDIN ? 'STDIN' : $options[:config]
    log "Reading cluster configuration from #{input}"

    if $options[:config] != STDIN
        $options[:config] = File.open($options[:config], 'r')
    end

    cluster_config = YAML.load( $options[:config].read )

    die "invalid cluster config - it can't be empty" \
        unless cluster_config

    ['confds', 'ssus'].each do |key|
        unless cluster_config.has_key?(key)
            die "invalid cluster config: '#{key}' list is missing or empty"
        end
    end

    if !cluster_config.has_key?('clients') &&
       !cluster_config.has_key?('client-apps') &&
       !cluster_config.has_key?('s3servers')
        die 'invalid cluster config: at least one of the "clients", "client-apps"' \
            + ' or "s3servers" lists must be specified'
    end

    if !cluster_config.has_key?('pools')
        cluster_config['pools'] = [{
            'name'  => 'default',
            'disks' => cluster_config['ssus'].map{ |x| {'host' => x['host']} },
        }]
    end

    cluster_config['pools'].each do |pool|
        if pool.has_key?('allowed_failures')
           if pool['allowed_failures'].values.all? { |x| x <= 0 }
               die 'invalid cluster config: \'allowed_failures\' of pool \'' +
                   pool['name'] + '\' must have at least one positive value'
           end
           pool['allowed_failures'] = gen_allowances(pool['allowed_failures'])
        else
            pool['allowed_failures'] = []
        end
        pool['data_units'] = $options[:dataunits] if !pool.has_key?('data_units')
        pool['parity_units'] = $options[:parityunits] if !pool.has_key?('parity_units')
    end
else
    log 'Generating Halon facts for singlenode'
    log 'Reading disks configuration from CLI arguments'

    cluster_config = {
        'confds'   => [ Facter.value(:hostname) ],
        'ssus'     => [{
           'host'  => Facter.value(:hostname),
           'disks' => ARGV,
        }],
        'pools'    => [{
           'name'  => 'default',
           'disks' => [ {'host' => Facter.value(:hostname)} ],
           'allowed_failures' => gen_allowances({
                                                    'site' => 0,
                                                    'rack' => 0,
                                                    'encl' => 0,
                                                    'ctrl' => 0,
                                                    'disk' => 1
                                                }),
           'data_units' => $options[:dataunits],
           'parity_units' => $options[:parityunits]
        }],
    }

    if $options[:client_apps]
        cluster_config['client-apps'] = [ Facter.value(:hostname) ]
    end
    if $options[:s3_servers]
        cluster_config['s3servers'] = [ Facter.value(:hostname) ]
    end
    cluster_config['clients'] = [ Facter.value(:hostname) ]
end

#
# Collect facts
#

log 'Collecting facts about nodes and disks'
build_nodes_from(cluster_config).each do |node|
    log "Getting facts about '#{node['address']}' node"
    q_dbfacts[ node['address'] ] = collect_facts_for(node)
    ios_hash[ node['address'] ] =
        if node.has_key?('disks')
            log "Getting disks info for '#{node['address']}' node"
            collect_disks_for(node)
        else
            []
        end
end

log 'Allocating disks in pool(s)'
cluster_config['pools'].each do |pool|
    disks = []
    pool['disks'].each do |d|
        die "pools configuration refers to unknown SSU host '#{ios_hash[d['host']]}'" \
            if ! ios_hash.has_key? d['host']

        if d.has_key? 'filter'
            filtered_disks = ios_hash[d['host']].select{|x| x['path'] =~ Regexp.new(d['filter'])}
            disks.concat(filtered_disks)
        else
            disks.concat(ios_hash[d['host']])
        end
    end
    pools.push({name: pool['name'],
                disks: disks,
                allowed_failures: pool['allowed_failures'],
                data_units: pool['data_units'],
                parity_units: pool['parity_units']})
end

#
# Process template and print results
#

if $options[:output] != STDOUT
    $options[:output] = File.open($options[:output], 'w')
end

template = ERB.new( File.read($options[:template]), nil, '-' )
log 'Producing halon facts YAML'
$options[:output].puts( template.result(binding) )
