#!/usr/bin/env python
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


from __future__ import print_function  # print to sys.stderr
import code
import optparse
import sys
import traceback
import atexit
import signal
import os
from subprocess import Popen, PIPE
from motr import *
from ctypes import *



def address_get():
    try:
        p = Popen(['lctl', 'list_nids'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
    except OSError:
        return ''
    # When the tool is executing without sudo privileges (i. e. with "--help"
    # option) then lctl output will be an empty string)
    return output.split()[0] if output else ''


default_libmotr_path = '../../motr/.libs/libmotr.so'
addr = address_get()
default_ha_ep = addr + ':12345:34:1001'
default_client_ep = addr + ':12345:34:200'


# Helper function to check the type of the function parameter. This is useful
# when we want to make sure that user execute a Spiel command with correct
# parameter types. Here is quote from ctypes documentation: "ctypes tries to
# protect you from calling functions with the wrong number of arguments or the
# wrong calling convention. Unfortunately this only works on Windows. It does
# this by examining the stack after the function returns, so although an error
# is raised the function has been called: To find out the correct calling
# convention you have to look into the C header file or the documentation for
# the function you want to call."
#
# It will be executed before annotated function. Helper takes a dictionary
# where key is parameter name and value is required parameter type. If all
# parameters pass type checking then the target function will be called,
# otherwise TypeError will be raised with error message containing information
# about invalid parameter.
#
# Example of usage:
# @require(fid=Fid)
# service_init(self, fid)
def require(**params):
    def check_types(func, params=params):
        def modified(*args, **kw):
            arg_names = func.func_code.co_varnames
            kw.update(zip(arg_names, args))
            for name, type in params.iteritems():
                param = kw[name]
                param_valid = param is None or isinstance(param, type)
                if not param_valid:
                    raise TypeError("Parameter '{0}' should be of type '{1}'"
                                    .format(name, type.__name__))
            return func(**kw)
        return modified
    return check_types


# enum m0_conf_service_type
service_types = range(1, 22)
M0_CST_MDS, M0_CST_IOS, M0_CST_CONFD, M0_CST_RMS, M0_CST_STATS, M0_CST_HA, \
    M0_CST_SSS, M0_CST_SNS_REP, M0_CST_SNS_REB, M0_CST_ADDB2, \
    M0_CST_CAS, M0_CST_DIX_REP, M0_CST_DIX_REB, M0_CST_DS1, \
    M0_CST_DS2, M0_CST_FIS, M0_CST_FDMI, M0_CST_BE, \
    M0_CST_M0T1FS, M0_CST_CLIENT, M0_CST_ISCS = service_types


# enum m0_cfg_storage_device_interface_type
storage_device_interface = range(1, 8)
M0_CFG_DEVICE_INTERFACE_ATA, M0_CFG_DEVICE_INTERFACE_SATA, \
    M0_CFG_DEVICE_INTERFACE_SCSI, M0_CFG_DEVICE_INTERFACE_SATA2, \
    M0_CFG_DEVICE_INTERFACE_SCSI2, M0_CFG_DEVICE_INTERFACE_SAS, \
    M0_CFG_DEVICE_INTERFACE_SAS2 = storage_device_interface


# enum m0_cfg_storage_device_media_type
storage_device_media_type = range(1, 5)
M0_CFG_DEVICE_MEDIA_DISK, M0_CFG_DEVICE_MEDIA_SSD, M0_CFG_DEVICE_MEDIA_TAPE, \
    M0_CFG_DEVICE_MEDIA_ROM = storage_device_media_type


# enum m0_cm_status
cm_status = range(5)
CM_STATUS_INVALID, CM_STATUS_IDLE, CM_STATUS_STARTED, \
    CM_STATUS_FAILED, CM_STATUS_PAUSED = cm_status


# struct m0_fid
class Fid(Structure):
    _fields_ = [("f_container", c_uint64), ("f_key", c_uint64)]

    def __str__(self):
        return "<" + hex(self.f_container)[:-1] + ":" + str(self.f_key) + ">"


spiel_rms_fid = Fid(0x7300000000000004, 100)


# struct m0_bitmap
class Bitmap(Structure):
    _fields_ = [("b_nr", c_uint32), ("b_words", POINTER(c_uint64))]


# struct m0_net_xprt
class NetXprt(Structure):
    _fields_ = [('nx_name', c_char_p), ('nx_ops', c_void_p)]


# struct m0_reqh_init_args
class ReqhInitArgs(Structure):
    _fields_ = [('rhia_dtm', c_void_p), ('rhia_db', c_void_p),
                ('rhia_mdstore', c_void_p), ('rhia_pc', c_void_p),
                ('rhia_fid', POINTER(Fid))]


# struct m0_pdclust_attr
class PdclustAttr(Structure):
    _fields_ = [('pa_N', c_uint32), ('pa_K', c_uint32), ('pa_P', c_uint32),
                ('pa_unit_size', c_uint64), ('pa_seed', Fid)]


# struct m0_spiel_service_info
class ServiceInfo(Structure):
    _fields_ = [('svi_type', c_uint),
                ('svi_endpoints', POINTER(POINTER(c_char)))]


# struct m0_spiel_tx
class SpielTx:
    def __init__(self, spiel):
        self.data = None


class SpielSnsStatus(Structure):
    _fields_ = [('sss_fid', Fid),
                ('sss_state', c_uint),
                ('sss_progress', c_uint)]


class FsStats(Structure):
    _fields_ = [('fs_free_seg', c_uint64),
                ('fs_total_seg', c_uint64),
                ('fs_free_disk', c_uint64),
                ('fs_avail_disk', c_uint64),
                ('fs_total_disk', c_uint64),
                ('fs_svc_total', c_uint32),
                ('fs_svc_replied', c_uint32)]


class RunningServices(Structure):
    _fields_ = [('spls_fid', Fid), ('spls_name', c_char_p)]


def call(func, *args):
    rc = func(*args)
    if rc != 0:
        raise RuntimeError('%s() failed, rc=%d' % (func.__name__, rc))

class SpielWrapper:
    def __init__(self, motr):
        self.motr = CDLL(motr)
        self.motr.malloc.restype = c_void_p
        self.signal_nr = None
        self.signal_cb = None

    def spiel_init(self, client, ha):
        self.client_ep = c_char_p(client or default_client_ep)
        self.ha_ep = c_char_p(ha or default_ha_ep)
        self.__m0_init()
        self.__net_domain_init()
        self.__net_buffer_pool_setup()
        self.__reqh_setup()
        self.__rpc_machine_init()
        self.__ha_session_init()
        self.__spiel_init()

    def spiel_fini(self):
        self.motr.m0_spiel_fini(self.spiel)
        self.__free(self.spiel)
        self.motr.m0_sns_cm_repair_trigger_fop_fini()
        self.motr.m0_sns_cm_rebalance_trigger_fop_fini()
        self.motr.m0_dix_cm_repair_trigger_fop_fini()
        self.motr.m0_dix_cm_rebalance_trigger_fop_fini()
        self.motr.m0_motr_ha_disconnect(self.mha)
        self.motr.m0_motr_ha_stop(self.mha)
        self.motr.m0_motr_ha_fini(self.mha)
        self.__free(self.mha)
        self.motr.m0_rpc_machine_fini(self.rpc_machine)
        self.__free(self.rpc_machine)
        self.motr.m0_reqh_services_terminate(self.reqh)
        self.motr.m0_reqh_fini(self.reqh)
        self.__free(self.reqh)
        self.motr.m0_rpc_net_buffer_pool_cleanup(self.buffer_pool)
        self.__free(self.buffer_pool)
        self.motr.m0_net_domain_fini(self.domain)
        self.__free(self.domain)
        self.motr.m0_fini(self.m0)
        self.__free(self.m0)

    @require(spiel_tx=SpielTx)
    def tx_open(self, spiel_tx):
        spiel_tx.data = self.__malloc(m0_spiel_tx__size())
        self.motr.m0_spiel_tx_open(self.spiel, spiel_tx.data)

    @require(spiel_tx=SpielTx)
    def tx_commit(self, spiel_tx):
        return self.motr.m0_spiel_tx_commit(spiel_tx.data)

    @require(spiel_tx=SpielTx)
    def tx_close(self, spiel_tx):
        self.motr.m0_spiel_tx_close(spiel_tx.data)
        self.__free(spiel_tx.data)

    @require(spiel_tx=SpielTx, rootfid=Fid, mdpool=Fid, imeta_pver=Fid,
             mdredundancy=int, params=list)
    def root_add(self, spiel_tx, rootfid, mdpool, imeta_pver, mdredundancy,
                 params):
        # `params` must be list of strings. Unfortunately ctypes can't
        # automatically convert list (or array) of strings to something
        # compatible with char**. The code below do this.

        # The line below is similar to:
        # char *params[N], where N equals to len(params)
        params_p = (c_char_p * len(params))()
        # The following line is similar to:
        # params_p[0] = params[0]
        # ...
        # params_p[N] = params[N]
        params_p[:] = params
        # Now ctypes can convert params_p to char **
        return self.motr.m0_spiel_root_add(spiel_tx.data, byref(rootfid),
                                           byref(mdpool), byref(imeta_pver),
                                           mdredundancy, params_p)

    @require(spiel_tx=SpielTx, fid=Fid, memsize=int, nr_cpu=int,
             last_state=long, flags=long)
    def node_add(self, spiel_tx, fid, memsize, nr_cpu, last_state, flags):
        return self.motr.m0_spiel_node_add(spiel_tx.data, byref(fid), memsize,
                                           nr_cpu, last_state, flags)

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, cores=Bitmap,
             memory_limit_as=long, memory_limit_rss=long,
             memory_limit_stack=long, memory_limit_memlock=long, endpoint=str)
    def process_add(self, spiel_tx, fid, parent, cores, memory_limit_as,
                    memory_limit_rss, memory_limit_stack,
                    memory_limit_memlock, endpoint):
        return self.motr.m0_spiel_process_add(spiel_tx.data, byref(fid),
                                              byref(parent), byref(cores),
                                              c_uint64(memory_limit_as),
                                              c_uint64(memory_limit_rss),
                                              c_uint64(memory_limit_memlock),
                                              c_uint64(memory_limit_stack),
                                              endpoint)

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, svc_type=int,
             svc_endpoints=list)
    def service_add(self, spiel_tx, fid, parent, svc_type, svc_endpoints):
        if svc_type not in service_types:
            print("Invalid service type " + str(svc_type), file=sys.stderr)
            sys.exit(1)
        endpoints_p = (c_char_p * len(svc_endpoints))()
        endpoints_p[:] = svc_endpoints
        svc_info = ServiceInfo(svc_type,
                               cast(endpoints_p, POINTER(POINTER(c_char))))
        return self.motr.m0_spiel_service_add(spiel_tx.data, byref(fid),
                                              byref(parent), byref(svc_info))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, drive=Fid, dev_idx=int,
             iface=int, media=int, bsize=int, size=long, last_state=long,
             flags=long, filename=str)
    def device_add(self, spiel_tx, fid, parent, drive, dev_idx, iface, media,
                   bsize, size, last_state, flags, filename):
        if iface not in storage_device_interface:
            print("Invalid storage device interface " + str(iface))
            sys.exit(1)
        if media not in storage_device_media_type:
            print("Invalid storage device media type " + str(media))
            sys.exit(1)
        return self.motr.m0_spiel_device_add(spiel_tx.data, byref(fid),
                                             byref(parent), byref(drive),
                                             dev_idx, iface, media, bsize,
                                             size, last_state, flags, filename)

    @require(spiel_tx=SpielTx, fid=Fid)
    def site_add(self, spiel_tx, fid):
        return self.motr.m0_spiel_site_add(spiel_tx.data, byref(fid))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid)
    def rack_add(self, spiel_tx, fid, parent):
        return self.motr.m0_spiel_rack_add(spiel_tx.data, byref(fid),
                                           byref(parent))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid)
    def enclosure_add(self, spiel_tx, fid, parent):
        return self.motr.m0_spiel_enclosure_add(spiel_tx.data, byref(fid),
                                                byref(parent))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, node=Fid)
    def controller_add(self, spiel_tx, fid, parent, node):
        return self.motr.m0_spiel_controller_add(spiel_tx.data, byref(fid),
                                                 byref(parent), byref(node))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid)
    def drive_add(self, spiel_tx, fid, parent):
        return self.motr.m0_spiel_drive_add(spiel_tx.data, byref(fid),
                                            byref(parent))

    @require(spiel_tx=SpielTx, fid=Fid, pver_policy=int)
    def pool_add(self, spiel_tx, fid, pver_policy):
        return self.motr.m0_spiel_pool_add(spiel_tx.data, byref(fid),
                                           pver_policy)

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, attrs=PdclustAttr,
             tolerance=list)
    def pver_actual_add(self, spiel_tx, fid, parent, attrs, tolerance):
        tolerance_p = (c_uint32 * len(tolerance))()
        tolerance_p[:] = tolerance
        return self.motr.m0_spiel_pver_actual_add(spiel_tx.data, byref(fid),
                                                  byref(parent),
                                                  byref(attrs),
                                                  tolerance_p,
                                                  c_uint32(len(tolerance)))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, index=int, base_pver=Fid,
             allowance=list)
    def pver_formulaic_add(self, spiel_tx, fid, parent, index, base_pver,
                           allowance):
        allowance_p = (c_uint32 * len(allowance))()
        allowance_p[:] = allowance
        return self.motr.m0_spiel_pver_formulaic_add(spiel_tx.data, byref(fid),
                                                     byref(parent), index,
                                                     byref(base_pver),
                                                     allowance_p,
                                                     c_uint32(len(allowance)))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, real=Fid)
    def site_v_add(self, spiel_tx, fid, parent, real):
        return self.motr.m0_spiel_site_v_add(spiel_tx.data, byref(fid),
                                             byref(parent), byref(real))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, real=Fid)
    def rack_v_add(self, spiel_tx, fid, parent, real):
        return self.motr.m0_spiel_rack_v_add(spiel_tx.data, byref(fid),
                                             byref(parent), byref(real))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, real=Fid)
    def enclosure_v_add(self, spiel_tx, fid, parent, real):
        return self.motr.m0_spiel_enclosure_v_add(spiel_tx.data, byref(fid),
                                                  byref(parent), byref(real))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, real=Fid)
    def controller_v_add(self, spiel_tx, fid, parent, real):
        return self.motr.m0_spiel_controller_v_add(spiel_tx.data, byref(fid),
                                                   byref(parent), byref(real))

    @require(spiel_tx=SpielTx, fid=Fid, parent=Fid, real=Fid)
    def drive_v_add(self, spiel_tx, fid, parent, real):
        return self.motr.m0_spiel_drive_v_add(spiel_tx.data, byref(fid),
                                              byref(parent), byref(real))

    @require(spiel_tx=SpielTx, fid=Fid)
    def pool_version_done(self, spiel_tx, fid):
        return self.motr.m0_spiel_pool_version_done(spiel_tx.data, byref(fid))

    @require(spiel_tx=SpielTx, fid=Fid)
    def profile_add(self, spiel_tx, fid):
        return self.motr.m0_spiel_profile_add(spiel_tx.data, byref(fid))

    @require(spiel_tx=SpielTx, profile=Fid, pool=Fid)
    def profile_pool_add(self, spiel_tx, profile, pool):
        return self.motr.m0_spiel_profile_pool_add(spiel_tx.data,
                                                   byref(profile), byref(pool))

    @require(spiel_tx=SpielTx, fid=Fid)
    def element_del(self, spiel_tx, fid):
        return self.motr.m0_spiel_element_del(spiel_tx.data, byref(fid))

#############################################################################
#                                                                           #
#                              Command Interface                            #
#                                                                           #
#############################################################################

    def register_signal(self):
        if self.signal_nr and self.signal_cb:
            signal.signal(self.signal_nr, self.signal_cb)

    def rconfc_start(self):
        return self.motr.m0_spiel_rconfc_start(self.spiel, None)

    def rconfc_stop(self):
        self.motr.m0_spiel_rconfc_stop(self.spiel)

    def confstr(self):
        self.motr.m0_spiel_confstr.argtypes = [c_void_p, POINTER(c_char_p)]
        s = c_char_p()
        call(self.motr.m0_spiel_confstr, self.spiel, byref(s))
        return s.value

    @require(profile=str)
    def cmd_profile_set(self, profile):
        return self.motr.m0_spiel_cmd_profile_set(self.spiel, profile)

    @require(fid=Fid)
    def service_init(self, fid):
        return self.motr.m0_spiel_service_init(self.spiel, byref(fid))

    @require(fid=Fid)
    def service_start(self, fid):
        return self.motr.m0_spiel_service_start(self.spiel, byref(fid))

    @require(fid=Fid)
    def service_quiesce(self, fid):
        return self.motr.m0_spiel_service_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def service_stop(self, fid):
        return self.motr.m0_spiel_service_stop(self.spiel, byref(fid))

    @require(fid=Fid)
    def service_health(self, fid):
        return self.motr.m0_spiel_service_health(self.spiel, byref(fid))

    @require(fid=Fid)
    def device_attach(self, fid):
        return self.motr.m0_spiel_device_attach(self.spiel, byref(fid))

    @require(fid=Fid)
    def device_detach(self, fid):
        return self.motr.m0_spiel_device_detach(self.spiel, byref(fid))

    @require(fid=Fid)
    def device_format(self, fid):
        return self.motr.m0_spiel_device_format(self.spiel, byref(fid))

    @require(fid=Fid)
    def process_stop(self, fid):
        return self.motr.m0_spiel_process_stop(self.spiel, byref(fid))

    @require(fid=Fid)
    def process_reconfig(self, fid):
        return self.motr.m0_spiel_process_reconfig(self.spiel, byref(fid))

    @require(fid=Fid)
    def process_health(self, fid):
        return self.motr.m0_spiel_process_health(self.spiel, byref(fid))

    @require(fid=Fid)
    def process_quiesce(self, fid):
        return self.motr.m0_spiel_process_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def process_list_services(self, fid, svc_list=POINTER(RunningServices)):
        return self.motr.m0_spiel_process_list_services(self.spiel, byref(fid),
                                                        byref(svc_list))

    @require(fid=Fid)
    def sns_repair_start(self, fid):
        return self.motr.m0_spiel_sns_repair_start(self.spiel, byref(fid))

    @require(fid=Fid)
    def sns_repair_abort(self, fid):
        return self.motr.m0_spiel_sns_repair_abort(self.spiel, byref(fid))

    @require(fid=Fid)
    def sns_repair_quiesce(self, fid):
        return self.motr.m0_spiel_sns_repair_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def sns_repair_continue(self, fid):
        return self.motr.m0_spiel_sns_repair_continue(self.spiel, byref(fid))

    @require(fid=Fid, ppstatus=POINTER(SpielSnsStatus))
    def sns_repair_status(self, fid, ppstatus):
        return self.motr.m0_spiel_sns_repair_status(self.spiel, byref(fid),
                                                    byref(ppstatus))

    @require(fid=Fid)
    def dix_repair_start(self, fid):
        return self.motr.m0_spiel_dix_repair_start(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_repair_abort(self, fid):
        return self.motr.m0_spiel_dix_repair_abort(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_repair_quiesce(self, fid):
        return self.motr.m0_spiel_dix_repair_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_repair_continue(self, fid):
        return self.motr.m0_spiel_dix_repair_continue(self.spiel, byref(fid))

    @require(fid=Fid, ppstatus=POINTER(SpielSnsStatus))
    def dix_repair_status(self, fid, ppstatus):
        return self.motr.m0_spiel_dix_repair_status(self.spiel, byref(fid),
                                                    byref(ppstatus))

    @require(fid=Fid)
    def sns_rebalance_start(self, fid):
        return self.motr.m0_spiel_sns_rebalance_start(self.spiel, byref(fid))

    @require(fid=Fid)
    def sns_rebalance_quiesce(self, fid):
        return self.motr.m0_spiel_sns_rebalance_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def sns_rebalance_continue(self, fid):
        return self.motr.m0_spiel_sns_rebalance_continue(self.spiel,
                                                         byref(fid))

    @require(fid=Fid, ppstatus=POINTER(SpielSnsStatus))
    def sns_rebalance_status(self, fid, ppstatus):
        return self.motr.m0_spiel_sns_rebalance_status(self.spiel, byref(fid),
                                                       byref(ppstatus))

    @require(fid=Fid)
    def dix_rebalance_start(self, fid):
        return self.motr.m0_spiel_dix_rebalance_start(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_rebalance_quiesce(self, fid):
        return self.motr.m0_spiel_dix_rebalance_quiesce(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_rebalance_continue(self, fid):
        return self.motr.m0_spiel_dix_rebalance_continue(self.spiel,
                                                         byref(fid))

    @require(fid=Fid, ppstatus=POINTER(SpielSnsStatus))
    def dix_rebalance_status(self, fid, ppstatus):
        return self.motr.m0_spiel_dix_rebalance_status(self.spiel, byref(fid),
                                                       byref(ppstatus))

    @require(stats=FsStats)
    def filesystem_stats_fetch(self, stats):
        return self.motr.m0_spiel_filesystem_stats_fetch(self.spiel,
                                                         byref(stats))

    @require(fid=Fid)
    def sns_rebalance_abort(self, fid):
        return self.motr.m0_spiel_sns_rebalance_abort(self.spiel, byref(fid))

    @require(fid=Fid)
    def dix_rebalance_abort(self, fid):
        return self.motr.m0_spiel_dix_rebalance_abort(self.spiel, byref(fid))

    def __m0_init(self):
        m0 = self.__malloc(m0__size())
        call(self.motr.m0_init, m0)
        self.m0 = m0

    def __net_domain_init(self):
        domain = self.__malloc(m0_net_domain__size())
        self.motr.m0_net_xprt_default_get.restype = c_void_p
        xprt = self.motr.m0_net_xprt_default_get()
        if not xprt:
            xprt = NetXprt.in_dll(self.motr, 'm0_net_lnet_xprt')

        self.motr.m0_net_domain_init.argtypes = [c_void_p, c_void_p]
        call(self.motr.m0_net_domain_init, domain, xprt)
        self.domain = domain

    def __net_buffer_pool_setup(self):
        buffer_pool = self.__malloc(m0_net_buffer_pool__size())
        call(self.motr.m0_rpc_net_buffer_pool_setup, self.domain, buffer_pool,
             c_uint32(2),  # nr bufs
             c_uint32(1))  # nr TMs
        self.buffer_pool = buffer_pool

    def __reqh_setup(self):
        reqh = self.__malloc(m0_reqh__size())
        reqh_args = ReqhInitArgs()
        reqh_args.rhia_fid = pointer(Fid(0x7200000000000001, 5))  # process-5
        reqh_args.rhia_mdstore = 1  # dummy value
        call(self.motr.m0_reqh_init, reqh, byref(reqh_args))
        self.__free(reqh_args)
        self.motr.m0_reqh_start(reqh)
        rms = self.__malloc(m0_reqh_service__size())
        rms_p = cast(rms, c_void_p)
        call(self.motr.m0_reqh_service_setup, rms_p, self.motr.m0_rms_type,
             reqh, None, byref(spiel_rms_fid))
        self.reqh = reqh

    def __rpc_machine_init(self):
        rpc_machine = self.__malloc(m0_rpc_machine__size())
        call(self.motr.m0_rpc_machine_init, rpc_machine, self.domain,
             self.client_ep, self.reqh, self.buffer_pool,
             c_uint(~0),       # M0_BUFFER_ANY_COLOUR
             c_uint(1 << 17),  # M0_RPC_DEF_MAX_RPC_MSG_SIZE (128 KB)
             c_uint(2))       # M0_NET_TM_RECV_QUEUE_DEF_LEN
        self.rpc_machine = rpc_machine

    def __ha_session_init(self):
        mha_cfg = self.__malloc(m0_motr_ha_cfg__size())
        self.motr.m0_motr_ha_cfg_make(mha_cfg, self.reqh, self.rpc_machine,
                                      self.ha_ep)
        self.mha = self.__malloc(m0_motr_ha__size())
        call(self.motr.m0_motr_ha_init, self.mha, mha_cfg)
        call(self.motr.m0_motr_ha_start, self.mha)
        self.motr.m0_motr_ha_connect(self.mha)
        self.__free(mha_cfg)

    def __spiel_init(self):
        spiel = self.__malloc(m0_spiel__size())
        call(self.motr.m0_spiel_init, spiel, self.reqh)
        self.motr.m0_sns_cm_repair_trigger_fop_init()
        self.motr.m0_sns_cm_rebalance_trigger_fop_init()
        self.motr.m0_dix_cm_repair_trigger_fop_init()
        self.motr.m0_dix_cm_rebalance_trigger_fop_init()
        self.spiel = spiel

    def __malloc(self, size):
        ptr = self.motr.malloc(size)  # XXX Why don't we use m0_alloc()?
        memset(ptr, 0, size)
        return ptr

    def __free(self, ptr):
        self.motr.free(ptr)


class SpielTool:
    def __init__(self, motr):
        self.spiel = SpielWrapper(motr)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if (exc_type is None):
            trace_file = "m0trace." + str(os.getpid())
            if os.path.isfile(trace_file):
                os.remove(trace_file)

    def interactive_console_create(self):
        vars = globals()
        vars.update({'spiel': tool.spiel})
        return code.InteractiveConsole(vars)


class MyParser(optparse.OptionParser):
    def format_usage(self, formatter):
        return self.usage


def create_arguments_parser():
    parser = MyParser(usage='''sudo ./m0spiel [options]

Spiel commands interpreter.

The tool must be executed with sudo command and RPC server must be started
before the tool execution:

\tsudo m0t1fs/linux_kernel/st/m0t1fs_server.sh start default
\tcd utils/m0spiel
\tsudo ./m0spiel

Internally the tool has a number of classes that match corresponding C
structures. Spiel functions work with the following Motr objects:
\t1. Fid (struct m0_fid)
\t3. PdclustAttr (struct m0_pdclust_attr)
\t4. ServiceInfo (struct m0_spiel_service_info)
\t5. SpielTx (struct m0_spiel_tx)
User can create an instance of any class listed above and pass it to a spiel
function.

After the tool is initialized, user has access to object named "spiel" and may
call a function from Spiel library. Each wrapper function is similar to the
corresponding function from C except that user doesn't need to pass Spiel
(m0_spiel) instance.

The following example illustrates usage of the tool:

Execute commands from command line:

\techo 'print(spiel_service_init(Fid(1,1)))' | sudo ./m0spiel''')
    parser.add_option('--ha', '-s', default=default_ha_ep,
                      help='HA endpoint. Default value: ' +
                      default_ha_ep)
    parser.add_option('--client', '-c', default=default_client_ep,
                      help='Client endpoint. Default value: ' +
                      default_client_ep)
    parser.add_option('-l', default=default_libmotr_path, dest='motr',
                      help='Path to libmotr.so. Default value: ' +
                      default_libmotr_path)
    return parser


if __name__ == "__main__":
    parser = create_arguments_parser()
    args, _ = parser.parse_args()
    tool = SpielTool(args.motr)
    with tool:
       try:
            atexit.register(tool.spiel.spiel_fini)
            tool.spiel.spiel_init(args.client, args.ha)
       except RuntimeError as e:
            print('an error occurred: ' + str(e), file=sys.stderr)
            print('-' * 80, file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            print('-' * 80, file=sys.stderr)
            sys.exit(1)
       interpreter = tool.interactive_console_create()
       prompt = '> ' if sys.stdin.isatty() else ''
       while 1:
           try:
               s = raw_input(prompt)
               res = interpreter.push(s)
           except (EOFError, KeyboardInterrupt):
               break
