#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


### set up a working environment and control motr-singlenode services

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly self=$(readlink -f $0)
readonly base_dir=$(dirname $self)
readonly singlenonde_services='
    motr-kernel
    motr-server-ha
    motr-server-confd
    motr-server@mds
    motr-server@ios1
    motr-server@cas1
    motr
    motr-client
    motr-singlenode
'

# variables
verbose=false
cli_args=

# colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NC=$(tput sgr0)

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [options] <action>

  Where <action> is one of:

    activate    - Activate motr-singlenode services, as initially they are
                  masked. This needs to be done once, after motr.rpm installation
                  or upgrade.

    enable      - Enable motr-singlenode services to be loaded on system startup.

    disable     - Disable motr-singlenode services from being loaded on system
                  startup.

    start       - Start motr-singlenode services.
    stop        - Stop motr-singlenode services.
    restart     - Re-start motr-singlenode services.
    status      - Show present status of motr-singlenode services.

  Options are:

    -v|--verbose            Enable verbose output.

    -h|--help               Print this help screen.
USAGE_END
}

#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt --options hv \
                   --longoptions help,verbose \
                   --name "$PROG_NAME" -- "$@" )

    [[ $? -ne 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -v)                 verbose=true;         shift   ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...'; exit 1 ;;
        esac
    done

    # remaining command line arguments
    cli_args="$@"
}

#
# Utility functions
#

log()
{
    echo "--->  $*"
}

logn()
{
    echo -n "--->  $*"
}

debug()
{
    ! $verbose || echo -e "$PROG_NAME:  DEBUG:  $*"
}

warn()
{
    echo "$PROG_NAME: WARNING: $*"
}

die()
{
    echo "$PROG_NAME:  ERROR:  $*" >&2
    exit 1
}

path_of()
{
    echo "$base_dir/$1"
}

get_cursor()
{
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\033[6n" > /dev/tty
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    row=$((${pos[0]:2} - 1))    # strip off the esc-[
    col=$((${pos[1]} - 1))

    echo "$row $col"
}

get_param_of()
{
    local service=$1
    local param=$2

    systemctl show "$service" | grep -Po "(?<=^$param=).*"
}

start_singlenode()
{
    # In some situations 'lnet' service can be started but lnet modules may be
    # unloaded so systemd won't know it needs to load them them back, in such
    # condition other services that depend on lnet will fail on start; the
    # workaround is to re-load lnet modules, which is done by 'restart'.
    # If lnet module is already loaded, there is no need to reload it,
    # just make sure the lnet.service is started.
    lsmod | grep -q lnet && systemctl start lnet || {
        log 'Starting LNet'; systemctl restart lnet; }

    log 'Starting motr-singlenode services'
    systemctl start motr-singlenode &

    local status_col=45

    for s in $singlenonde_services ; do
        logn "  waiting for $s  "

        while ! systemctl is-failed -q $s && ! systemctl is-active -q $s ; do
            sleep 1 ; echo -n .
        done

        local cursor_pos=(0 0)
        if [[ -t 1 ]] ; then
            cursor_pos=( $(get_cursor) )
        fi
        if [[ ${cursor_pos[1]} -gt $status_col ]] ; then
            status_col=${cursor_pos[1]}
        fi
        # move cursor to status column position
        if [[ ${cursor_pos[0]} -ne 0 && -t 1 ]] ; then
            tput cup ${cursor_pos[0]} $status_col
        fi

        if systemctl is-failed -q $s ; then
            echo "  [${RED}FAILED${NC}]"
            trap "systemctl status $s" EXIT
            die  "Service '$s' failed to start."
        fi

        systemctl is-active -q $s && echo "  [  ${GREEN}OK${NC}  ]"
    done

    for i in $(jobs -p) ; do
        wait $i
    done
}

stop_singlenode()
{
    log 'Stopping motr-singlenode services'
    systemctl stop motr-singlenode &

    local status_col=57

    for s in motr-singlenode motr-client motr-server@cas1 motr-server@ios1 \
        motr-server@mds motr-server-confd motr-server-ha motr motr-kernel
    do
        logn "  waiting for $s  "

        while ! systemctl is-failed -q $s \
              && [[ ! $(systemctl is-active $s) =~ inactive|unknown ]]
        do
            sleep 1 ; echo -n .
        done

        local cursor_pos=(0 0)
        if [[ -t 1 ]] ; then
            cursor_pos=( $(get_cursor) )
        fi
        if [[ ${cursor_pos[1]} -gt $status_col ]] ; then
            status_col=${cursor_pos[1]}
        fi
        # move cursor to status column position
        if [[ -t 1 ]] ; then
            tput cup ${cursor_pos[0]} $status_col
        fi

        if systemctl is-failed -q $s ; then
            echo "  [${RED}FAILED${NC}]"
            echo '----------------------------------------------------------'
            systemctl status -o cat $s || true
            echo '----------------------------------------------------------'
        else
            ! systemctl is-active -q $s && echo "  [  ${GREEN}OK${NC}  ]"
        fi
    done

    for i in $(jobs -p) ; do
        wait $i
    done
}

singlenode_status()
{
    local color=$NC
    local atime=

    echo '### Global state --------------------------------'

    local loadstate=$(get_param_of motr-singlenode LoadState)
    case $loadstate in
        loaded) color=$GREEN ;;
        masked) color=$RED   ;;
        *)      color=$NC    ;;
    esac
    echo " State:                  $color$loadstate$NC"

    local autostart=$(get_param_of motr-singlenode UnitFileState)
    case $autostart in
        enabled)  color=$GREEN ;;
        disabled) color=$RED   ;;
        *)        color=$NC    ;;
    esac
    echo " Autostart:              $color$autostart$NC"

    local lnet=$(get_param_of lnet ActiveState)
    local lnet_nid=
    case $lnet in
        active)   color=$GREEN
                  lnet_nid=$(lctl list_nids)
                  atime=$(get_param_of lnet ActiveEnterTimestamp)
                  ;;
        failed)   color=$RED ; atime=$(get_param_of lnet InactiveEnterTimestamp) ;;
        inactive) color=$NC  ; atime= ;;
        *)        color=$NC  ; atime= ;;
    esac
    echo " LNet:                   $color$lnet$NC    $atime"
    echo ' LNet Network ID:       ' $lnet_nid

    echo
    echo '### Kernel --------------------------------------'

    local kernel=$(get_param_of motr-kernel ActiveState)
    case $kernel in
        active)   color=$GREEN ; atime=$(get_param_of motr-kernel ActiveEnterTimestamp)  ;;
        failed)   color=$RED   ; atime=$(get_param_of motr-kernel InactiveEnterTimestamp) ;;
        inactive) color=$NC    ; atime= ;;
        *)        color=$NC    ; atime= ;;
    esac
    echo " motr-kernel             $color$kernel$NC    $atime"
    lsmod | grep m0 | awk '{ print "   " $LN }'

    echo
    echo '### Servers -------------------------------------'

    for stype in '-ha   ' '-confd' '@mds  ' @ios{1..9}' ' @cas{1..9}' ' ; do
        atiem=
        color=$NC
        local pid=
        local padding='    '
        local state=$(get_param_of motr-server$stype ActiveState)

        case $state in
            active)   atime=$(get_param_of motr-server$stype ActiveEnterTimestamp)
                      pid=$(get_param_of motr-server$stype MainPID)
                      color=$GREEN ;;
            failed)   atime=$(get_param_of motr-server$stype InactiveEnterTimestamp)
                      color=$RED   ;;
            inactive) padding='  ' ;;
        esac

        if [[ (! $stype =~ @ios[2-9] && ! $stype =~ @cas[2-9]) || $state =~ ^(active|failed)$ ]] ; then
            echo " motr-server$stype       $color$state$NC$padding$atime    ${pid:+PID:$pid}"
        fi
    done

    echo
    echo '### Trace ---------------------------------------'

    for stype in kernel 'ha    ' 'confd ' 'mds   ' ios{1..9}'  ' cas{1..9}'  ' ; do
        atiem=
        color=$NC
        local state=$(get_param_of motr-trace@$stype ActiveState)

        case $state in
            active) atime=$(get_param_of motr-trace@$stype ActiveEnterTimestamp)
                    color=$GREEN ;;
            failed) atime=$(get_param_of motr-trace@$stype InactiveEnterTimestamp)
                    color=$RED   ;;
        esac

        if [[ $state =~ ^(active|failed)$ ]] ; then
            echo " motr-trace@$stype       $color$state$NC    $atime"
        fi
    done
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e

parse_cli_options "$@"
eval set -- "$cli_args"

[[ $UID -eq 0 ]] ||
    die 'Please, run this script with "root" privileges.'

# check color support, disable colored output if STDOUT isn't a terminal
[[ -t 1 ]] || {
    RED=
    GREEN=
    NC=
}

m0setup=$(path_of m0setup)
action="$1"; shift

case $action in

    activate)  $m0setup -A ;;
    enable)    systemctl enable motr-singlenode ;;
    disable)   systemctl disable motr-singlenode ;;
    start)     start_singlenode ;;
    stop)      stop_singlenode ;;
    restart)   stop_singlenode ; sleep 1 ; start_singlenode ;;
    status)    singlenode_status ;;

    *) die "Unsupported action '$action', available actions are: " \
           "activate|enable|disable|start|stop|restart|status"
       ;;
esac
