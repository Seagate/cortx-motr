#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


### clean up dated m0trace.PID files left after `m0d` and `halond` services

#
# Global vars
#

# constants
readonly PROG_NAME=$(basename $0)
readonly SELF=$(readlink -f $0)
readonly BASE_DIR=$(dirname $SELF)
readonly TRACE_FILE_SIZE=$((64 * 1024**2))  # 64 MiB
readonly LOG_FILE='tracepurge.log'

# colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput bold ; tput setaf 7)
NC=$(tput sgr0)

# variables
cli_args=()
verbose=false
dry_run=false
list_files=false
colorize='auto'
max_files=16
min_files=4
var_motr_dir='/var/motr'
log_dir='/var/log/motr'

#
# Logging
#

log()
{
    echo "${WHITE}--->  $*${NC}" >&2
}

logn()
{
    echo -n "${WHITE}--->  $*" >&2
}

logr()
{
    echo -n $'\r' >&2
    log "$*"
}

debug()
{
    ! $verbose || echo -e "$PROG_NAME:  ${CYAN}DEBUG${NC}:  $*" >&2
}

warn()
{
    echo "$PROG_NAME: ${YELLOW}WARNING${NC}: $*" >&2
}

die()
{
    echo "$PROG_NAME:  ${RED}ERROR${NC}:  $*" >&2
    exit 1
}

show_progress()
{
    __progress_counter=${__progress_counter:-1}
    if [[ $((__progress_counter++ % 5)) -eq 0 ]] ; then
        echo -n '.' >&2
    fi
}

#
# Usage
#

help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}

usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [options] [service] [max-space[M|G]]

    service     - name of a service for which cleanup should be performed;
                  if omitted, all found services are considered

    max-space   - maximum disk space allowed for trace files per service, it can
                  have a G or M suffix, for gigabytes or megabytes respectively;
                  if omitted, G is assumed

  Options are:

    -l|--list       List existing trace files and mark those which would be
                    cleaned up.

    -n|--dry-run    Don't remove anything, just show what files would be
                    deleted.

    -k|--keep NUM   If <max-space> isn't specified, this option controls how
                    many trace files to keep per service. Default is $max_files.
                    Can't be less than $min_files.

    -c|--color=always
    -C|--color=never
       --color=auto
                    Control output colorization.

    -m|--var-motr-dir PATH

                    Path to the root of Motr metadata storage.
                    Default is $var_motr_dir.

    -L|--log-dir PATH

                    Where to store the log file. Default is '$log_dir'.
                    File name is '$LOG_FILE'.

    -v|--verbose    Enable verbose output.

    -h|--help       Print this help screen.
USAGE_END
}

#
# Parse CLI options
#

parse_cli_options()
{
    # Note that we use `"$@"' to let each command-line parameter expand to a
    # separate word. The quotes around `$@' are essential!
    # We need TEMP as the `eval set --' would nuke the return value of getopt.
    TEMP=$( getopt --options hvlnk:cCm:L: \
                   --longoptions help,verbose,list,dry-run,keep:,color:,var-motr-dir:,log-dir: \
                   --name "$PROG_NAME" -- "$@" )

    [[ $? -ne 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -l|--list)          list_files=true ; shift ;;
            -n|--dry-run)       dry_run=true ; shift ;;
            -k|--keep)          max_files=$2 ; shift 2 ;;
            --color)            colorize=$2  ; shift 2
                                case $colorize in
                                    auto|always|never) ;;
                                    *) die "incorrect value for --color option: '$colorize'" \
                                           ", should be one of 'auto|always|never'"
                                        ;;
                                esac
                ;;
            -c)                 colorize='always' ; shift ;;
            -C)                 colorize='never'  ; shift ;;
            -m|--var-motr-dir)  var_motr_dir=$2 ; shift 2 ;;
            -L|--log-dir)       log_dir=$2      ; shift 2 ;;
            -h|--help)          help stdout ;;
            -v)                 verbose=true ; shift ;;
            --)                 shift; break ;;
            *)                  echo 'getopt: internal error...' >&2 ; exit 1 ;;
        esac
    done

    # remaining command line arguments
    cli_args=("$@")
}

#
# Utility functions
#

value_of()
{
    local header="$1"
    local field_name=$2

    perl -MYAML::XS <<END_PERL
        local \$/;
        my \$d = Load(<DATA>);
        if (ref \$d->{header}{$field_name} eq ARRAY) {
            print "@{ \$d->{header}{$field_name} }"
        }
        else {
            print \$d->{header}{$field_name};
        }
__DATA__
$header
END_PERL
}

format_trace_info()
{
    local show_cli=0

    if $verbose && $list_files ; then
        show_cli=1
    fi

    perl -ne "\
        if (/(.*?) (\\S+m0trace\\S+) \\s+ (\\S+T\\S+) \\s+ (\\d+MiB) \\s+ (.*?) (?: \\s+ -- \\s+ (.*) )?\$/xms) { \
            printf {STDOUT} \"%s%-52s  %s  %s   %s\n\", \$1, \$2, \$3, \$4, \$5; \
            if (defined \$6 && $show_cli) { \
                my \$extra_info = \$6; \
                my \$padlen = length( \$1 =~ s/\\x1b\\[[0-9;]*m//r ); \
                printf {STDERR} \"%\${padlen}s└─%s\", \"\", \$extra_info \
            } \
        } \
        else { \
            chomp \$_; \
            print {STDERR} \"$PROG_NAME: ${YELLOW}WARNING${NC}: internal error, unmatched trace info line: '\$_'\n\"; \
        } \
    "
}

purge_trace_files_for()
{
    local service=$1

    local service_dir

    case $service in
        halon*) service_dir='/var/log' ;;
        *)      service_dir="$var_motr_dir/$service" ;;
    esac

    [[ -d $service_dir ]] ||
        die "can't find service's meta-data dir '$service_dir'"

    logn "$service.."

    local trace_files=$(find $service_dir -maxdepth 1 -type f -name 'm0trace.*[0-9]')
    local total_size=0
    local count=$(echo "$trace_files" | wc -w)
    local output
    local file

    for file in $trace_files ; do
        local header=$($BASE_DIR/m0tracedump -H -i $file)
        local date=$(value_of "$header" trace_time)
        local size=$(stat --printf=%s $file)
        local size_mb=$((size / 1024**2))
        local flags=$(value_of "$header" flags)
        local cli_args=$(value_of "$header" cli_args)

        total_size=$((total_size + size))
        output+=$(echo -e "\n $file  $date  ${size_mb}MiB  $flags${NC}" ${cli_args:+"-- $cli_args"})
        show_progress
    done

    local running_total_size=$total_size
    local recovered_size=0
    local del_count=0
    local potential_del_count=0

    if [[ -n "$output" ]] ; then
        # sort from oldest to newest
        output=$(echo "$output" | grep -Pv '^\s*$' | sort -k2)
        show_progress

        local lines=()
        readarray lines <<<"$output"

        local numcol=2
        local marked_output
        local i
        for (( i=0 ; i < ${#lines[@]} ; i++ )) ; do
            file=$(echo "${lines[$i]}" | awk '{print $1}')
            size=$(stat --printf=%s $file)

            local color=$CYAN

            if [[ ${lines[$i]} =~ DIRTY ]] ; then
                color=$MAGENTA
            elif [[ ${lines[$i]} =~ MKFS ]] ; then
                color=$BLUE
            fi

            local D=
            local Dnum=$(printf " %-${numcol}s")
            # non-mkfs and non-crash traces, skipping the first and the last in
            # a consecutive series OR crash traces, skipping first two and last two
            # in a consecutive series
            if [[ ! ${lines[$i]} =~ MKFS|DIRTY                                     \
                  && $((i-1)) -ge 0            && ! ${lines[$((i-1))]} =~ DIRTY    \
                  && $((i+1)) -lt ${#lines[@]} && ! ${lines[$((i+1))]} =~ DIRTY ]] \
               ||                                                                  \
               [[ ! ${lines[$i]} =~ MKFS && ${lines[$i]} =~ DIRTY                  \
                  && $((i-2)) -ge 0            && ${lines[$((i-2))]} =~ DIRTY      \
                  &&                              ${lines[$((i-1))]} =~ DIRTY      \
                  &&                              ${lines[$((i+1))]} =~ DIRTY      \
                  && $((i+2)) -lt ${#lines[@]} && ${lines[$((i+2))]} =~ DIRTY ]]
            then
                if [[ $i -lt $((${#lines[@]} - min_files)) ]] ; then
                    if [[ $running_total_size -gt $max_space ]] ; then
                        D=D
                        color=$RED
                        running_total_size=$((running_total_size - size))
                        recovered_size=$((recovered_size + size))
                        del_count=$((++del_count))
                    fi
                    potential_del_count=$((++potential_del_count))
                    Dnum=$(printf " %0${numcol}d" $potential_del_count)
                fi
            fi

            marked_output+=$(echo -e "\n$color${D:- }${Dnum}${lines[$i]}")
            show_progress
        done
    fi

    logr "$service $del_count/$count files" \
         "$((recovered_size / 1024**2))/$((total_size / 1024**2))MiB"

    if [[ $running_total_size -gt $max_space ]] ; then
        warn "not able to clean up enough space for $service service:" \
            "total size after cleanup $((running_total_size / 1024**2))MiB"
    fi

    if [[ -n "$marked_output" ]] ; then
        if $list_files ; then
            echo "$marked_output" | grep -Pv '^\s*$' | format_trace_info
        else
            local D_lines=$(echo "$marked_output" | grep -P '^(?:\x1b\[[0-9;]*m)?D' \
                            | format_trace_info)

            if [[ -n "$D_lines" ]] ; then
                local D_line
                echo "$D_lines" | while read -r D_line
                do
                    echo "$D_line"
                    file=$(echo "$D_line" | awk '{print $3}')

                    if $verbose ; then
                        echo "$(stat $file)" | sed -e 's/^/ | /'
                        echo "$($BASE_DIR/m0tracedump -H -i $file)" | sed -e 's/^/ | /'
                    fi

                    $dry_run || rm -f "$file"
                done
            fi
        fi
    fi
}

#
# Main
#

# exit immediately if one the commands exits with a non-zero status
set -e -o pipefail

parse_cli_options "$@"
set -- "${cli_args[@]}"

# disable colored output if colorize=never
# or colorize=auto and STDOUT isn't a terminal
if [[ $colorize == never || $colorize == auto && ! -t 1 ]] ; then
    RED=
    GREEN=
    YELLOW=
    BLUE=
    MAGENTA=
    CYAN=
    WHITE=
fi

# handle cli arguments
#
if [[ $1 =~ ^[[:digit:]]+[GM]?$ ]] ; then
    max_space=$1
elif [[ $2 =~ ^[[:digit:]]+[GM]?$ ]] ; then
    service=$1
    max_space=$2
elif [[ -n "$2" && ! $2 =~ ^[[:digit:]]+[GM]?$ ]] ; then
    die "incorrect format of max-space argument ($2), should a number with" \
        "an optional M or G suffix"
else
    service=$1
    max_space="$((TRACE_FILE_SIZE / 1024**2 * max_files))M"
fi

case $max_space in
    *M)     max_space=$(( ${max_space%%M} * 1024**2 )) ;;
    *[0-9]) debug "unitless value of max-space argument ($max_space), assuming GiB"
            ;&  # fall through to the next case
    *G)     max_space=$(( ${max_space%%G} * 1024**3 )) ;;
esac

# sanity checks
#
[[ $max_space -gt 0 ]] ||
    die "max-space argument should be greater than zero, was $max_space"

[[ $max_files -ge $min_files ]] ||
    die "-k|--keep option's value ($max_files) can't be less than $min_files"

[[ $max_space -ge $((min_files * TRACE_FILE_SIZE)) ]] ||
    die "max-space argument ($max_space) should be at least" \
        "${min_files}x$((TRACE_FILE_SIZE / 1024**2))MiB"

debug "purging trace files for ${service:-any} service that exceeds" \
      "$((max_space / 1024**2))MiB limit"

log "retaining max $((max_space / 1024**2))MiB per service"

[[ -d $log_dir ]] ||
    mkdir -p "$log_dir"

if ! $list_files && ! $dry_run ; then
    debug "logging output into $log_dir/$LOG_FILE"
    echo "==============================[ $(date -Isec) ]==============================" \
         >> "$log_dir/$LOG_FILE"
    exec > >(tee -a "$log_dir/$LOG_FILE")
fi

# do work
#
if [[ -n "$service" ]] ; then
    purge_trace_files_for $service
else
    for dir in $(find $var_motr_dir -mindepth 1 -maxdepth 1 -type d) halon ; do
        purge_trace_files_for $(basename $dir)
        ! $verbose || echo
    done
fi

exit 0
