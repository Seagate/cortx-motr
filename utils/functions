# -*- sh -*-

 # libfab does not need kernel based ST
 LIBFAB_TESTS_SKIPLIST=(04initscripts
                 06conf
                 07mount
                 07mount-fail
                 07mount-multiple
                 08spiel
                 08spiel-sns-repair
                 08spiel-sns-repair-quiesce
                 10pver-assign
                 11m0t1fs
                 11m0t1fs-rconfc-fail
                 12fsync
                 12fwait
                 13dgmode-io
                 14poolmach
                 15sns-repair-shutdown
                 15sns-repair-single
                 16sns-repair-multi
                 17sns-repair-concurrent-io
                 18sns-repair-quiesce
                 18sns-repair-quiesce-failure
                 19sns-repair-abort
                 20rpc-session-cancel
                 21fsync-single-node
                 22sns-repair-ios-fail
                 23sns-abort-quiesce
                 26motr-user-kernel-tests
                 28sys-kvs
                 28sys-kvs-kernel
                 34sns-repair-1n-1f
                 35m0singlenode
                 36spare-reservation
                 37protocol
                 51kem)

 # libisal does not need kernel based ST
 LIBISAL_TESTS_SKIPLIST=(
             08spiel-sns-repair
             08spiel-sns-repair-quiesce
             11m0t1fs
             13dgmode-io
             16sns-repair-multi
             18sns-repair-quiesce
             18sns-repair-quiesce-failure
             19sns-repair-abort
             22sns-repair-ios-fail
             23sns-abort-quiesce
 )

SYSCONFIG_DIR='/etc/sysconfig'
[ -d $SYSCONFIG_DIR ] || SYSCONFIG_DIR='/etc/default'

die() { echo "$@" >&2; exit 1; }

sandbox_init() {
    [ -n "${SANDBOX_DIR:-}" ] || die 'SANDBOX_DIR: unbound variable'
    rm -rf $SANDBOX_DIR
    mkdir -p $SANDBOX_DIR
    pushd $SANDBOX_DIR >/dev/null
}

sandbox_fini() {
    [ -n "${SANDBOX_DIR:-}" ] || die 'SANDBOX_DIR: unbound variable'
    local rc=${1:-0} # non-zero value denotes unsuccessful termination

    popd &>/dev/null || true
    if [ -z "${KEEP_SANDBOX:-}" -a $rc -eq 0 ]; then
        rm -r $SANDBOX_DIR
    fi
}

### Similar to `source` builtin command with `set +eu` in effect.
###
### Vanilla `. /etc/rc.d/init.d/functions` will fail if either "errexit"
### (set -e) or "nounset" (set -u) option is turned on.
source_eu() {
    local orig=$-
    set +eu
    . "$@"
    set -$orig
}

### Example:
###     $ opcode M0_LAYOUT_OPCODE
###     92
opcode() {
    [ $# -eq 1 ] || die "${FUNCNAME[0]}: Invalid usage"
    local NAME="$1"

    [ -n "${M0_SRC_DIR:-}" ] || die 'M0_SRC_DIR: unbound variable'
    grep -v '#pragma once' $M0_SRC_DIR/rpc/rpc_opcodes.h | cpp -I$M0_SRC_DIR |
        awk "/$NAME/ {print \$3}" | tr -d ,
}

is_lnet_available() {
    local lnid
    local result="false"

    lnid=$(lctl list_nids | head -n1)
    if [[ ! -z "$lnid" && -f $M0_SRC_DIR/m0tr.ko ]]; then
        result="true"
    fi
    echo "$result"
}

check_and_restart_lnet() {
    local lustre_rpm
    local result="false"

    lustre_rpm=$(rpm -qa | grep -w lustre)
    if [[ ! -z "$lustre_rpm" && -f $M0_SRC_DIR/m0tr.ko ]]; then
        if [[ $(is_lnet_available) == "false" ]]; then
            modprobe lnet
            lctl network up >/dev/null
            systemctl restart lnet
            if [[ $(is_lnet_available) == "true" ]]; then
                result="true"
            fi
        else
            result="true"
        fi
    fi
    echo "$result"
}

m0_modules_insert() {
    insmod $M0_SRC_DIR/m0tr.ko \
    local_addr=${M0T1FS_ENDPOINT%:*}: \
    max_rpc_msg_size=$MAX_RPC_MSG_SIZE \
    tm_recv_queue_min_len=$TM_MIN_RECV_QUEUE_LEN \
    ${M0_TRACE_IMMEDIATE_MASK:+trace_immediate_mask=$M0_TRACE_IMMEDIATE_MASK} \
    ${M0_TRACE_LEVEL:+trace_level=$M0_TRACE_LEVEL} \
    ${M0_TRACE_PRINT_CONTEXT:+trace_print_context=$M0_TRACE_PRINT_CONTEXT} \
    || {
        die 'Inserting m0tr.ko failed'
    }
}

m0_modules_remove() {
    rmmod m0tr || true
}

export_test_eps() {
    local format=${1:-old}
    local NID=$(m0_local_nid_get "$format")
    XPRT=$(m0_default_xprt)

    if [[ "$XPRT" == "lnet" || "$format" == "old" ]]; then
        ## LNet endpoint address format (see net/lnet/lnet.h):
        ##     NID:PID:Portal:TMID
        ##
        ## The PID value of 12345 is used by Lustre in the kernel and is
        ## the only value currently supported.
        M0T1FS_EP=":12345:34:1"
        M0D1_EP=":12345:34:1001"
        M0D2_EP=":12345:34:1002"
        M0D3_EP=":12345:34:1003"
        SPIEL_EP=":12345:34:2001"
    else
        M0T1FS_EP="@3000"
        M0D1_EP="@4001"
        M0D2_EP="@4002"
        M0D3_EP="@4003"
        SPIEL_EP="@5001"
    fi
    export M0T1FS_ENDPOINT="$NID$M0T1FS_EP"
    export M0D1_ENDPOINT="$NID$M0D1_EP"
    export M0D2_ENDPOINT="$NID$M0D2_EP"
    export M0D3_ENDPOINT="$NID$M0D3_EP"
    export SPIEL_ENDPOINT="$NID$SPIEL_EP"
}

## Adding function to identify the default available transport layer
m0_default_xprt()
{
    local trans
    local user
    touch $M0_SRC_DIR/scripts/st.d/net_xpt
    user=$(cat $M0_SRC_DIR/scripts/st.d/net_xpt)
    if [[ "$user" == "libfab" ||  "$user" == "" ]]; then
        trans=$(whereis fi_info | cut -d ':' -f2)
        if [[ ! -z "$trans" ]]; then
             trans=libfab
        else
             echo 'libfab is not installed. lnet is selected' >&2
             trans=lnet
        fi
        if [ "$user" = "" ]; then
            echo $trans > $M0_SRC_DIR/scripts/st.d/net_xpt
        fi
    else
        trans=lnet
    fi
    echo $trans
}

## To get local nid address
m0_local_nid_get()
{
    local local_nid
    XPRT=$(m0_default_xprt)
    if [ "$XPRT" = "lnet" ]
    then
        local_nid=`sudo lctl list_nids | head -1`
    else
        touch /etc/libfab.conf
        local netconf=$(cat /etc/libfab.conf)
        if [[ "$netconf" == "" ]]; then
            netstat -i > /etc/libfab_tmp.txt
            local conf=$(sed -n '3p' /etc/libfab_tmp.txt | awk '{print $1;}')
            echo "networks=tcp($conf)" > /etc/libfab.conf
            rm /etc/libfab_tmp.txt
        fi
        local iface=`cat /etc/libfab.conf | grep '\S' | grep --invert-match "^ *#" | cut -d "(" -f2 | cut -d ")" -f1`
        local proto=`cat /etc/libfab.conf | grep '\S' | grep --invert-match "^ *#" | cut -d "=" -f2 | cut -d "(" -f1`
        local ip_addr=`ip addr show $iface |grep inet| head -1 | awk '{print $2}'|cut -d '/' -f1`

        local format=${1:-old}
        if [[ "$format" == "new" ]]; then
            local_nid=inet:$proto:$ip_addr
        else
            local_nid=$ip_addr@$proto
        fi
    fi
    echo $local_nid
}

report_and_exit() {
    [ $# -eq 2 ] || die "${FUNCNAME[0]}: Invalid usage"
    local name=$1
    local rc=$2
    local re='(^|[[:space:]])'"$name"'($|[[:space:]])'

    TRANSPORT=$(m0_default_xprt)

    if [ $rc -eq 0 ]; then
        local status="SUCCESS"
        ## This message is used by Jenkins as a test success criteria;
        ## it must appear on stdout.
        if [ "${TRANSPORT}" == 'libfab' ]; then
            if [[ "${LIBFAB_TESTS_SKIPLIST[*]}" =~ $re ]]; then
	        status="SKIPPED"
            fi
        elif [[ "${LIBISAL_TESTS_SKIPLIST[*]}" =~ $re ]]; then
	        status="SKIPPED"
        fi
        echo "$name: test status: $status"
    else
        echo "$name: FAILURE $rc" >&2
        exit $rc
    fi
}
